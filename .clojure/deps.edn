;; Originally based on https://github.com/practicalli/clojure-deps-edn/blob/master/deps.edn
;;
;; The deps.edn file describes the information needed to build a classpath.
;;
;; deps.edn configuration is a combination of
;; - install-level (latest Clojure version at install time)
;; - user level - $HOME/.clojure/deps.edn
;; - project level - deps.edn in root of project
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{;; Paths
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Directories in the current project to include in the classpath
 ;; - typically defined in the project deps.edn file
 ;; :paths ["src" "resource"]

 ;; External dependencies
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 :deps
 {org.clojure/clojure {:mvn/version "1.10.1"}}

 :aliases
 {;;   resolve-deps aliases (-R) affect dependency resolution, options:
  ;;     :extra-deps - specifies extra deps to add to :deps
  ;;     :override-deps - specifies a coordinate to use instead of that in :deps
  ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
  ;;   make-classpath aliases (-C) affect the classpath generation, options:
  ;;     :extra-paths - vector of additional paths to add to the classpath
  ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

  :deps
  {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "RELEASE"}}}

  ;; Templates
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  :new {:extra-deps {seancorfield/clj-new {:mvn/version "1.1.243"}}
        :exec-fn clj-new/create
        :exec-args {:template "app"}}

  ;; REPL experience
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Extra nice-ness from https://asciinema.org/a/296507

  ;; Clojure REPL with syntax highlighting, built in docs and a quit command `:repl/quit`

  :repl
  {:extra-deps {com.bhauman/rebel-readline {:mvn/version "RELEASE"}
                com.gfredericks/user.clj {:mvn/version "RELEASE"}
                org.clojure/core.async {:mvn/version "RELEASE"}
                org.clojure/core.logic {:mvn/version "RELEASE"}
                org.clojure/test.check {:mvn/version "RELEASE"}
                com.clojure-goes-fast/clj-java-decompiler {:mvn/version "RELEASE"}
                com.clojure-goes-fast/clj-memory-meter {:mvn/version "RELEASE"}
                com.clojure-goes-fast/clj-async-profiler {:mvn/version "RELEASE"}
                com.clojure-goes-fast/jvm-alloc-rate-meter {:mvn/version "RELEASE"}
                com.clojure-goes-fast/jvm-hiccup-meter {:mvn/version "RELEASE"}
                io.aviso/pretty {:mvn/version "RELEASE"}
                mvxcvi/puget {:mvn/version "RELEASE"}
                com.hypirion/clj-xchart {:mvn/version "RELEASE"}
                org.clojure/clojure {:mvn/version "RELEASE"}
                generateme/fastmath {:mvn/version "RELEASE"}
                clj-commons/pomegranate {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "rebel-readline.main"]}

  ;; Testing frameworks
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Include the test directory as a path used by Clojure CLI tools

  :test-path
  {:extra-paths ["test" "src/test/clojure"]}

  ;; Clojure.test
  ;; Nothing required as it is part of the Clojure library.

  ;; Clojure spec

  :spec
  {:extra-deps {org.clojure/spec.alpha {:mvn/version "0.2.176"}}}

  ;; Clojure spec 2 - under active development

  :spec2
  {:extra-deps {org.clojure/spec-alpha2
                {:git/url "https://github.com/clojure/spec-alpha2"
                 :sha     "495e5ac3238be002b4de72d1c48479f6bec06bb3"}}}

  ;; Expectations test framework
  ;; https://github.com/clojure-expectations/clojure-test
  ;; Example usage:
  ;; clojure -A:expectations:test-runner-cognitect

  :expectations
  {:extra-deps {expectations/clojure-test {:mvn/version "1.2.1"}}}

  ;; Classic version not compatible with clojure.test and tools
  ;; https://github.com/clojure-expectations/expectations

  :expectations-classic
  {:extra-deps {expectations/expectations {:mvn/version "2.1.10"}}}

  ;; Test runners
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cognitect test-runner
  ;; https://github.com/cognitect-labs/test-runner

  :test-runner-cognitect
  {:extra-paths ["test"]
   :extra-deps  {com.cognitect/test-runner
                 {:git/url "https://github.com/cognitect-labs/test-runner.git"
                  :sha     "f7ef16dc3b8332b0d77bc0274578ad5270fbfedd"}}
   :main-opts   ["-m" "cognitect.test-runner"]}

  ;; ClojureScript test runner
  ;; https://github.com/Olical/cljs-test-runner

  :test-runner-cljs
  {:extra-paths ["test"]
   :extra-deps  {olical/cljs-test-runner {:mvn/version "3.7.0"}}
   :main-opts   ["-m" "cljs-test-runner.main"]}

  ;; kaocha - comprehensive test runner for Clojure/Script
  ;; tests.edn should be created for each project
  ;; https://github.com/lambdaisland/kaocha

  :test-runner-kaocha
  {:extra-paths ["test"]
   :extra-deps  {lambdaisland/kaocha {:mvn/version "1.0-612"}}
   :main-opts   ["-m" "kaocha.runner"]}

  ;; midje-runner
  ;; https://github.com/miorimmax/midje-runner

  :test-runner-midje
  {:extra-paths ["test"]
   :extra-deps  {midje-runner
                 {:git/url "https://github.com/miorimmax/midje-runner.git"
                  :sha     "ee9c2813e150ae6b3ea41b446b09ba40fc89bdc1"}}
   :main-opts   ["-m" "midje-runner.runner"]}

  ;; eftest - fast and pretty test runner
  ;; There may be a nicer way to do the main-opts - see the Eastwood and kibit issue discussion
  ;; https://github.com/jonase/eastwood/commit/4d1d05cc6de6ce565207d9a3c86864364f53f006

  :test-runner-eftest
  {:extra-paths ["test"]
   :extra-deps  {eftest {:mvn/version "0.5.9"}}
   :main-opts   ["-e"  "(require,'[eftest.runner,:refer,[find-tests,run-tests]]),(run-tests,(find-tests,\"test\"))"]}

  ;; Test Coverage tools
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Cloverage - Simple clojure coverage tool
  ;; https://github.com/cloverage/cloverage
  ;; In the root of your Clojure project, run the command:
  ;; clojure -A:test-coverage

  :test-coverage
  {:extra-paths ["test"]
   :extra-deps  {cloverage {:mvn/version "RELEASE"}}
   :main-opts   ["-m" "cloverage.coverage"]}

  ;; Linting/ static analysis
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; clj-kondo - comprehensive and fast linter
  ;; https://github.com/borkdude/clj-kondo/

  :lint
  {:extra-deps {clj-kondo {:mvn/version "RELEASE"}}
   :main-opts  ["-m" "clj-kondo.main"]}

  ;; Eastwood - classic lint tool
  ;; https://github.com/jonase/eastwood#running-eastwood-in-a-repl

  :lint-eastwood
  {:main-opts  ["-m" "eastwood.lint" {:source-paths ["src"]}]
   :extra-deps {jonase/eastwood {:mvn/version "RELEASE"}}}

  ;; kibit - suggest idiomatic use of Clojure
  ;; https://github.com/jonase/kibit/issues/221

  :idiom-check
  {:extra-deps {tvaughan/kibit-runner {:mvn/version "0.2.3"}}
   :main-opts  ["-m" "kibit-runner.cmdline"]}

  ;; Dependency version management
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; Manage versions for maven and git dependencies
  ;; https://github.com/Olical/depot
  ;; Report dependencies that have newer versions available
  ;; Update library versions in this deps.edn file:
  ;; cd ~/.clojure && clojure -A:outdated

  :outdated
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"]}

  ;; clj -A:outdated-update
  :outdated-update
  {:extra-deps {olical/depot {:mvn/version "1.8.4"}}
   :main-opts  ["-m" "depot.outdated.main"
                "--update"]}

  ;; The classic project for checking maven based dependencies

  :outdated-ancient
  {:main-opts  ["-m" "deps-ancient.deps-ancient"]
   :extra-deps {deps-ancient {:mvn/version "RELEASE"}}}

  ;; Hot loading dependencies - EXPERIMENTAL / APLPHA
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; Hot loading is not officially part of tools.deps and
  ;; this alias could change significantly in future

  ;; Add new deps to a running REPL:
  ;; (require '[clojure.tools.deps.alpha.repl :refer [add-lib]])
  ;; (add-lib 'domain/library {:mvn/version "RELEASE"})
  ;; Git deps
  ;; (require '[clojure.tools.gitlibs :as gitlibs])
  ;; (defn load-master [lib]
  ;;   (let [git (str "https://github.com/" lib ".git")]
  ;;    (add-lib lib {:git/url git :sha (gitlibs/resolve git "master")})))
  ;; - e.g., using the GitHub path (not the usual Maven group/artifact):
  ;; (load-master 'clojure/tools.trace)

  :hot-load-deps
  {:extra-deps {org.clojure/tools.deps.alpha
                {:git/url "https://github.com/clojure/tools.deps.alpha"
                 :sha     "19d197ab221d37db750423eb970880cb87a91100"}}
   ;; DynamicClassLoader required for add-lib to work
   ;; if starting other processes via aliases such as a socket REPL or Cognitect's REBL
   :main-opts  ["-e" "(->>(Thread/currentThread)(.getContextClassLoader)(clojure.lang.DynamicClassLoader.)(.setContextClassLoader,(Thread/currentThread)))"]}

  ;; Deployment
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; uberdeps - uberjar builder
  ;; https://github.com/tonsky/uberdeps
  ;; "--target" "target/cdeps-0.1.0.jar" in `:main-opts` to specify output file

  :build-uberdeps
  {:extra-deps {uberdeps {:mvn/version "0.1.10"}}
   :main-opts  ["-m" "uberdeps.uberjar"]}}

 ;; End of alias definitions

 ;; Provider attributes
 ;; Maven Central and Clojars are the canonical repositories for library dependencies
 ;; JCenter is large and fast mirror

 :mvn/repos {"central" {:url "https://repo1.maven.org/maven2/"}
             "clojars" {:url "https://repo.clojars.org/"}
             ;; clojars.org mirror - publicly accessible
             "jcenter" {:url "https://jcenter.bintray.com"}}}
