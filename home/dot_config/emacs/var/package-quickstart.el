;;; Quickstart file to activate all packages at startup  -*- lexical-binding:t -*-
;; ¡¡ This file is autogenerated by `package-quickstart-refresh', DO NOT EDIT !!

(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/zoom-window-20240925.754/zoom-window-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'zoom-window-setup "zoom-window" "\
To work with elscreen or persp-mode.")
(autoload 'zoom-window-zoom "zoom-window" "\
Zoom the current window." t)
(register-definition-prefixes "zoom-window" '("zoom-window-"))


(provide 'zoom-window-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/yasnippet-20250112.1504/yasnippet-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'yas-minor-mode "yasnippet" "\
Toggle YASnippet mode.

When YASnippet mode is enabled, `yas-expand', normally bound to
the TAB key, expands snippets of code depending on the major
mode.

With no argument, this command toggles the mode.
positive prefix argument turns on the mode.
Negative prefix argument turns off the mode.

Key bindings:
\\{yas-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `yas minor
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `yas-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'yas-global-mode 'globalized-minor-mode t)
(defvar yas-global-mode nil "\
Non-nil if Yas-Global mode is enabled.
See the `yas-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `yas-global-mode'.")
(custom-autoload 'yas-global-mode "yasnippet" nil)
(autoload 'yas-global-mode "yasnippet" "\
Toggle Yas minor mode in all buffers.
With prefix ARG, enable Yas-Global mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Yas minor mode is enabled in all buffers where `yas-minor-mode-on'
would do it.

See `yas-minor-mode' for more information on Yas minor mode.

(fn &optional ARG)" t)
(autoload 'snippet-mode "yasnippet" "A mode for editing yasnippets" t nil)
(register-definition-prefixes "yasnippet" '("help-snippet-def" "snippet-mode-map" "yas"))


(provide 'yasnippet-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/yasnippet-snippets-20250225.950/yasnippet-snippets-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'yasnippet-snippets-initialize "yasnippet-snippets" "\
Load the `yasnippet-snippets' snippets directory.")
(eval-after-load 'yasnippet '(yasnippet-snippets-initialize))
(register-definition-prefixes "yasnippet-snippets" '("yasnippet-snippets-"))


(provide 'yasnippet-snippets-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/yasnippet-capf-20240716.1054/yasnippet-capf-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'yasnippet-capf "yasnippet-capf" "\
Complete with yasnippet at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(register-definition-prefixes "yasnippet-capf" '("yasnippet-capf-"))


(provide 'yasnippet-capf-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/yaml-mode-20241003.153/yaml-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(let ((loads (get 'yaml 'custom-loads))) (if (member '"yaml-mode" loads) nil (put 'yaml 'custom-loads (cons '"yaml-mode" loads)) (put 'languages 'custom-loads (cons 'yaml (get 'languages 'custom-loads)))))
(autoload 'yaml-mode "yaml-mode" "\
Simple mode to edit YAML.

\\{yaml-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(e?ya?\\|ra\\)ml\\'" . yaml-mode))
(add-to-list 'magic-mode-alist '("^%YAML\\s-+[0-9]+\\.[0-9]+\\(\\s-+#\\|\\s-*$\\)" . yaml-mode))
(register-definition-prefixes "yaml-mode" '("yaml-"))


(provide 'yaml-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/yaml-20250208.1534/yaml-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "yaml" '("yaml-"))


(provide 'yaml-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/xterm-color-20230321.3/xterm-color-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'xterm-color-filter-strip "xterm-color" "\
Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

In order to get maximum performance, this function strips text properties
if they are present in STRING.

(fn STRING)")
(autoload 'xterm-color-filter "xterm-color" "\
Translate ANSI color sequences in STRING into text properties.
Return new STRING with text properties applied.

This function checks if `xterm-color-preserve-properties' is non-nil
and only calls `xterm-color-filter-strip' on substrings that do not
have text properties applied (passing through the rest unmodified).
Preserving properties in this fashion is not very robust as there may
be situations where text properties are applied on ANSI data, which
will desync the state machine.

Preserving properties works ok with and is really meant for eshell.

This can be inserted into `comint-preoutput-filter-functions'.

(fn STRING)")
(autoload 'xterm-color-256 "xterm-color" "\


(fn COLOR)")
(autoload 'xterm-color-colorize-buffer "xterm-color" "\
Apply `xterm-color-filter' to current buffer, and replace its contents.
Colors are applied using \\='face, unless font-lock-mode is active, in
which case \\='font-lock-face is used. Operation with font-lock mode active
is not recommended.

If USE-OVERLAYS is non-nil, colors are applied to the buffer using overlays
instead of text properties. A C-u prefix arg causes overlays to be used.

(fn &optional USE-OVERLAYS)" t)
(autoload 'xterm-color-clear-cache "xterm-color" "\
Clear xterm color face attribute cache.
You may want to call this if you change `xterm-color-names' or
`xterm-color-names-bright' at runtime and you want to see the changes
take place in a pre-existing buffer that has had xterm-color initialized.

Since the cache is buffer-local and created on-demand when needed, this has no
effect when called from a buffer that does not have a cache." t)
(autoload 'xterm-color-test "xterm-color" "\
Create, display and render a new buffer containing ANSI control sequences." t)
(autoload 'xterm-color-test-raw "xterm-color" "\
Create and display a new buffer containing ANSI SGR control sequences.
ANSI sequences are not processed. One can use a different Emacs package,
such as ansi-color.el to do so. This is really meant to be used for easy
comparisons/benchmarks with libraries that offer similar functionality." t)
(register-definition-prefixes "xterm-color" '("+xterm-color--table-256+" "xterm-color-"))


(provide 'xterm-color-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/with-editor-20241201.1419/with-editor-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'with-editor-export-editor "with-editor" "\
Teach subsequent commands to use current Emacs instance as editor.

Set and export the environment variable ENVVAR, by default
\"EDITOR\".  The value is automatically generated to teach
commands to use the current Emacs instance as \"the editor\".

This works in `shell-mode', `term-mode', `eshell-mode' and
`vterm'.

(fn &optional (ENVVAR \"EDITOR\"))" t)
(autoload 'with-editor-export-git-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$GIT_EDITOR'." t)
(autoload 'with-editor-export-hg-editor "with-editor" "\
Like `with-editor-export-editor' but always set `$HG_EDITOR'." t)
(defvar shell-command-with-editor-mode nil "\
Non-nil if Shell-Command-With-Editor mode is enabled.
See the `shell-command-with-editor-mode' command
for a description of this minor mode.")
(custom-autoload 'shell-command-with-editor-mode "with-editor" nil)
(autoload 'shell-command-with-editor-mode "with-editor" "\
Teach `shell-command' to use current Emacs instance as editor.

Teach `shell-command', and all commands that ultimately call that
command, to use the current Emacs instance as editor by executing
\"EDITOR=CLIENT COMMAND&\" instead of just \"COMMAND&\".

CLIENT is automatically generated; EDITOR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming no other variable overrides the effect of \"$EDITOR\".
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Alternatively you can use the `with-editor-async-shell-command',
which also allows the use of another variable instead of
\"EDITOR\".

This is a global minor mode.  If called interactively, toggle the
`Shell-Command-With-Editor mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='shell-command-with-editor-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'with-editor-async-shell-command "with-editor" "\
Like `async-shell-command' but with `$EDITOR' set.

Execute string \"ENVVAR=CLIENT COMMAND\" in an inferior shell;
display output, if any.  With a prefix argument prompt for an
environment variable, otherwise the default \"EDITOR\" variable
is used.  With a negative prefix argument additionally insert
the COMMAND's output at point.

CLIENT is automatically generated; ENVVAR=CLIENT instructs
COMMAND to use to the current Emacs instance as \"the editor\",
assuming it respects ENVVAR as an \"EDITOR\"-like variable.
CLIENT may be the path to an appropriate emacsclient executable
with arguments, or a script which also works over Tramp.

Also see `async-shell-command' and `shell-command'.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(autoload 'with-editor-shell-command "with-editor" "\
Like `shell-command' or `with-editor-async-shell-command'.
If COMMAND ends with \"&\" behave like the latter,
else like the former.

(fn COMMAND &optional OUTPUT-BUFFER ERROR-BUFFER ENVVAR)" t)
(register-definition-prefixes "with-editor" '("server-" "shell-command" "start-file-process" "with-editor"))


(provide 'with-editor-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/window-tool-bar-0.3/window-tool-bar-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'window-tool-bar-string "window-tool-bar" "\
Return a (propertized) string for the tool bar.

This is for when you want more customizations than the command
`window-tool-bar-mode' provides.  Commonly added to the variable
`tab-line-format', `header-line-format', or `mode-line-format'")
(autoload 'window-tool-bar-mode "window-tool-bar" "\
Toggle display of the tool bar in the tab line of the current buffer.

This is a minor mode.  If called interactively, toggle the
`Window-Tool-Bar mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `window-tool-bar-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-window-tool-bar-mode 'globalized-minor-mode t)
(defvar global-window-tool-bar-mode nil "\
Non-nil if Global Window-Tool-Bar mode is enabled.
See the `global-window-tool-bar-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-window-tool-bar-mode'.")
(custom-autoload 'global-window-tool-bar-mode "window-tool-bar" nil)
(autoload 'global-window-tool-bar-mode "window-tool-bar" "\
Toggle Window-Tool-Bar mode in all buffers.
With prefix ARG, enable Global Window-Tool-Bar mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Window-Tool-Bar mode is enabled in all buffers where
`window-tool-bar--turn-on' would do it.

See `window-tool-bar-mode' for more information on Window-Tool-Bar
mode.

(fn &optional ARG)" t)
(register-definition-prefixes "window-tool-bar" '("window-tool-bar-"))


(provide 'window-tool-bar-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/which-key-20240620.2145/which-key-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar which-key-mode nil "\
Non-nil if Which-Key mode is enabled.
See the `which-key-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `which-key-mode'.")
(custom-autoload 'which-key-mode "which-key" nil)
(autoload 'which-key-mode "which-key" "\
Toggle `which-key-mode'.

This is a global minor mode.  If called interactively, toggle the
`Which-Key mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='which-key-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{which-key-mode-map}

(fn &optional ARG)" t)
(autoload 'which-key-setup-side-window-right "which-key" "\
Set up side-window on right." t)
(autoload 'which-key-setup-side-window-right-bottom "which-key" "\
Set up side-window on right if space allows.
Otherwise, use bottom." t)
(autoload 'which-key-setup-side-window-bottom "which-key" "\
Set up side-window that opens on bottom." t)
(autoload 'which-key-setup-minibuffer "which-key" "\
Set up minibuffer display.
Do not use this setup if you use the paging commands.  Instead use
`which-key-setup-side-window-bottom', which is nearly identical
but more functional." t)
(autoload 'which-key-add-keymap-based-replacements "which-key" "\
Replace the description of KEY using REPLACEMENT in KEYMAP.
KEY should take a format suitable for use in `kbd'.  REPLACEMENT
should be a cons cell of the form (STRING . COMMAND) for each
REPLACEMENT, where STRING is the replacement string and COMMAND
is a symbol corresponding to the intended command to be
replaced.  COMMAND can be nil if the binding corresponds to a key
prefix.  An example is

(which-key-add-keymap-based-replacements global-map
  \"C-x w\" \\='(\"Save as\" . write-file)).

For backwards compatibility, REPLACEMENT can also be a string,
but the above format is preferred, and the option to use a string
for REPLACEMENT will eventually be removed.

(fn KEYMAP KEY REPLACEMENT &rest MORE)")
(function-put 'which-key-add-keymap-based-replacements 'lisp-indent-function 'defun)
(autoload 'which-key-add-key-based-replacements "which-key" "\
Replace the description of KEY-SEQUENCE with REPLACEMENT.
KEY-SEQUENCE is a string suitable for use in `kbd'.
REPLACEMENT may either be a string, as in

(which-key-add-key-based-replacements \"C-x 1\" \"maximize\")

a cons of two strings as in

(which-key-add-key-based-replacements \"C-x 8\"
                                        \\='(\"unicode\" . \"Unicode keys\"))

or a function that takes a (KEY . BINDING) cons and returns a
replacement.

In the second case, the second string is used to provide a longer
name for the keys under a prefix.

MORE allows you to specifcy additional KEY REPLACEMENT pairs.  All
replacements are added to `which-key-replacement-alist'.

(fn KEY-SEQUENCE REPLACEMENT &rest MORE)")
(autoload 'which-key-add-major-mode-key-based-replacements "which-key" "\
Functions like `which-key-add-key-based-replacements'.
The difference is that MODE specifies the `major-mode' that must
be active for KEY-SEQUENCE and REPLACEMENT (MORE contains
addition KEY-SEQUENCE REPLACEMENT pairs) to apply.

(fn MODE KEY-SEQUENCE REPLACEMENT &rest MORE)")
(function-put 'which-key-add-major-mode-key-based-replacements 'lisp-indent-function 'defun)
(autoload 'which-key-reload-key-sequence "which-key" "\
Simulate entering the key sequence KEY-SEQ.
KEY-SEQ should be a list of events as produced by
`listify-key-sequence'.  If nil, KEY-SEQ defaults to
`which-key--current-key-list'.  Any prefix arguments that were
used are reapplied to the new key sequence.

(fn &optional KEY-SEQ)")
(autoload 'which-key-show-standard-help "which-key" "\
Call the command in `which-key--prefix-help-cmd-backup'.
Usually this is `describe-prefix-bindings'.

(fn &optional _)" t)
(autoload 'which-key-show-next-page-no-cycle "which-key" "\
Show next page of keys or `which-key-show-standard-help'." t)
(autoload 'which-key-show-previous-page-no-cycle "which-key" "\
Show previous page of keys if one exists." t)
(autoload 'which-key-show-next-page-cycle "which-key" "\
Show the next page of keys, cycling from end to beginning.

(fn &optional _)" t)
(autoload 'which-key-show-previous-page-cycle "which-key" "\
Show the previous page of keys, cycling from beginning to end.

(fn &optional _)" t)
(autoload 'which-key-show-top-level "which-key" "\
Show top-level bindings.

(fn &optional _)" t)
(autoload 'which-key-show-major-mode "which-key" "\
Show top-level bindings in the map of the current major mode.
This function will also detect evil bindings made using
`evil-define-key' in this map.  These bindings will depend on the
current evil state.

(fn &optional ALL)" t)
(autoload 'which-key-show-full-major-mode "which-key" "\
Show all bindings in the map of the current major mode.
This function will also detect evil bindings made using
`evil-define-key' in this map.  These bindings will depend on the
current evil state." t)
(autoload 'which-key-dump-bindings "which-key" "\
Dump bindings from PREFIX into buffer named BUFFER-NAME.
PREFIX should be a string suitable for `kbd'.

(fn PREFIX BUFFER-NAME)" t)
(autoload 'which-key-undo-key "which-key" "\
Undo last keypress and force which-key update.

(fn &optional _)" t)
(autoload 'which-key-C-h-dispatch "which-key" "\
Dispatch \\`C-h' commands by looking up key in `which-key-C-h-map'.
This command is always accessible (from any prefix) if
`which-key-use-C-h-commands' is non nil." t)
(autoload 'which-key-show-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

If NO-PAGING is non-nil, which-key will not intercept subsequent
keypresses for the paging functionality.

(fn KEYMAP &optional NO-PAGING)" t)
(autoload 'which-key-show-full-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively from all available keymaps.

(fn KEYMAP)" t)
(autoload 'which-key-show-minor-mode-keymap "which-key" "\
Show the top-level bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'.

(fn &optional ALL)" t)
(autoload 'which-key-show-full-minor-mode-keymap "which-key" "\
Show all bindings in KEYMAP using which-key.
KEYMAP is selected interactively by mode in
`minor-mode-map-alist'." t)
(register-definition-prefixes "which-key" '("evil-state" "which-key-"))


(provide 'which-key-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/wgrep-20230203.1214/wgrep-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'wgrep-setup "wgrep" "\
Setup wgrep preparation.")
(add-hook 'grep-setup-hook 'wgrep-setup)
(register-definition-prefixes "wgrep" '("wgrep-"))


(provide 'wgrep-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/websocket-20230809.305/websocket-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "websocket" '("websocket-"))


(provide 'websocket-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/vertico-20250203.1055/vertico-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar vertico-mode nil "\
Non-nil if Vertico mode is enabled.
See the `vertico-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-mode'.")
(custom-autoload 'vertico-mode "vertico" nil)
(autoload 'vertico-mode "vertico" "\
VERTical Interactive COmpletion.

This is a global minor mode.  If called interactively, toggle the
`Vertico mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico" '("vertico-"))



(defvar vertico-buffer-mode nil "\
Non-nil if Vertico-Buffer mode is enabled.
See the `vertico-buffer-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-buffer-mode'.")
(custom-autoload 'vertico-buffer-mode "vertico-buffer" nil)
(autoload 'vertico-buffer-mode "vertico-buffer" "\
Display Vertico like a regular buffer in a large window.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Buffer mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-buffer-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-buffer" '("vertico-buffer-"))



(autoload 'vertico-directory-enter "vertico-directory" "\
Enter directory or exit completion with current candidate.
Exit with current input if prefix ARG is given.

(fn &optional ARG)" t)
(autoload 'vertico-directory-up "vertico-directory" "\
Delete N names before point.

(fn &optional N)" t)
(autoload 'vertico-directory-delete-char "vertico-directory" "\
Delete N directories or chars before point.

(fn N)" t)
(autoload 'vertico-directory-delete-word "vertico-directory" "\
Delete N directories or words before point.

(fn N)" t)
(autoload 'vertico-directory-tidy "vertico-directory" "\
Tidy shadowed file name, see `rfn-eshadow-overlay'.")



(defvar vertico-flat-mode nil "\
Non-nil if Vertico-Flat mode is enabled.
See the `vertico-flat-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-flat-mode'.")
(custom-autoload 'vertico-flat-mode "vertico-flat" nil)
(autoload 'vertico-flat-mode "vertico-flat" "\
Flat, horizontal display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Flat mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-flat-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-flat" '("vertico-flat-"))



(defvar vertico-grid-mode nil "\
Non-nil if Vertico-Grid mode is enabled.
See the `vertico-grid-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-grid-mode'.")
(custom-autoload 'vertico-grid-mode "vertico-grid" nil)
(autoload 'vertico-grid-mode "vertico-grid" "\
Grid display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Grid mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-grid-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-grid" '("vertico-grid-"))



(defvar vertico-indexed-mode nil "\
Non-nil if Vertico-Indexed mode is enabled.
See the `vertico-indexed-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-indexed-mode "vertico-indexed" nil)
(autoload 'vertico-indexed-mode "vertico-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Indexed mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-indexed" '("vertico-indexed-"))



(defvar vertico-mouse-mode nil "\
Non-nil if Vertico-Mouse mode is enabled.
See the `vertico-mouse-mode' command
for a description of this minor mode.")
(custom-autoload 'vertico-mouse-mode "vertico-mouse" nil)
(autoload 'vertico-mouse-mode "vertico-mouse" "\
Mouse support for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Mouse mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-mouse-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-mouse" '("vertico-mouse-"))



(defvar vertico-multiform-mode nil "\
Non-nil if Vertico-Multiform mode is enabled.
See the `vertico-multiform-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-multiform-mode'.")
(custom-autoload 'vertico-multiform-mode "vertico-multiform" nil)
(autoload 'vertico-multiform-mode "vertico-multiform" "\
Configure Vertico in various forms per command.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Multiform mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-multiform-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-multiform" '("vertico-multiform-"))



(autoload 'vertico-quick-jump "vertico-quick" "\
Jump to candidate using quick keys." t)
(autoload 'vertico-quick-exit "vertico-quick" "\
Exit with candidate using quick keys." t)
(autoload 'vertico-quick-insert "vertico-quick" "\
Insert candidate using quick keys." t)
(register-definition-prefixes "vertico-quick" '("vertico-quick"))



(autoload 'vertico-repeat-save "vertico-repeat" "\
Save Vertico session for `vertico-repeat'.
This function must be registered as `minibuffer-setup-hook'.")
(autoload 'vertico-repeat-next "vertico-repeat" "\
Repeat Nth next Vertico completion session.
This command must be called from an existing Vertico session
after `vertico-repeat-previous'.

(fn N)" t)
(autoload 'vertico-repeat-previous "vertico-repeat" "\
Repeat Nth previous Vertico completion session.
If called from an existing Vertico session, restore the input and
selected candidate for the current command.

(fn N)" t)
(autoload 'vertico-repeat-select "vertico-repeat" "\
Select a Vertico session from the session history and repeat it.
If called from an existing Vertico session, you can select among
previous sessions for the current command." t)
(autoload 'vertico-repeat "vertico-repeat" "\
Repeat last Vertico session.
If prefix ARG is non-nil, offer completion menu to select from session history.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-repeat" '("vertico-repeat-"))



(defvar vertico-reverse-mode nil "\
Non-nil if Vertico-Reverse mode is enabled.
See the `vertico-reverse-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-reverse-mode'.")
(custom-autoload 'vertico-reverse-mode "vertico-reverse" nil)
(autoload 'vertico-reverse-mode "vertico-reverse" "\
Reverse the Vertico display.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Reverse mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-reverse-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-reverse" '("vertico-reverse-map"))



(autoload 'vertico-suspend "vertico-suspend" "\
Suspend the current completion session.
If the command is invoked from within the Vertico minibuffer, the
current session is suspended.  If the command is invoked from
outside the minibuffer, the active minibuffer is either selected
or the latest completion session is restored." t)
(register-definition-prefixes "vertico-suspend" '("vertico-suspend--"))



(defvar vertico-unobtrusive-mode nil "\
Non-nil if Vertico-Unobtrusive mode is enabled.
See the `vertico-unobtrusive-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `vertico-unobtrusive-mode'.")
(custom-autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" nil)
(autoload 'vertico-unobtrusive-mode "vertico-unobtrusive" "\
Unobtrusive display for Vertico.

This is a global minor mode.  If called interactively, toggle the
`Vertico-Unobtrusive mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='vertico-unobtrusive-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "vertico-unobtrusive" '("vertico-unobtrusive--restore"))


(provide 'vertico-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/verilog-mode-2025.1.1.100165202/verilog-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'verilog-mode "verilog-mode" "\
Major mode for editing Verilog code.
\\<verilog-mode-map>
See \\[describe-function] verilog-auto (\\[verilog-auto]) for details on how
AUTOs can improve coding efficiency.

Use \\[verilog-faq] for a pointer to frequently asked questions.

NEWLINE, TAB indents for Verilog code.
Delete converts tabs to spaces as it moves back.

Supports highlighting.

Turning on Verilog mode calls the value of the variable `verilog-mode-hook'
with no args, if that value is non-nil.

Variables controlling indentation/edit style:

 variable `verilog-indent-level'      (default 3)
   Indentation of Verilog statements with respect to containing block.
 `verilog-indent-level-module'        (default 3)
   Absolute indentation of Module level Verilog statements.
   Set to 0 to get initial and always statements lined up
   on the left side of your screen.
 `verilog-indent-level-declaration'   (default 3)
   Indentation of declarations with respect to containing block.
   Set to 0 to get them list right under containing block.
 `verilog-indent-level-behavioral'    (default 3)
   Indentation of first begin in a task or function block
   Set to 0 to get such code to lined up underneath the task or
   function keyword.
 `verilog-indent-level-directive'     (default 1)
   Indentation of \\=`ifdef/\\=`endif blocks.
 `verilog-indent-ignore-multiline-defines' (default t)
   Non-nil means ignore indentation on lines that are part of a multiline
   define.
 `verilog-indent-ignore-regexp'     (default nil
   Regexp that matches lines that should be ignored for indentation.
 `verilog-cexp-indent'              (default 1)
   Indentation of Verilog statements broken across lines i.e.:
      if (a)
        begin
 `verilog-case-indent'              (default 2)
   Indentation for case statements.
 `verilog-auto-newline'             (default nil)
   Non-nil means automatically newline after semicolons and the punctuation
   mark after an end.
 `verilog-auto-indent-on-newline'   (default t)
   Non-nil means automatically indent line after newline.
 `verilog-tab-always-indent'        (default t)
   Non-nil means TAB in Verilog mode should always reindent the current line,
   regardless of where in the line point is when the TAB command is used.
 `verilog-indent-begin-after-if'    (default t)
   Non-nil means to indent begin statements following a preceding
   if, else, while, for and repeat statements, if any.  Otherwise,
   the begin is lined up with the preceding token.  If t, you get:
      if (a)
         begin // amount of indent based on `verilog-cexp-indent'
   otherwise you get:
      if (a)
      begin
 `verilog-indent-class-inside-pkg'  (default t)
   Non-nil means indent classes inside packages.
   Otherwise, classes have zero indentation.
 `verilog-auto-endcomments'         (default t)
   Non-nil means a comment /* ... */ is set after the ends which ends
   cases, tasks, functions and modules.
   The type and name of the object will be set between the braces.
 `verilog-minimum-comment-distance' (default 10)
   Minimum distance (in lines) between begin and end required before a comment
   will be inserted.  Setting this variable to zero results in every
   end acquiring a comment; the default avoids too many redundant
   comments in tight quarters.
 `verilog-align-decl-expr-comments' (default t)
   Non-nil means align declaration and expressions comments.
 `verilog-align-comment-distance'   (default 1)
   Distance (in spaces) between longest declaration and comments.
   Only works if `verilog-align-decl-expr-comments' is non-nil.
 `verilog-align-assign-expr'        (default nil)
   Non-nil means align expressions of continuous assignments.
 `verilog-align-typedef-regexp'     (default nil)
   Regexp that matches user typedefs for declaration alignment.
 `verilog-align-typedef-words'      (default nil)
   List of words that match user typedefs for declaration alignment.
 `verilog-auto-lineup'              (default `declarations')
   List of contexts where auto lineup of code should be done.

Variables controlling other actions:

 `verilog-linter'                   (default `none')
   Unix program to call to run the lint checker.  This is the default
   command for \\[compile-command] and \\[verilog-auto-save-compile].

See \\[customize] for the complete list of variables.

AUTO expansion functions are, in part:

    \\[verilog-auto]  Expand AUTO statements.
    \\[verilog-delete-auto]  Remove the AUTOs.
    \\[verilog-inject-auto]  Insert AUTOs for the first time.

Some other functions are:

    \\[completion-at-point]    Complete word with appropriate possibilities.
    \\[verilog-mark-defun]  Mark function.
    \\[verilog-beg-of-defun]  Move to beginning of current function.
    \\[verilog-end-of-defun]  Move to end of current function.
    \\[verilog-label-be]  Label matching begin ... end, fork ... join, etc
                          statements.

    \\[verilog-comment-region]  Put marked area in a comment.
    \\[verilog-uncomment-region]  Uncomment an area commented with
                                  \\[verilog-comment-region].
    \\[verilog-insert-block]  Insert begin ... end.
    \\[verilog-star-comment]    Insert /* ... */.

    \\[verilog-sk-always]  Insert an always @(AS) begin .. end block.
    \\[verilog-sk-begin]  Insert a begin .. end block.
    \\[verilog-sk-case]  Insert a case block, prompting for details.
    \\[verilog-sk-for]  Insert a for (...) begin .. end block, prompting for
                        details.
    \\[verilog-sk-generate]  Insert a generate .. endgenerate block.
    \\[verilog-sk-header]  Insert a header block at the top of file.
    \\[verilog-sk-initial]  Insert an initial begin .. end block.
    \\[verilog-sk-fork]  Insert a fork begin .. end .. join block.
    \\[verilog-sk-module]  Insert a module .. (/*AUTOARG*/);.. endmodule block.
    \\[verilog-sk-ovm-class]  Insert an OVM Class block.
    \\[verilog-sk-uvm-object]  Insert an UVM Object block.
    \\[verilog-sk-uvm-component]  Insert an UVM Component block.
    \\[verilog-sk-primitive]  Insert a primitive .. (.. );.. endprimitive block.
    \\[verilog-sk-repeat]  Insert a repeat (..) begin .. end block.
    \\[verilog-sk-specify]  Insert a specify .. endspecify block.
    \\[verilog-sk-task]  Insert a task .. begin .. end endtask block.
    \\[verilog-sk-while]  Insert a while (...) begin .. end block,
                       prompting for details.
    \\[verilog-sk-casex]  Insert a casex (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-casez]  Insert a casez (...) item: begin.. end endcase block,
                       prompting for details.
    \\[verilog-sk-if]  Insert an if (..) begin .. end block.
    \\[verilog-sk-else-if]  Insert an else if (..) begin .. end block.
    \\[verilog-sk-comment]  Insert a comment block.
    \\[verilog-sk-assign]  Insert an assign .. = ..; statement.
    \\[verilog-sk-function]  Insert a function .. begin .. end endfunction
                             block.
    \\[verilog-sk-input]  Insert an input declaration, prompting for details.
    \\[verilog-sk-output]  Insert an output declaration, prompting for details.
    \\[verilog-sk-state-machine]  Insert a state machine definition, prompting
                                  for details.
    \\[verilog-sk-inout]  Insert an inout declaration, prompting for details.
    \\[verilog-sk-wire]  Insert a wire declaration, prompting for details.
    \\[verilog-sk-reg]  Insert a register declaration, prompting for details.
    \\[verilog-sk-define-signal]  Define signal under point as a register at
                                  the top of the module.

All key bindings can be seen in a Verilog-buffer with \\[describe-bindings].
Key bindings specific to `verilog-mode-map' are:

\\{verilog-mode-map}

(fn)" t)
(register-definition-prefixes "verilog-mode" '("electric-verilog-" "verilog-" "vl-"))


(provide 'verilog-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/queue-0.2/queue-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defalias 'make-queue 'queue-create "\
Create an empty queue data structure.")
(register-definition-prefixes "queue" '("queue"))


(provide 'queue-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/undo-tree-0.8.2/undo-tree-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'undo-tree-mode "undo-tree" "\
Toggle undo-tree mode.

With no argument, this command toggles the mode.
A positive prefix argument turns the mode on.
A negative prefix argument turns it off.

Undo-tree-mode replaces Emacs' standard undo feature with a more
powerful yet easier to use version, that treats the undo history
as what it is: a tree.

The following keys are available in `undo-tree-mode':

  \\{undo-tree-map}

Within the undo-tree visualizer, the following keys are available:

  \\{undo-tree-visualizer-mode-map}

This is a minor mode.  If called interactively, toggle the `Undo-Tree
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `undo-tree-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-undo-tree-mode 'globalized-minor-mode t)
(defvar global-undo-tree-mode nil "\
Non-nil if Global Undo-Tree mode is enabled.
See the `global-undo-tree-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-undo-tree-mode'.")
(custom-autoload 'global-undo-tree-mode "undo-tree" nil)
(autoload 'global-undo-tree-mode "undo-tree" "\
Toggle Undo-Tree mode in all buffers.
With prefix ARG, enable Global Undo-Tree mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Undo-Tree mode is enabled in all buffers where
`turn-on-undo-tree-mode' would do it.

See `undo-tree-mode' for more information on Undo-Tree mode.

(fn &optional ARG)" t)
(register-definition-prefixes "undo-tree" '("*undo-tree-id-counter*" "buffer-undo-tree" "turn-on-undo-tree-mode" "undo-"))


(provide 'undo-tree-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ultra-scroll/ultra-scroll-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar ultra-scroll-mode nil "\
Non-nil if Ultra-Scroll mode is enabled.
See the `ultra-scroll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ultra-scroll-mode'.")
(custom-autoload 'ultra-scroll-mode "ultra-scroll" nil)
(autoload 'ultra-scroll-mode "ultra-scroll" "\
Toggle pixel precision scrolling.

When enabled, this minor mode scrolls the display precisely using
full trackpad or modern mouse capabilities.  It correctly scrolls
past images taller than the window height.  The mode enables
`pixel-scroll-precision-mode-map', overriding that mode's scroll
command, but other mode features, including interpolated page
scrolling, still function (if enabled).

Note that `ultra-scroll' does NOT do any interpolation of scroll
wheel data, and is intended for use with mouse/trackpad hardware
on systems providing pixel-level scroll data; see
`ultra-scroll-check' to investigate what kind of scrolling data
your system and hardware provide.

This is a global minor mode.  If called interactively, toggle the
`Ultra-Scroll mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='ultra-scroll-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "ultra-scroll" '("ultra-scroll"))



(provide 'ultra-scroll-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/tsc-20220212.1632/tsc-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "tsc" '("tsc-"))



(register-definition-prefixes "tsc-dyn-get" '("tsc-"))


(provide 'tsc-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/dash-20240510.1327/dash-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'dash-fontify-mode "dash" "\
Toggle fontification of Dash special variables.

Dash-Fontify mode is a buffer-local minor mode intended for Emacs
Lisp buffers.  Enabling it causes the special variables bound in
anaphoric Dash macros to be fontified.  These anaphoras include
`it', `it-index', `acc', and `other'.  In older Emacs versions
which do not dynamically detect macros, Dash-Fontify mode
additionally fontifies Dash macro calls.

See also `dash-fontify-mode-lighter' and
`global-dash-fontify-mode'.

This is a minor mode.  If called interactively, toggle the `Dash-Fontify
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `dash-fontify-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-dash-fontify-mode 'globalized-minor-mode t)
(defvar global-dash-fontify-mode nil "\
Non-nil if Global Dash-Fontify mode is enabled.
See the `global-dash-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-dash-fontify-mode'.")
(custom-autoload 'global-dash-fontify-mode "dash" nil)
(autoload 'global-dash-fontify-mode "dash" "\
Toggle Dash-Fontify mode in all buffers.
With prefix ARG, enable Global Dash-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Dash-Fontify mode is enabled in all buffers where
`dash--turn-on-fontify-mode' would do it.

See `dash-fontify-mode' for more information on Dash-Fontify mode.

(fn &optional ARG)" t)
(autoload 'dash-register-info-lookup "dash" "\
Register the Dash Info manual with `info-lookup-symbol'.
This allows Dash symbols to be looked up with \\[info-lookup-symbol]." t)
(register-definition-prefixes "dash" '("!cdr" "!cons" "--" "->" "-a" "-butlast" "-c" "-d" "-e" "-f" "-gr" "-i" "-juxt" "-keep" "-l" "-m" "-no" "-o" "-p" "-r" "-s" "-t" "-u" "-value-to-list" "-when-let" "-zip" "dash-"))


(provide 'dash-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/s-20220902.1511/s-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "s" '("s-"))


(provide 's-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ts-20220822.2313/ts-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ts" '("ts-" "ts<" "ts=" "ts>"))


(provide 'ts-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/avy-20241101.1357/avy-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'avy-process "avy" "\
Select one of CANDIDATES using `avy-read'.
Use OVERLAY-FN to visualize the decision overlay.
CLEANUP-FN should take no arguments and remove the effects of
multiple OVERLAY-FN invocations.

(fn CANDIDATES &optional OVERLAY-FN CLEANUP-FN)")
(autoload 'avy-goto-char "avy" "\
Jump to the currently visible CHAR.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-char-in-line "avy" "\
Jump to the currently visible CHAR in the current line.

(fn CHAR)" t)
(autoload 'avy-goto-char-2 "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn CHAR1 CHAR2 &optional ARG BEG END)" t)
(autoload 'avy-goto-char-2-above "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t)
(autoload 'avy-goto-char-2-below "avy" "\
Jump to the currently visible CHAR1 followed by CHAR2.
This is a scoped version of `avy-goto-char-2', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR1 CHAR2 &optional ARG)" t)
(autoload 'avy-isearch "avy" "\
Jump to one of the current isearch candidates." t)
(autoload 'avy-goto-word-0 "avy" "\
Jump to a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t)
(autoload 'avy-goto-whitespace-end "avy" "\
Jump to the end of a whitespace sequence.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.

(fn ARG &optional BEG END)" t)
(autoload 'avy-goto-word-1 "avy" "\
Jump to the currently visible CHAR at a word start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.
BEG and END narrow the scope where candidates are searched.
When SYMBOL is non-nil, jump to symbol start instead of word start.

(fn CHAR &optional ARG BEG END SYMBOL)" t)
(autoload 'avy-goto-word-1-above "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-word-1-below "avy" "\
Jump to the currently visible CHAR at a word start.
This is a scoped version of `avy-goto-word-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1 "avy" "\
Jump to the currently visible CHAR at a symbol start.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1-above "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer up to point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-symbol-1-below "avy" "\
Jump to the currently visible CHAR at a symbol start.
This is a scoped version of `avy-goto-symbol-1', where the scope is
the visible part of the current buffer following point.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-subword-0 "avy" "\
Jump to a word or subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).

When PREDICATE is non-nil it's a function of zero parameters that
should return true.

BEG and END narrow the scope where candidates are searched.

(fn &optional ARG PREDICATE BEG END)" t)
(autoload 'avy-goto-subword-1 "avy" "\
Jump to the currently visible CHAR at a subword start.
The window scope is determined by `avy-all-windows' (ARG negates it).
The case of CHAR is ignored.

(fn CHAR &optional ARG)" t)
(autoload 'avy-goto-word-or-subword-1 "avy" "\
Forward to `avy-goto-subword-1' or `avy-goto-word-1'.
Which one depends on variable `subword-mode'." t)
(autoload 'avy-goto-line "avy" "\
Jump to a line start in current buffer.

When ARG is 1, jump to lines currently visible, with the option
to cancel to `goto-line' by entering a number.

When ARG is 4, negate the window scope determined by
`avy-all-windows'.

Otherwise, forward to `goto-line' with ARG.

(fn &optional ARG)" t)
(autoload 'avy-goto-line-above "avy" "\
Goto visible line above the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t)
(autoload 'avy-goto-line-below "avy" "\
Goto visible line below the cursor.
OFFSET changes the distance between the closest key to the cursor and
the cursor
When BOTTOM-UP is non-nil, display avy candidates from top to bottom

(fn &optional OFFSET BOTTOM-UP)" t)
(autoload 'avy-goto-end-of-line "avy" "\
Call `avy-goto-line' and move to the end of the line.

(fn &optional ARG)" t)
(autoload 'avy-copy-line "avy" "\
Copy a selected line above the current line.
ARG lines can be used.

(fn ARG)" t)
(autoload 'avy-move-line "avy" "\
Move a selected line above the current line.
ARG lines can be used.

(fn ARG)" t)
(autoload 'avy-copy-region "avy" "\
Select two lines and copy the text between them to point.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t)
(autoload 'avy-move-region "avy" "\
Select two lines and move the text between them above the current line." t)
(autoload 'avy-kill-region "avy" "\
Select two lines and kill the region between them.

The window scope is determined by `avy-all-windows' or
`avy-all-windows-alt' when ARG is non-nil.

(fn ARG)" t)
(autoload 'avy-kill-ring-save-region "avy" "\
Select two lines and save the region between them to the kill ring.
The window scope is determined by `avy-all-windows'.
When ARG is non-nil, do the opposite of `avy-all-windows'.

(fn ARG)" t)
(autoload 'avy-kill-whole-line "avy" "\
Select line and kill the whole selected line.

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

\\[universal-argument] 3 \\[avy-kil-whole-line] kill three lines
starting from the selected line.  \\[universal-argument] -3

\\[avy-kill-whole-line] kill three lines backward including the
selected line.

(fn ARG)" t)
(autoload 'avy-kill-ring-save-whole-line "avy" "\
Select line and save the whole selected line as if killed, but don’t kill it.

This command is similar to `avy-kill-whole-line', except that it
saves the line(s) as if killed, but does not kill it(them).

With a numerical prefix ARG, kill ARG line(s) starting from the
selected line.  If ARG is negative, kill backward.

If ARG is zero, kill the selected line but exclude the trailing
newline.

(fn ARG)" t)
(autoload 'avy-setup-default "avy" "\
Setup the default shortcuts.")
(autoload 'avy-goto-char-timer "avy" "\
Read one or many consecutive chars and jump to the first one.
The window scope is determined by `avy-all-windows' (ARG negates it).

(fn &optional ARG)" t)
(autoload 'avy-transpose-lines-in-region "avy" "\
Transpose lines in the active region." t)
(register-definition-prefixes "avy" '("avy-"))


(provide 'avy-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/transient-20250222.1912/transient-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'transient-insert-suffix "transient" "\
Insert a SUFFIX into PREFIX before LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.  When the conflict appears to be a false-positive,
  non-nil KEEP-OTHER may be ignored, which can be prevented
  by using `always'.
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")
(function-put 'transient-insert-suffix 'lisp-indent-function 'defun)
(autoload 'transient-append-suffix "transient" "\
Insert a SUFFIX into PREFIX after LOC.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
Remove a conflicting binding unless optional KEEP-OTHER is
  non-nil.  When the conflict appears to be a false-positive,
  non-nil KEEP-OTHER may be ignored, which can be prevented
  by using `always'.
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX &optional KEEP-OTHER)")
(function-put 'transient-append-suffix 'lisp-indent-function 'defun)
(autoload 'transient-replace-suffix "transient" "\
Replace the suffix at LOC in PREFIX with SUFFIX.
PREFIX is a prefix command, a symbol.
SUFFIX is a suffix command or a group specification (of
  the same forms as expected by `transient-define-prefix').
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC SUFFIX)")
(function-put 'transient-replace-suffix 'lisp-indent-function 'defun)
(autoload 'transient-remove-suffix "transient" "\
Remove the suffix or group at LOC in PREFIX.
PREFIX is a prefix command, a symbol.
LOC is a command, a key vector, a key description (a string
  as returned by `key-description'), or a coordination list
  (whose last element may also be a command or key).
See info node `(transient)Modifying Existing Transients'.

(fn PREFIX LOC)")
(function-put 'transient-remove-suffix 'lisp-indent-function 'defun)
(register-definition-prefixes "transient" '("find-function-advised-original" "transient"))


(provide 'transient-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treesit-jump/treesit-jump-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'treesit-jump-transient "treesit-jump" "\
Transient for using treesit-jump.

(fn)" t)
(autoload 'treesit-jump-jump "treesit-jump" "\
Select and jump to a treesit query for the current major-mode." t)
(autoload 'treesit-jump-select "treesit-jump" "\
Select and select the region of a treesit query for the current major-mode." t)
(autoload 'treesit-jump-delete "treesit-jump" "\
Select and delete the region of a treesit query for the current major-mode." t)
(autoload 'treesit-jump-parent-jump "treesit-jump" "\
Select and jump to a treesit parent of the current node." t)
(register-definition-prefixes "treesit-jump" '("treesit-jump-"))


(provide 'treesit-jump-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treesit-auto-20240511.1425/treesit-auto-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "treesit-auto" '("global-treesit-auto-mode" "treesit-auto-"))


(provide 'treesit-auto-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treepy-20240930.728/treepy-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "treepy" '("treepy-"))


(provide 'treepy-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ace-window-20220911.358/ace-window-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'ace-select-window "ace-window" "\
Ace select window." t)
(autoload 'ace-delete-window "ace-window" "\
Ace delete window." t)
(autoload 'ace-swap-window "ace-window" "\
Ace swap window." t)
(autoload 'ace-delete-other-windows "ace-window" "\
Ace delete other windows." t)
(autoload 'ace-display-buffer "ace-window" "\
Make `display-buffer' and `pop-to-buffer' select using `ace-window'.
See sample config for `display-buffer-base-action' and `display-buffer-alist':
https://github.com/abo-abo/ace-window/wiki/display-buffer.

(fn BUFFER ALIST)")
(autoload 'ace-window "ace-window" "\
Select a window.
Perform an action based on ARG described below.

By default, behaves like extended `other-window'.
See `aw-scope' which extends it to work with frames.

Prefixed with one \\[universal-argument], does a swap between the
selected window and the current window, so that the selected
buffer moves to current window (and current buffer moves to
selected window).

Prefixed with two \\[universal-argument]'s, deletes the selected
window.

(fn ARG)" t)
(defvar ace-window-display-mode nil "\
Non-nil if Ace-Window-Display mode is enabled.
See the `ace-window-display-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-display-mode'.")
(custom-autoload 'ace-window-display-mode "ace-window" nil)
(autoload 'ace-window-display-mode "ace-window" "\
Minor mode for showing the ace window key in the mode line.

This is a global minor mode.  If called interactively, toggle the
`Ace-Window-Display mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='ace-window-display-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "ace-window" '("ace-window-mode" "aw-"))



(defvar ace-window-posframe-mode nil "\
Non-nil if Ace-Window-Posframe mode is enabled.
See the `ace-window-posframe-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `ace-window-posframe-mode'.")
(custom-autoload 'ace-window-posframe-mode "ace-window-posframe" nil)
(autoload 'ace-window-posframe-mode "ace-window-posframe" "\
Minor mode for showing the ace window key with child frames.

This is a global minor mode.  If called interactively, toggle the
`Ace-Window-Posframe mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='ace-window-posframe-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "ace-window-posframe" '("ace-window-posframe-" "aw-"))


(provide 'ace-window-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/pfuture-20220913.1401/pfuture-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pfuture-new "pfuture" "\
Create a new future process for command CMD.
Any arguments after the command are interpreted as arguments to the command.
This will return a process object with additional \\='stderr and \\='stdout
properties, which can be read via (process-get process \\='stdout) and
(process-get process \\='stderr) or alternatively with
(pfuture-result process) or (pfuture-stderr process).

Note that CMD must be a *sequence* of strings, meaning
this is wrong: (pfuture-new \"git status\")
this is right: (pfuture-new \"git\" \"status\")

(fn &rest CMD)")
(register-definition-prefixes "pfuture" '("pfuture-"))


(provide 'pfuture-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/lv-20200507.1518/lv-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lv" '("lv-"))


(provide 'lv-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/hydra-20220910.1206/hydra-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'defhydra "hydra" "\
Create a Hydra - a family of functions with prefix NAME.

NAME should be a symbol, it will be the prefix of all functions
defined here.

BODY has the format:

    (BODY-MAP BODY-KEY &rest BODY-PLIST)

DOCSTRING will be displayed in the echo area to identify the
Hydra.  When DOCSTRING starts with a newline, special Ruby-style
substitution will be performed by `hydra--format'.

Functions are created on basis of HEADS, each of which has the
format:

    (KEY CMD &optional HINT &rest PLIST)

BODY-MAP is a keymap; `global-map' is used quite often.  Each
function generated from HEADS will be bound in BODY-MAP to
BODY-KEY + KEY (both are strings passed to `kbd'), and will set
the transient map so that all following heads can be called
though KEY only.  BODY-KEY can be an empty string.

CMD is a callable expression: either an interactive function
name, or an interactive lambda, or a single sexp (it will be
wrapped in an interactive lambda).

HINT is a short string that identifies its head.  It will be
printed beside KEY in the echo erea if `hydra-is-helpful' is not
nil.  If you don't even want the KEY to be printed, set HINT
explicitly to nil.

The heads inherit their PLIST from BODY-PLIST and are allowed to
override some keys.  The keys recognized are :exit, :bind, and :column.
:exit can be:

- nil (default): this head will continue the Hydra state.
- t: this head will stop the Hydra state.

:bind can be:
- nil: this head will not be bound in BODY-MAP.
- a lambda taking KEY and CMD used to bind a head.

:column is a string that sets the column for all subsequent heads.

It is possible to omit both BODY-MAP and BODY-KEY if you don't
want to bind anything.  In that case, typically you will bind the
generated NAME/body command.  This command is also the return
result of `defhydra'.

(fn NAME BODY &optional DOCSTRING &rest HEADS)" nil t)
(function-put 'defhydra 'lisp-indent-function 'defun)
(function-put 'defhydra 'doc-string-elt 3)
(register-definition-prefixes "hydra" '("defhydra" "hydra-"))



(register-definition-prefixes "hydra-examples" '("hydra-" "org-agenda-cts" "whitespace-mode"))



(register-definition-prefixes "hydra-ox" '("hydra-ox"))


(provide 'hydra-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ht-20230703.558/ht-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ht" 'nil)


(provide 'ht-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/posframe-20250211.110/posframe-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'posframe-workable-p "posframe" "\
Test posframe workable status.")
(autoload 'posframe-show "posframe" "\
Pop up a posframe to show STRING at POSITION.

 (1) POSITION

POSITION can be:
1. An integer, meaning point position.
2. A cons of two integers, meaning absolute X and Y coordinates.
3. Other type, in which case the corresponding POSHANDLER should be
   provided.

 (2) POSHANDLER

POSHANDLER is a function of one argument returning an actual
position.  Its argument is a plist of the following form:

  (:position xxx
   :poshandler xxx
   :font-height xxx
   :font-width xxx
   :posframe xxx
   :posframe-width xxx
   :posframe-height xxx
   :posframe-buffer xxx
   :parent-frame xxx
   :parent-window-start xxx
   :parent-window-end xxx
   :parent-window-left xxx
   :parent-window-top xxx
   :parent-frame-width xxx
   :parent-frame-height xxx
   :parent-window xxx
   :parent-window-width  xxx
   :parent-window-height xxx
   :mouse-x xxx
   ;mouse-y xxx
   :minibuffer-height xxx
   :mode-line-height  xxx
   :header-line-height xxx
   :tab-line-height xxx
   :x-pixel-offset xxx
   :y-pixel-offset xxx)

By default, poshandler is auto-selected based on the type of POSITION,
but the selection can be overridden using the POSHANDLER argument.

The builtin poshandler functions are listed below:

1.  `posframe-poshandler-frame-center'
2.  `posframe-poshandler-frame-top-center'
3.  `posframe-poshandler-frame-top-left-corner'
4.  `posframe-poshandler-frame-top-right-corner'
5.  `posframe-poshandler-frame-top-left-or-right-other-corner'
6.  `posframe-poshandler-frame-bottom-center'
7.  `posframe-poshandler-frame-bottom-left-corner'
8.  `posframe-poshandler-frame-bottom-right-corner'
9.  `posframe-poshandler-window-center'
10.  `posframe-poshandler-window-top-center'
11. `posframe-poshandler-window-top-left-corner'
12. `posframe-poshandler-window-top-right-corner'
13. `posframe-poshandler-window-bottom-center'
14. `posframe-poshandler-window-bottom-left-corner'
15. `posframe-poshandler-window-bottom-right-corner'
16. `posframe-poshandler-point-top-left-corner'
17. `posframe-poshandler-point-bottom-left-corner'
18. `posframe-poshandler-point-bottom-left-corner-upward'
19. `posframe-poshandler-point-window-center'
20. `posframe-poshandler-point-frame-center'

 (3) POSHANDLER-EXTRA-INFO

POSHANDLER-EXTRA-INFO is a plist, which will prepend to the
argument of poshandler function: `info', it will *OVERRIDE* the
exist key in `info'.

 (4) BUFFER-OR-NAME

This posframe's buffer is BUFFER-OR-NAME, which can be a buffer
or a name of a (possibly nonexistent) buffer.

buffer name can prefix with space, for example \" *mybuffer*\", so
the buffer name will hide for ibuffer and `list-buffers'.

 (5) NO-PROPERTIES

If NO-PROPERTIES is non-nil, The STRING's properties will
be removed before being shown in posframe.

 (6) HEIGHT, MAX-HEIGHT, MIN-HEIGHT, WIDTH, MAX-WIDTH and MIN-WIDTH

These arguments are specified in the canonical character width
and height of posframe, more details can be found in docstring of
function `fit-frame-to-buffer',

 (7) LEFT-FRINGE and RIGHT-FRINGE

If LEFT-FRINGE or RIGHT-FRINGE is a number, left fringe or
right fringe with be shown with the specified width.

 (8) BORDER-WIDTH, BORDER-COLOR, INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR

By default, posframe shows no borders, but users can specify
borders by setting BORDER-WIDTH to a positive number.  Border
color can be specified by BORDER-COLOR.

INTERNAL-BORDER-WIDTH and INTERNAL-BORDER-COLOR are same as
BORDER-WIDTH and BORDER-COLOR, but do not suggest to use for the
reason:

   Add distinct controls for child frames' borders (Bug#45620)
   http://git.savannah.gnu.org/cgit/emacs.git/commit/?id=ff7b1a133bfa7f2614650f8551824ffaef13fadc

 (9) FONT, FOREGROUND-COLOR and BACKGROUND-COLOR

Posframe's font as well as foreground and background colors are
derived from the current frame by default, but can be overridden
using the FONT, FOREGROUND-COLOR and BACKGROUND-COLOR arguments,
respectively.

 (10) CURSOR, TTY-NON-SELECTED-CURSOR and WINDOW-POINT

By default, cursor is not showed in posframe, user can let cursor
showed with this argument help by set its value to a `cursor-type'.

TTY-NON-SELECTED-CURSOR will let redisplay put the terminal
cursor in a non-selected frame, which is useful when use
vertico-posframe like package in tty.

When cursor need to be showed in posframe, user may need to set
WINDOW-POINT to the point of BUFFER, which can let cursor showed
at this point.

 (11) RESPECT-HEADER-LINE and RESPECT-MODE-LINE

By default, posframe will display no header-line, mode-line and
tab-line.  In case a header-line, mode-line or tab-line is
desired, users can set RESPECT-HEADER-LINE and RESPECT-MODE-LINE
to t.

 (12) INITIALIZE

INITIALIZE is a function with no argument.  It will run when
posframe buffer is first selected with `with-current-buffer'
in `posframe-show', and only run once (for performance reasons).

 (13) LINES-TRUNCATE

If LINES-TRUNCATE is non-nil, then lines will truncate in the
posframe instead of wrap.

 (14) OVERRIDE-PARAMETERS

OVERRIDE-PARAMETERS is very powful, *all* the valid frame parameters
used by posframe's frame can be overridden by it.

NOTE: some `posframe-show' arguments are not frame parameters, so they
can not be overrided by this argument.

 (15) TIMEOUT

TIMEOUT can specify the number of seconds after which the posframe
will auto-hide.

 (15) REFRESH

If REFRESH is a number, posframe's frame-size will be re-adjusted
every REFRESH seconds.

 (17) ACCEPT-FOCUS

When ACCEPT-FOCUS is non-nil, posframe will accept focus.
be careful, you may face some bugs when set it to non-nil.

 (18) HIDEHANDLER

HIDEHANDLER is a function, when it return t, posframe will be
hide, this function has a plist argument:

  (:posframe-buffer xxx
   :posframe-parent-buffer xxx)

The builtin hidehandler functions are listed below:

1. `posframe-hidehandler-when-buffer-switch'

 (19) REFPOSHANDLER

REFPOSHANDLER is a function, a reference position (most is
top-left of current frame) will be returned when call this
function.

when it is nil or it return nil, child-frame feature will be used
and reference position will be deal with in Emacs.

The user case I know at the moment is let ivy-posframe work well
in EXWM environment (let posframe show on the other application
window).

         DO NOT USE UNLESS NECESSARY!!!

An example parent frame poshandler function is:

1. `posframe-refposhandler-xwininfo'

 (19) Others

You can use `posframe-delete-all' to delete all posframes.

(fn BUFFER-OR-NAME &key STRING POSITION POSHANDLER POSHANDLER-EXTRA-INFO WIDTH HEIGHT MAX-WIDTH MAX-HEIGHT MIN-WIDTH MIN-HEIGHT X-PIXEL-OFFSET Y-PIXEL-OFFSET LEFT-FRINGE RIGHT-FRINGE BORDER-WIDTH BORDER-COLOR INTERNAL-BORDER-WIDTH INTERNAL-BORDER-COLOR FONT CURSOR TTY-NON-SELECTED-CURSOR WINDOW-POINT FOREGROUND-COLOR BACKGROUND-COLOR RESPECT-HEADER-LINE RESPECT-MODE-LINE INITIALIZE NO-PROPERTIES KEEP-RATIO LINES-TRUNCATE OVERRIDE-PARAMETERS TIMEOUT REFRESH ACCEPT-FOCUS HIDEHANDLER REFPOSHANDLER &allow-other-keys)")
(autoload 'posframe-hide-all "posframe" "\
Hide all posframe frames." t)
(autoload 'posframe-delete-all "posframe" "\
Delete all posframe frames and buffers." t)
(register-definition-prefixes "posframe" '("posframe-"))



(autoload 'posframe-benchmark "posframe-benchmark" "\
Benchmark tool for posframe." t)
(register-definition-prefixes "posframe-benchmark" '("posframe-benchmark-alist"))


(provide 'posframe-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/cfrs-20220129.1149/cfrs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'cfrs-read "cfrs" "\
Read a string using a pos-frame with given PROMPT and INITIAL-INPUT.

(fn PROMPT &optional INITIAL-INPUT)")
(register-definition-prefixes "cfrs" '("cfrs-"))


(provide 'cfrs-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treemacs-20250105.1321/treemacs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'treemacs-version "treemacs" "\
Return the `treemacs-version'." t)
(autoload 'treemacs "treemacs" "\
Initialise or toggle treemacs.
- If the treemacs window is visible hide it.
- If a treemacs buffer exists, but is not visible show it.
- If no treemacs buffer exists for the current frame create and show it.
- If the workspace is empty additionally ask for the root path of the first
  project to add.
- With a prefix ARG launch treemacs and force it to select a workspace

(fn &optional ARG)" t)
(autoload 'treemacs-select-directory "treemacs" "\
Select a directory to open in treemacs.
This command will open *just* the selected directory in treemacs.  If there are
other projects in the workspace they will be removed.

To *add* a project to the current workspace use
`treemacs-add-project-to-workspace' or
`treemacs-add-and-display-current-project' instead." t)
(autoload 'treemacs-find-file "treemacs" "\
Find and focus the current file in the treemacs window.
If the current buffer visits no file or with a prefix ARG ask for the
file instead.
Will show/create a treemacs buffers if it is not visible/does not exist.
For the most part only useful when `treemacs-follow-mode' is not active.

(fn &optional ARG)" t)
(autoload 'treemacs-find-tag "treemacs" "\
Find and move point to the tag at point in the treemacs view.
Most likely to be useful when `treemacs-tag-follow-mode' is not active.

Will ask to change the treemacs root if the file to find is not under the
root.  If no treemacs buffer exists it will be created with the current file's
containing directory as root.  Will do nothing if the current buffer is not
visiting a file or Emacs cannot find any tags for the current file." t)
(autoload 'treemacs-start-on-boot "treemacs" "\
Initialiser specifically to start treemacs as part of your init file.

Ensures that all visual elements are present which might otherwise be missing
because their setup requires an interactive command or a post-command hook.

FOCUS-TREEMACS indicates whether the treemacs window should be selected.

(fn &optional FOCUS-TREEMACS)")
(autoload 'treemacs-select-window "treemacs" "\
Select the treemacs window if it is visible.
Bring it to the foreground if it is not visible.
Initialise a new treemacs buffer as calling `treemacs' would if there is no
treemacs buffer for this frame.

In case treemacs is already selected behaviour will depend on
`treemacs-select-when-already-in-treemacs'.

A non-nil prefix ARG will also force a workspace switch.

(fn &optional ARG)" t)
(autoload 'treemacs-show-changelog "treemacs" "\
Show the changelog of treemacs." t)
(autoload 'treemacs-edit-workspaces "treemacs" "\
Edit your treemacs workspaces and projects as an `org-mode' file." t)
(autoload 'treemacs-add-and-display-current-project-exclusively "treemacs" "\
Display the current project, and *only* the current project.
Like `treemacs-add-and-display-current-project' this will add the current
project to treemacs based on either projectile, the built-in project.el, or the
current working directory.

However the \\='exclusive\\=' part means that it will make the current project
the only project, all other projects *will be removed* from the current
workspace." t)
(autoload 'treemacs-add-and-display-current-project "treemacs" "\
Open treemacs and add the current project root to the workspace.
The project is determined first by projectile (if treemacs-projectile is
installed), then by project.el, then by the current working directory.

If the project is already registered with treemacs just move point to its root.
An error message is displayed if the current buffer is not part of any project." t)
(register-definition-prefixes "treemacs" '("treemacs-version"))



(register-definition-prefixes "treemacs-annotations" '("treemacs-"))



(register-definition-prefixes "treemacs-async" '("treemacs-"))



(autoload 'treemacs-bookmark "treemacs-bookmarks" "\
Find a bookmark in treemacs.
Only bookmarks marking either a file or a directory are offered for selection.
Treemacs will try to find and focus the given bookmark's location, in a similar
fashion to `treemacs-find-file'.

With a prefix argument ARG treemacs will also open the bookmarked location.

(fn &optional ARG)" t)
(autoload 'treemacs--bookmark-handler "treemacs-bookmarks" "\
Open Treemacs into a bookmark RECORD.

(fn RECORD)")
(autoload 'treemacs-add-bookmark "treemacs-bookmarks" "\
Add the current node to Emacs' list of bookmarks.
For file and directory nodes their absolute path is saved.  Tag nodes
additionally also save the tag's position.  A tag can only be bookmarked if the
treemacs node is pointing to a valid buffer position." t)
(register-definition-prefixes "treemacs-bookmarks" '("treemacs--"))



(register-definition-prefixes "treemacs-compatibility" '("treemacs-"))



(register-definition-prefixes "treemacs-core-utils" '("treemacs-"))



(register-definition-prefixes "treemacs-customization" '("treemacs-"))



(register-definition-prefixes "treemacs-diagnostics" '("treemacs-"))



(register-definition-prefixes "treemacs-dom" '("treemacs-"))



(register-definition-prefixes "treemacs-extensions" '("treemacs-"))



(autoload 'treemacs-delete-file "treemacs-file-management" "\
Delete node at point.
A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

(fn &optional ARG)" t)
(autoload 'treemacs-delete-marked-files "treemacs-file-management" "\
Delete all marked files.

A delete action must always be confirmed.  Directories are deleted recursively.
By default files are deleted by moving them to the trash.  With a prefix ARG
they will instead be wiped irreversibly.

For marking files see `treemacs-bulk-file-actions'.

(fn &optional ARG)" t)
(autoload 'treemacs-move-file "treemacs-file-management" "\
Move file (or directory) at point.

If the selected target is an existing directory the source file will be directly
moved into this directory.  If the given target instead does not exist then it
will be treated as the moved file's new name, meaning the original source file
will be both moved and renamed." t)
(autoload 'treemacs-copy-file "treemacs-file-management" "\
Copy file (or directory) at point.

If the selected target is an existing directory the source file will be directly
copied into this directory.  If the given target instead does not exist then it
will be treated as the copied file's new name, meaning the original source file
will be both copied and renamed." t)
(autoload 'treemacs-move-marked-files "treemacs-file-management" "\
Move all marked files.

For marking files see `treemacs-bulk-file-actions'." t)
(autoload 'treemacs-copy-marked-files "treemacs-file-management" "\
Copy all marked files.

For marking files see `treemacs-bulk-file-actions'." t)
(autoload 'treemacs-rename-file "treemacs-file-management" "\
Rename the file/directory at point.

Buffers visiting the renamed file or visiting a file inside the renamed
directory and windows showing them will be reloaded.  The list of recent files
will likewise be updated." t)
(autoload 'treemacs-show-marked-files "treemacs-file-management" "\
Print a list of all files marked by treemacs." t)
(autoload 'treemacs-mark-or-unmark-path-at-point "treemacs-file-management" "\
Mark or unmark the absolute path of the node at point." t)
(autoload 'treemacs-reset-marks "treemacs-file-management" "\
Unmark all previously marked files in the current buffer." t)
(autoload 'treemacs-delete-marked-paths "treemacs-file-management" "\
Delete all previously marked files." t)
(autoload 'treemacs-bulk-file-actions "treemacs-file-management" "\
Activate the bulk file actions hydra.
This interface allows to quickly (unmark) files, so as to copy, move or delete
them in bulk.

Note that marking files is *permanent*, files will stay marked until they are
either manually unmarked or deleted.  You can show a list of all currently
marked files with `treemacs-show-marked-files' or `s' in the hydra." t)
(autoload 'treemacs-create-file "treemacs-file-management" "\
Create a new file.
Enter first the directory to create the new file in, then the new file's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t)
(autoload 'treemacs-create-dir "treemacs-file-management" "\
Create a new directory.
Enter first the directory to create the new dir in, then the new dir's name.
The pre-selection for what directory to create in is based on the \"nearest\"
path to point - the containing directory for tags and files or the directory
itself, using $HOME when there is no path at or near point to grab." t)
(register-definition-prefixes "treemacs-file-management" '("treemacs-"))



(register-definition-prefixes "treemacs-filewatch-mode" '("treemacs-"))



(register-definition-prefixes "treemacs-follow-mode" '("treemacs-"))



(register-definition-prefixes "treemacs-fringe-indicator" '("treemacs-"))



(defvar treemacs-git-commit-diff-mode nil "\
Non-nil if Treemacs-Git-Commit-Diff mode is enabled.
See the `treemacs-git-commit-diff-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-git-commit-diff-mode'.")
(custom-autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" nil)
(autoload 'treemacs-git-commit-diff-mode "treemacs-git-commit-diff-mode" "\
Minor mode to display commit differences for your git-tracked projects.

When enabled treemacs will add an annotation next to every git project showing
how many commits ahead or behind your current branch is compared to its remote
counterpart.

The difference will be shown using the format `↑x ↓y', where `x' and `y' are the
numbers of commits a project is ahead or behind.  The numbers are determined
based on the output of `git status -sb'.

By default the annotation is only updated when manually updating a project with
`treemacs-refresh'.  You can install `treemacs-magit' to enable automatic
updates whenever you commit/fetch/rebase etc. in magit.

Does not require `treemacs-git-mode' to be active.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Git-Commit-Diff mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-git-commit-diff-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs-git-commit-diff-mode" '("treemacs--"))



(defvar treemacs-indicate-top-scroll-mode nil "\
Non-nil if Treemacs-Indicate-Top-Scroll mode is enabled.
See the `treemacs-indicate-top-scroll-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-indicate-top-scroll-mode'.")
(custom-autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" nil)
(autoload 'treemacs-indicate-top-scroll-mode "treemacs-header-line" "\
Minor mode which shows whether treemacs is scrolled all the way to the top.

When this mode is enabled the header line of the treemacs window will display
whether the window's first line is visible or not.

The strings used for the display are determined by
`treemacs-header-scroll-indicators'.

This mode makes use of `treemacs-user-header-line-format' - and thus
`header-line-format' - and is therefore incompatible with other modifications to
these options.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Indicate-Top-Scroll mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-indicate-top-scroll-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs-header-line" '("treemacs-"))



(autoload 'treemacs-common-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the most commonly used keybinds for treemacs.  For the more
advanced (probably rarely used keybinds) see `treemacs-advanced-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t)
(autoload 'treemacs-advanced-helpful-hydra "treemacs-hydras" "\
Summon a helpful hydra to show you the treemacs keymap.

This hydra will show the more advanced (rarely used) keybinds for treemacs.  For
the more commonly used keybinds see `treemacs-common-helpful-hydra'.

The keybinds shown in this hydra are not static, but reflect the actual
keybindings currently in use (including evil mode).  If the hydra is unable to
find the key a command is bound to it will show a blank instead." t)
(register-definition-prefixes "treemacs-hydras" '("treemacs-helpful-hydra"))



(autoload 'treemacs-resize-icons "treemacs-icons" "\
Resize the current theme's icons to the given SIZE.

If SIZE is \\='nil' the icons are not resized and will retain their default size
of 22 pixels.

There is only one size, the icons are square and the aspect ratio will be
preserved when resizing them therefore width and height are the same.

Resizing the icons only works if Emacs was built with ImageMagick support, or if
using Emacs >= 27.1,which has native image resizing support.  If this is not the
case this function will not have any effect.

Custom icons are not taken into account, only the size of treemacs' own icons
png are changed.

(fn SIZE)" t)
(autoload 'treemacs-define-custom-icon "treemacs-icons" "\
Define a custom ICON for the current theme to use for FILE-EXTENSIONS.

Note that treemacs has a very loose definition of what constitutes a file
extension - it's either everything past the last period, or just the file's full
name if there is no period.  This makes it possible to match file names like
\\='.gitignore' and \\='Makefile'.

Additionally FILE-EXTENSIONS are also not case sensitive and will be stored in a
down-cased state.

(fn ICON &rest FILE-EXTENSIONS)")
(autoload 'treemacs-define-custom-image-icon "treemacs-icons" "\
Same as `treemacs-define-custom-icon' but for image icons instead of strings.
FILE is the path to an icon image (and not the actual icon string).
FILE-EXTENSIONS are all the (not case-sensitive) file extensions the icon
should be used for.

(fn FILE &rest FILE-EXTENSIONS)")
(autoload 'treemacs-map-icons-with-auto-mode-alist "treemacs-icons" "\
Remaps icons for EXTENSIONS according to `auto-mode-alist'.
EXTENSIONS should be a list of file extensions such that they match the regex
stored in `auto-mode-alist', for example \\='(\".cc\").
MODE-ICON-ALIST is an alist that maps which mode from `auto-mode-alist' should
be assigned which treemacs icon, for example
`((c-mode . ,(treemacs-get-icon-value \"c\"))
  (c++-mode . ,(treemacs-get-icon-value \"cpp\")))

(fn EXTENSIONS MODE-ICON-ALIST)")
(register-definition-prefixes "treemacs-icons" '("treemacs-"))



(register-definition-prefixes "treemacs-interface" '("treemacs-"))



(register-definition-prefixes "treemacs-logging" '("treemacs-"))



(register-definition-prefixes "treemacs-macros" '("treemacs-"))



(autoload 'treemacs-mode "treemacs-mode" "\
A major mode for displaying the file system in a tree layout.

(fn)" t)
(register-definition-prefixes "treemacs-mode" '("treemacs-"))



(autoload 'treemacs-leftclick-action "treemacs-mouse-interface" "\
Move focus to the clicked line.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t)
(autoload 'treemacs-doubleclick-action "treemacs-mouse-interface" "\
Run the appropriate double-click action for the current node.
In the default configuration this means to expand/collapse directories and open
files and tags in the most recently used window.

This function's exact configuration is stored in
`treemacs-doubleclick-actions-config'.

Must be bound to a mouse double click to properly handle a click EVENT.

(fn EVENT)" t)
(autoload 'treemacs-single-click-expand-action "treemacs-mouse-interface" "\
A modified single-leftclick action that expands the clicked nodes.
Can be bound to <mouse1> if you prefer to expand nodes with a single click
instead of a double click.  Either way it must be bound to a mouse click, or
EVENT will not be supplied.

Clicking on icons will expand a file's tags, just like
`treemacs-leftclick-action'.

(fn EVENT)" t)
(autoload 'treemacs-dragleftclick-action "treemacs-mouse-interface" "\
Drag a file/dir node to be opened in a window.
Must be bound to a mouse click, or EVENT will not be supplied.

(fn EVENT)" t)
(autoload 'treemacs-define-doubleclick-action "treemacs-mouse-interface" "\
Define the behaviour of `treemacs-doubleclick-action'.
Determines that a button with a given STATE should lead to the execution of
ACTION.

The list of possible states can be found in `treemacs-valid-button-states'.
ACTION should be one of the `treemacs-visit-node-*' commands.

(fn STATE ACTION)")
(autoload 'treemacs-node-buffer-and-position "treemacs-mouse-interface" "\
Return source buffer or list of buffer and position for the current node.
This information can be used for future display.  Stay in the selected window
and ignore any prefix argument.

(fn &optional _)" t)
(autoload 'treemacs-rightclick-menu "treemacs-mouse-interface" "\
Show a contextual right click menu based on click EVENT.

(fn EVENT)" t)
(register-definition-prefixes "treemacs-mouse-interface" '("treemacs--"))



(defvar treemacs-peek-mode nil "\
Non-nil if Treemacs-Peek mode is enabled.
See the `treemacs-peek-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-peek-mode'.")
(custom-autoload 'treemacs-peek-mode "treemacs-peek-mode" nil)
(autoload 'treemacs-peek-mode "treemacs-peek-mode" "\
Minor mode that allows you to peek at buffers before deciding to open them.

While the mode is active treemacs will automatically display the file at point,
without leaving the treemacs window.

Peeking will stop when you leave the treemacs window, be it through a command
like `treemacs-RET-action' or some other window selection change.

Files' buffers that have been opened for peeking will be cleaned up if they did
not exist before peeking started.

The peeked window can be scrolled using
`treemacs-next/previous-line-other-window' and
`treemacs-next/previous-page-other-window'

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Peek mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-peek-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs-peek-mode" '("treemacs--"))



(register-definition-prefixes "treemacs-persistence" '("treemacs-"))



(defvar treemacs-project-follow-mode nil "\
Non-nil if Treemacs-Project-Follow mode is enabled.
See the `treemacs-project-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-project-follow-mode'.")
(custom-autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" nil)
(autoload 'treemacs-project-follow-mode "treemacs-project-follow-mode" "\
Toggle `treemacs-only-current-project-mode'.

This is a minor mode meant for those who do not care about treemacs' workspace
features, or its preference to work with multiple projects simultaneously.  When
enabled it will function as an automated version of
`treemacs-display-current-project-exclusively', making sure that, after a small
idle delay, the current project, and *only* the current project, is displayed in
treemacs.

The project detection is based on the current buffer, and will try to determine
the project using the following methods, in the order they are listed:

- the current projectile.el project, if `treemacs-projectile' is installed
- the current project.el project
- the current `default-directory'

The update will only happen when treemacs is in the foreground, meaning a
treemacs window must exist in the current scope.

This mode requires at least Emacs version 27 since it relies on
`window-buffer-change-functions' and `window-selection-change-functions'.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Project-Follow mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-project-follow-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs-project-follow-mode" '("treemacs--"))



(register-definition-prefixes "treemacs-rendering" '("treemacs-"))



(register-definition-prefixes "treemacs-scope" '("treemacs-"))



(autoload 'treemacs--flatten&sort-imenu-index "treemacs-tag-follow-mode" "\
Flatten current file's imenu index and sort it by tag position.
The tags are sorted into the order in which they appear, regardless of section
or nesting depth.")
(defvar treemacs-tag-follow-mode nil "\
Non-nil if Treemacs-Tag-Follow mode is enabled.
See the `treemacs-tag-follow-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-tag-follow-mode'.")
(custom-autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" nil)
(autoload 'treemacs-tag-follow-mode "treemacs-tag-follow-mode" "\
Toggle `treemacs-tag-follow-mode'.

This acts as more fine-grained alternative to `treemacs-follow-mode' and will
thus disable `treemacs-follow-mode' on activation.  When enabled treemacs will
focus not only the file of the current buffer, but also the tag at point.

The follow action is attached to Emacs' idle timer and will run
`treemacs-tag-follow-delay' seconds of idle time.  The delay value is not an
integer, meaning it accepts floating point values like 1.5.

Every time a tag is followed a re--scan of the imenu index is forced by
temporarily setting `imenu-auto-rescan' to t (though a cache is applied as long
as the buffer is unmodified).  This is necessary to assure that creation or
deletion of tags does not lead to errors and guarantees an always up-to-date tag
view.

Note that in order to move to a tag in treemacs the treemacs buffer's window
needs to be temporarily selected, which will reset blink-cursor-mode's timer if
it is enabled.  This will result in the cursor blinking seemingly pausing for a
short time and giving the appearance of the tag follow action lasting much
longer than it really does.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Tag-Follow mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-tag-follow-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "treemacs-tag-follow-mode" '("treemacs--"))



(autoload 'treemacs--expand-file-node "treemacs-tags" "\
Open tag items for file BTN.
Recursively open all tags below BTN when RECURSIVE is non-nil.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--collapse-file-node "treemacs-tags" "\
Close node given by BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--visit-or-expand/collapse-tag-node "treemacs-tags" "\
Visit tag section BTN if possible, expand or collapse it otherwise.
Pass prefix ARG on to either visit or toggle action.

FIND-WINDOW is a special provision depending on this function's invocation
context and decides whether to find the window to display in (if the tag is
visited instead of the node being expanded).

On the one hand it can be called based on `treemacs-RET-actions-config' (or
TAB).  The functions in these configs are expected to find the windows they need
to display in themselves, so FIND-WINDOW must be t. On the other hand this
function is also called from the top level vist-node functions like
`treemacs-visit-node-vertical-split' which delegates to the
`treemacs--execute-button-action' macro which includes the determination of
the display window.

(fn BTN ARG FIND-WINDOW)")
(autoload 'treemacs--expand-tag-node "treemacs-tags" "\
Open tags node items for BTN.
Open all tag section under BTN when call is RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--collapse-tag-node "treemacs-tags" "\
Close tags node at BTN.
Remove all open tag entries under BTN when RECURSIVE.

(fn BTN &optional RECURSIVE)")
(autoload 'treemacs--goto-tag "treemacs-tags" "\
Go to the tag at BTN.

(fn BTN)")
(autoload 'treemacs--create-imenu-index-function "treemacs-tags" "\
The `imenu-create-index-function' for treemacs buffers.")
(function-put 'treemacs--create-imenu-index-function 'side-effect-free 't)
(register-definition-prefixes "treemacs-tags" '("treemacs--"))



(register-definition-prefixes "treemacs-themes" '("treemacs-"))



(register-definition-prefixes "treemacs-treelib" '("treemacs-"))



(register-definition-prefixes "treemacs-visuals" '("treemacs-"))



(register-definition-prefixes "treemacs-workspaces" '("treemacs-"))


(provide 'treemacs-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/llama-20250218.1544/llama-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'llama "llama" "\
Expand to a `lambda' expression that wraps around FN and BODY.

This macro provides a compact way to write short `lambda' expressions.
It expands to a `lambda' expression, which calls the function FN with
arguments BODY and returns its value.  The arguments of the `lambda'
expression are derived from symbols found in BODY.

Each symbol from `%1' through `%9', which appears in an unquoted part
of BODY, specifies a mandatory argument.  Each symbol from `&1' through
`&9', which appears in an unquoted part of BODY, specifies an optional
argument.  The symbol `&*' specifies extra (`&rest') arguments.

The shorter symbol `%' can be used instead of `%1', but using both in
the same expression is not allowed.  Likewise `&' can be used instead
of `&1'.  These shorthands are not recognized in function position.

To support binding forms that use a vector as VARLIST (such as `-let'
from the `dash' package), argument symbols are also detected inside of
vectors.

The space between `##' and FN can be omitted because `##' is read-syntax
for the symbol whose name is the empty string.  If you prefer you can
place a space there anyway, and if you prefer to not use this somewhat
magical symbol at all, you can instead use the alternative name `llama'.

Instead of:

  (lambda (a &optional _ c &rest d)
    (foo a (bar c) d))

you can use this macro and write:

  (##foo %1 (bar &3) &*)

which expands to:

  (lambda (%1 &optional _&2 &3 &rest &*)
    (foo %1 (bar &3) &*))

Unused trailing arguments and mandatory unused arguments at the border
between mandatory and optional arguments are also supported:

  (##list %1 _%3 &5 _&6)

becomes:

  (lambda (%1 _%2 _%3 &optional _&4 &5 _&6)
    (list %1 &5))

Note how `_%3' and `_&6' are removed from the body, because their names
begin with an underscore.  Also note that `_&4' is optional, unlike the
explicitly specified `_%3'.

(fn FN &rest BODY)" nil t)
(autoload 'llama-fontify-mode "llama" "\
Toggle fontification of the `##' macro and its positional arguments.

This is a minor mode.  If called interactively, toggle the
`Llama-Fontify mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `llama-fontify-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-llama-fontify-mode 'globalized-minor-mode t)
(defvar global-llama-fontify-mode nil "\
Non-nil if Global Llama-Fontify mode is enabled.
See the `global-llama-fontify-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-llama-fontify-mode'.")
(custom-autoload 'global-llama-fontify-mode "llama" nil)
(autoload 'global-llama-fontify-mode "llama" "\
Toggle Llama-Fontify mode in all buffers.
With prefix ARG, enable Global Llama-Fontify mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Llama-Fontify mode is enabled in all buffers where
`llama--turn-on-fontify-mode' would do it.

See `llama-fontify-mode' for more information on Llama-Fontify mode.

(fn &optional ARG)" t)
(register-definition-prefixes "llama" '("##" "completing-read" "elisp-" "intern" "lisp--el-match-keyword" "llama-"))


(provide 'llama-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/magit-section-20250221.105/magit-section-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'magit-add-section-hook "magit-section" "\
Add to the value of section hook HOOK the function FUNCTION.

Add FUNCTION at the beginning of the hook list unless optional
APPEND is non-nil, in which case FUNCTION is added at the end.
If FUNCTION already is a member, then move it to the new location.

If optional AT is non-nil and a member of the hook list, then
add FUNCTION next to that instead.  Add before or after AT, or
replace AT with FUNCTION depending on APPEND.  If APPEND is the
symbol `replace', then replace AT with FUNCTION.  For any other
non-nil value place FUNCTION right after AT.  If nil, then place
FUNCTION right before AT.  If FUNCTION already is a member of the
list but AT is not, then leave FUNCTION where ever it already is.

If optional LOCAL is non-nil, then modify the hook's buffer-local
value rather than its global value.  This makes the hook local by
copying the default value.  That copy is then modified.

HOOK should be a symbol.  If HOOK is void, it is first set to nil.
HOOK's value must not be a single hook function.  FUNCTION should
be a function that takes no arguments and inserts one or multiple
sections at point, moving point forward.  FUNCTION may choose not
to insert its section(s), when doing so would not make sense.  It
should not be abused for other side-effects.  To remove FUNCTION
again use `remove-hook'.

(fn HOOK FUNCTION &optional AT APPEND LOCAL)")
(autoload 'magit--handle-bookmark "magit-section" "\
Open a bookmark created by `magit--make-bookmark'.

Call the generic function `magit-bookmark-get-buffer-create' to get
the appropriate buffer without displaying it.

Then call the `magit-*-setup-buffer' function of the the major-mode
with the variables' values as arguments, which were recorded by
`magit--make-bookmark'.

(fn BOOKMARK)")
(register-definition-prefixes "magit-section" '("context-menu-region" "isearch-clean-overlays" "magit-"))


(provide 'magit-section-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/magit-20250225.837/magit-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(put 'git-commit-major-mode 'safe-local-variable
    (lambda (val)
      (memq val '(text-mode
                  markdown-mode
                  org-mode
                  fundamental-mode
                  git-commit-elisp-text-mode))))
(register-definition-prefixes "git-commit" '("git-commit-" "global-git-commit-mode"))



(autoload 'git-rebase-current-line "git-rebase" "\
Parse current line into a `git-rebase-action' instance.
If the current line isn't recognized as a rebase line, an
instance with all nil values is returned.")
(autoload 'git-rebase-mode "git-rebase" "\
Major mode for editing of a Git rebase file.

Rebase files are generated when you run \"git rebase -i\" or run
`magit-interactive-rebase'.  They describe how Git should perform
the rebase.  See the documentation for git-rebase (e.g., by
running \"man git-rebase\" at the command line) for details.

(fn)" t)
(defconst git-rebase-filename-regexp "/git-rebase-todo\\'")
(add-to-list 'auto-mode-alist (cons git-rebase-filename-regexp #'git-rebase-mode))
(register-definition-prefixes "git-rebase" '("git-rebase-" "magit-imenu--rebase-"))



(defvar magit-define-global-key-bindings 'default "\
Which set of key bindings to add to the global keymap, if any.

This option controls which set of Magit key bindings, if any, may
be added to the global keymap, even before Magit is first used in
the current Emacs session.

If the value is nil, no bindings are added.

If \\+`default', maybe add:

    \\`C-x' \\`g'     `magit-status'
    \\`C-x' \\`M-g'   `magit-dispatch'
    \\`C-c' \\`M-g'   `magit-file-dispatch'

If `recommended', maybe add:

    \\`C-x' \\`g'     `magit-status'
    \\`C-c' \\`g'     `magit-dispatch'
    \\`C-c' \\`f'     `magit-file-dispatch'

    These bindings are strongly recommended, but we cannot use
    them by default, because the \\`C-c <LETTER>' namespace is
    strictly reserved for bindings added by the user.

The bindings in the chosen set may be added when
`after-init-hook' is run.  Each binding is added if, and only
if, at that time no other key is bound to the same command,
and no other command is bound to the same key.  In other words
we try to avoid adding bindings that are unnecessary, as well
as bindings that conflict with other bindings.

Adding these bindings is delayed until `after-init-hook' is
run to allow users to set the variable anywhere in their init
file (without having to make sure to do so before `magit' is
loaded or autoloaded) and to increase the likelihood that all
the potentially conflicting user bindings have already been
added.

To set this variable use either `setq' or the Custom interface.
Do not use the function `customize-set-variable' because doing
that would cause Magit to be loaded immediately, when that form
is evaluated (this differs from `custom-set-variables', which
doesn't load the libraries that define the customized variables).

Setting this variable has no effect if `after-init-hook' has
already been run.")
(custom-autoload 'magit-define-global-key-bindings "magit" t)
(defun magit-maybe-define-global-key-bindings (&optional force) "\
See variable `magit-define-global-key-bindings'." (when magit-define-global-key-bindings (let ((map (current-global-map))) (pcase-dolist (`(,key \, def) (cond ((eq magit-define-global-key-bindings 'recommended) '(("C-x g" . magit-status) ("C-c g" . magit-dispatch) ("C-c f" . magit-file-dispatch))) ('(("C-x g" . magit-status) ("C-x M-g" . magit-dispatch) ("C-c M-g" . magit-file-dispatch))))) (when (or force (not (or (lookup-key map (kbd key)) (where-is-internal def (make-sparse-keymap) t)))) (define-key map (kbd key) def))))))
(if after-init-time (magit-maybe-define-global-key-bindings) (add-hook 'after-init-hook #'magit-maybe-define-global-key-bindings t))
 (autoload 'magit-dispatch "magit" nil t)
 (autoload 'magit-run "magit" nil t)
(autoload 'magit-git-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  \"git \" is
used as initial input, but can be deleted to run another command.

With a prefix argument COMMAND is run in the top-level directory
of the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-git-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  \"git \" is
used as initial input, but can be deleted to run another command.

COMMAND is run in the top-level directory of the current
working tree.

(fn COMMAND)" t)
(autoload 'magit-shell-command "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  With a
prefix argument COMMAND is run in the top-level directory of
the current working tree, otherwise in `default-directory'.

(fn COMMAND)" t)
(autoload 'magit-shell-command-topdir "magit" "\
Execute COMMAND asynchronously; display output.

Interactively, prompt for COMMAND in the minibuffer.  COMMAND
is run in the top-level directory of the current working tree.

(fn COMMAND)" t)
(autoload 'magit-version "magit" "\
Return the version of Magit currently in use.

If optional argument PRINT-DEST is non-nil, also print the used
versions of Magit, Transient, Git and Emacs to the output stream
selected by that argument.  Interactively use the echo area, or
with a prefix argument use the current buffer.  Additionally put
the output in the kill ring.

(fn &optional PRINT-DEST)" t)
(register-definition-prefixes "magit" '("magit-"))



(autoload 'magit-stage-buffer-file "magit-apply" "\
Stage all changes to the file being visited in the current buffer." t)
(autoload 'magit-stage-file "magit-apply" "\
Read one or more files and stage all changes in those files.
With prefix argument FORCE, offer ignored files for completion.

(fn FILES &optional FORCE)" t)
(autoload 'magit-stage-modified "magit-apply" "\
Stage all changes to files modified in the worktree.
Stage all new content of tracked files and remove tracked files
that no longer exist in the working tree from the index also.
With a prefix argument also stage previously untracked (but not
ignored) files.

(fn &optional ALL)" t)
(autoload 'magit-unstage-buffer-file "magit-apply" "\
Unstage all changes to the file being visited in the current buffer." t)
(autoload 'magit-unstage-file "magit-apply" "\
Read one or more files and unstage all changes to those files.

(fn FILES)" t)
(autoload 'magit-unstage-all "magit-apply" "\
Remove all changes from the staging area." t)
(register-definition-prefixes "magit-apply" '("magit-"))



(put 'magit-auto-revert-mode 'globalized-minor-mode t)
(defvar magit-auto-revert-mode (not (or global-auto-revert-mode noninteractive)) "\
Non-nil if Magit-Auto-Revert mode is enabled.
See the `magit-auto-revert-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-auto-revert-mode'.")
(custom-autoload 'magit-auto-revert-mode "magit-autorevert" nil)
(autoload 'magit-auto-revert-mode "magit-autorevert" "\
Toggle Auto-Revert mode in all buffers.
With prefix ARG, enable Magit-Auto-Revert mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Auto-Revert mode is enabled in all buffers where
`magit-turn-on-auto-revert-mode-if-desired' would do it.

See `auto-revert-mode' for more information on Auto-Revert mode.

(fn &optional ARG)" t)
(register-definition-prefixes "magit-autorevert" '("auto-revert-buffer" "magit-"))



(autoload 'magit-emacs-Q-command "magit-base" "\
Show a shell command that runs an uncustomized Emacs with only Magit loaded.
See info node `(magit)Debugging Tools' for more information." t)
(define-advice Info-follow-nearest-node (:around (fn &optional fork) gitman) (let ((node (Info-get-token (point) "\\*note[ 
	]+" "\\*note[ 
	]+\\([^:]*\\):\\(:\\|[ 
	]*(\\)?"))) (if (and node (string-match "^(gitman)\\(.+\\)" node)) (pcase magit-view-git-manual-method ('info (funcall fn fork)) ('man (require 'man) (man (match-string 1 node))) ('woman (require 'woman) (woman (match-string 1 node))) (_ (user-error "Invalid value for `magit-view-git-manual-method'"))) (funcall fn fork))))
(define-advice org-man-export (:around (fn link description format) gitman) (if (and (eq format 'texinfo) (string-prefix-p "git" link)) (string-replace "%s" link "
@ifinfo
@ref{%s,,,gitman,}.
@end ifinfo
@ifhtml
@html
the <a href=\"http://git-scm.com/docs/%s\">%s(1)</a> manpage.
@end html
@end ifhtml
@iftex
the %s(1) manpage.
@end iftex
") (funcall fn link description format)))
(register-definition-prefixes "magit-base" '("magit-"))



 (autoload 'magit-bisect "magit-bisect" nil t)
(autoload 'magit-bisect-start "magit-bisect" "\
Start a bisect session.

Bisecting a bug means to find the commit that introduced it.
This command starts such a bisect session by asking for a known
good and a known bad commit.  To move the session forward use the
other actions from the bisect transient command (\\<magit-status-mode-map>\\[magit-bisect]).

(fn BAD GOOD ARGS)" t)
(autoload 'magit-bisect-reset "magit-bisect" "\
After bisecting, cleanup bisection state and return to original `HEAD'." t)
(autoload 'magit-bisect-good "magit-bisect" "\
While bisecting, mark the current commit as good.
Use this after you have asserted that the commit does not contain
the bug in question." t)
(autoload 'magit-bisect-bad "magit-bisect" "\
While bisecting, mark the current commit as bad.
Use this after you have asserted that the commit does contain the
bug in question." t)
(autoload 'magit-bisect-mark "magit-bisect" "\
While bisecting, mark the current commit with a bisect term.
During a bisect using alternate terms, commits can still be
marked with `magit-bisect-good' and `magit-bisect-bad', as those
commands map to the correct term (\"good\" to --term-old's value
and \"bad\" to --term-new's).  However, in some cases, it can be
difficult to keep that mapping straight in your head; this
command provides an interface that exposes the underlying terms." t)
(autoload 'magit-bisect-skip "magit-bisect" "\
While bisecting, skip the current commit.
Use this if for some reason the current commit is not a good one
to test.  This command lets Git choose a different one." t)
(autoload 'magit-bisect-run "magit-bisect" "\
Bisect automatically by running commands after each step.

Unlike `git bisect run' this can be used before bisecting has
begun.  In that case it behaves like `git bisect start; git
bisect run'.

(fn CMDLINE &optional BAD GOOD ARGS)" t)
(register-definition-prefixes "magit-bisect" '("magit-"))



 (autoload 'magit-blame-echo "magit-blame" nil t)
 (autoload 'magit-blame-addition "magit-blame" nil t)
 (autoload 'magit-blame-removal "magit-blame" nil t)
 (autoload 'magit-blame-reverse "magit-blame" nil t)
 (autoload 'magit-blame "magit-blame" nil t)
(register-definition-prefixes "magit-blame" '("magit-"))



 (autoload 'magit-branch "magit" nil t)
(autoload 'magit-checkout "magit-branch" "\
Checkout REVISION, updating the index and the working tree.
If REVISION is a local branch, then that becomes the current
branch.  If it is something else, then `HEAD' becomes detached.
Checkout fails if the working tree or the staging area contain
changes.

(git checkout REVISION).

(fn REVISION &optional ARGS)" t)
(function-put 'magit-checkout 'interactive-only 'magit--checkout)
(autoload 'magit-branch-create "magit-branch" "\
Create BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT)" t)
(function-put 'magit-branch-create 'interactive-only 'magit-call-git)
(autoload 'magit-branch-and-checkout "magit-branch" "\
Create and checkout BRANCH at branch or revision START-POINT.

(fn BRANCH START-POINT &optional ARGS)" t)
(function-put 'magit-branch-and-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-or-checkout "magit-branch" "\
Hybrid between `magit-checkout' and `magit-branch-and-checkout'.

Ask the user for an existing branch or revision.  If the user
input actually can be resolved as a branch or revision, then
check that out, just like `magit-checkout' would.

Otherwise create and checkout a new branch using the input as
its name.  Before doing so read the starting-point for the new
branch.  This is similar to what `magit-branch-and-checkout'
does.

(fn ARG &optional START-POINT)" t)
(function-put 'magit-branch-or-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-checkout "magit-branch" "\
Checkout an existing or new local branch.

Read a branch name from the user offering all local branches and
a subset of remote branches as candidates.  Omit remote branches
for which a local branch by the same name exists from the list
of candidates.  The user can also enter a completely new branch
name.

- If the user selects an existing local branch, then check that
  out.

- If the user selects a remote branch, then create and checkout
  a new local branch with the same name.  Configure the selected
  remote branch as push target.

- If the user enters a new branch name, then create and check
  that out, after also reading the starting-point from the user.

In the latter two cases the upstream is also set.  Whether it is
set to the chosen START-POINT or something else depends on the
value of `magit-branch-adjust-remote-upstream-alist', just like
when using `magit-branch-and-checkout'.

(fn BRANCH &optional START-POINT)" t)
(function-put 'magit-branch-checkout 'interactive-only 'magit-call-git)
(autoload 'magit-branch-orphan "magit-branch" "\
Create and checkout an orphan BRANCH with contents from revision START-POINT.

(fn BRANCH START-POINT)" t)
(autoload 'magit-branch-spinout "magit-branch" "\
Create new branch from the unpushed commits.
Like `magit-branch-spinoff' but remain on the current branch.
If there are any uncommitted changes, then behave exactly like
`magit-branch-spinoff'.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-spinoff "magit-branch" "\
Create new branch from the unpushed commits.

Create and checkout a new branch starting at and tracking the
current branch.  That branch in turn is reset to the last commit
it shares with its upstream.  If the current branch has no
upstream or no unpushed commits, then the new branch is created
anyway and the previously current branch is not touched.

This is useful to create a feature branch after work has already
began on the old branch (likely but not necessarily \"master\").

If the current branch is a member of the value of option
`magit-branch-prefer-remote-upstream' (which see), then the
current branch will be used as the starting point as usual, but
the upstream of the starting-point may be used as the upstream
of the new branch, instead of the starting-point itself.

If optional FROM is non-nil, then the source branch is reset
to `FROM~', instead of to the last commit it shares with its
upstream.  Interactively, FROM is only ever non-nil, if the
region selects some commits, and among those commits, FROM is
the commit that is the fewest commits ahead of the source
branch.

The commit at the other end of the selection actually does not
matter, all commits between FROM and `HEAD' are moved to the new
branch.  If FROM is not reachable from `HEAD' or is reachable
from the source branch's upstream, then an error is raised.

(fn BRANCH &optional FROM)" t)
(autoload 'magit-branch-reset "magit-branch" "\
Reset a branch to the tip of another branch or any other commit.

When the branch being reset is the current branch, then do a
hard reset.  If there are any uncommitted changes, then the user
has to confirm the reset because those changes would be lost.

This is useful when you have started work on a feature branch but
realize it's all crap and want to start over.

When resetting to another branch and a prefix argument is used,
then also set the target branch as the upstream of the branch
that is being reset.

(fn BRANCH TO &optional SET-UPSTREAM)" t)
(autoload 'magit-branch-delete "magit-branch" "\
Delete one or multiple branches.

If the region marks multiple branches, then offer to delete
those, otherwise prompt for a single branch to be deleted,
defaulting to the branch at point.

Require confirmation when deleting branches is dangerous in some
way.  Option `magit-no-confirm' can be customized to not require
confirmation in certain cases.  See its docstring to learn why
confirmation is required by default in certain cases or if a
prompt is confusing.

(fn BRANCHES &optional FORCE)" t)
(autoload 'magit-branch-rename "magit-branch" "\
Rename the branch named OLD to NEW.

With a prefix argument FORCE, rename even if a branch named NEW
already exists.

If `branch.OLD.pushRemote' is set, then unset it.  Depending on
the value of `magit-branch-rename-push-target' (which see) maybe
set `branch.NEW.pushRemote' and maybe rename the push-target on
the remote.

(fn OLD NEW &optional FORCE)" t)
(autoload 'magit-branch-shelve "magit-branch" "\
Shelve a BRANCH.
Rename \"refs/heads/BRANCH\" to \"refs/shelved/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
(autoload 'magit-branch-unshelve "magit-branch" "\
Unshelve a BRANCH.
Rename \"refs/shelved/BRANCH\" to \"refs/heads/BRANCH\",
and also rename the respective reflog file.

(fn BRANCH)" t)
 (autoload 'magit-branch-configure "magit-branch" nil t)
(register-definition-prefixes "magit-branch" '("magit-"))



 (autoload 'magit-bundle "magit-bundle" nil t)
 (autoload 'magit-bundle-import "magit-bundle" nil t)
(autoload 'magit-bundle-create-tracked "magit-bundle" "\
Create and track a new bundle.

(fn FILE TAG BRANCH REFS ARGS)" t)
(autoload 'magit-bundle-update-tracked "magit-bundle" "\
Update a bundle that is being tracked using TAG.

(fn TAG)" t)
(autoload 'magit-bundle-verify "magit-bundle" "\
Check whether FILE is valid and applies to the current repository.

(fn FILE)" t)
(autoload 'magit-bundle-list-heads "magit-bundle" "\
List the refs in FILE.

(fn FILE)" t)
(register-definition-prefixes "magit-bundle" '("magit-"))



 (autoload 'magit-clone "magit-clone" nil t)
(autoload 'magit-clone-regular "magit-clone" "\
Create a clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-shallow "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
With a prefix argument read the DEPTH of the clone;
otherwise use 1.

(fn REPOSITORY DIRECTORY ARGS DEPTH)" t)
(autoload 'magit-clone-shallow-since "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits before DATE, which is read from the
user.

(fn REPOSITORY DIRECTORY ARGS DATE)" t)
(autoload 'magit-clone-shallow-exclude "magit-clone" "\
Create a shallow clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.
Exclude commits reachable from EXCLUDE, which is a
branch or tag read from the user.

(fn REPOSITORY DIRECTORY ARGS EXCLUDE)" t)
(autoload 'magit-clone-bare "magit-clone" "\
Create a bare clone of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-mirror "magit-clone" "\
Create a mirror of REPOSITORY in DIRECTORY.
Then show the status buffer for the new repository.

(fn REPOSITORY DIRECTORY ARGS)" t)
(autoload 'magit-clone-sparse "magit-clone" "\
Clone REPOSITORY into DIRECTORY and create a sparse checkout.

(fn REPOSITORY DIRECTORY ARGS)" t)
(register-definition-prefixes "magit-clone" '("magit-"))



 (autoload 'magit-commit "magit-commit" nil t)
(autoload 'magit-commit-create "magit-commit" "\
Create a new commit.

(fn &optional ARGS)" t)
(autoload 'magit-commit-extend "magit-commit" "\
Amend staged changes to the last commit, without editing its message.

With a prefix argument do not update the committer date; without an
argument update it.  The option `magit-commit-extend-override-date'
can be used to inverse the meaning of the prefix argument.  Called
non-interactively, the optional OVERRIDE-DATE argument controls this
behavior, and the option is of no relevance.

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-amend "magit-commit" "\
Amend staged changes (if any) to the last commit, and edit its message.

(fn &optional ARGS)" t)
(autoload 'magit-commit-reword "magit-commit" "\
Reword the message of the last commit, without amending its tree.

With a prefix argument do not update the committer date; without an
argument update it.  The option `magit-commit-reword-override-date'
can be used to inverse the meaning of the prefix argument.  Called
non-interactively, the optional OVERRIDE-DATE argument controls this
behavior, and the option is of no relevance.

(fn &optional ARGS OVERRIDE-DATE)" t)
(autoload 'magit-commit-fixup "magit-commit" "\
Create a fixup commit, leaving the original commit message untouched.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

During a later rebase, when this commit gets squashed into its targeted
commit, the original message of the targeted commit is used as-is.

In other words, call \"git commit --fixup=COMMIT --no-edit\".

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-squash "magit-commit" "\
Create a squash commit, without the user authoring a commit message.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

During a later rebase, when this commit gets squashed into its targeted
commit, the user is given a chance to edit the original message to take
the changes from the squash commit into account.

In other words, call \"git commit --squash=COMMIT --no-edit\".

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-alter "magit-commit" "\
Create a squash commit, authoring the final commit message now.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

During a later rebase, when this commit gets squashed into its targeted
commit, the original message of the targeted commit is replaced with the
message of this commit, without the user automatically being given a
chance to edit again.

In other words, call \"git commit --fixup=amend:COMMIT --edit\".

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-augment "magit-commit" "\
Create a squash commit, authoring a new temporary commit message.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

During a later rebase, when this commit gets squashed into its targeted
commit, the user is asked to write a final commit message, in a buffer
that starts out containing both the original commit message, as well as
the temporary commit message of the squash commit.

In other words, call \"git commit --squash=COMMIT --edit\".

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-revise "magit-commit" "\
Reword the message of an existing commit, without editing its tree.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

During a later rebase, when this commit gets squashed into its targeted
commit, a combined commit is created which uses the message of the fixup
commit and the tree of the targeted commit.

In other words, call \"git commit --fixup=reword:COMMIT --edit\".

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-fixup "magit-commit" "\
Create a fixup commit, and immediately combine it with its target.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

Leave the original commit message of the targeted commit untouched.

Like `magit-commit-fixup' but also run a `--autofixup' rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-instant-squash "magit-commit" "\
Create a squash commit, and immediately combine it with its target.

If there is a reachable commit at point, target that.  Otherwise prompt
for a commit.  If `magit-commit-squash-confirm' is non-nil, always make
the user explicitly select a commit, in a buffer dedicated to that task.

Turing the rebase phase, when the two commits are being squashed, ask
the user to author the final commit message, based on the original
message of the targeted commit.

Like `magit-commit-squash' but also run a `--autofixup' rebase.

(fn &optional COMMIT ARGS)" t)
(autoload 'magit-commit-reshelve "magit-commit" "\
Change committer (and possibly author) date of the last commit.

The current time is used as the initial minibuffer input and the
original author or committer date is available as the previous
history element.

Both the author and the committer dates are changed, unless one
of the following is true, in which case only the committer date
is updated:
- You are not the author of the commit that is being reshelved.
- The command was invoked with a prefix argument.
- Non-interactively if UPDATE-AUTHOR is nil.

(fn DATE UPDATE-AUTHOR &optional ARGS)" t)
(autoload 'magit-commit-absorb-modules "magit-commit" "\
Spread modified modules across recent commits.

(fn PHASE COMMIT)" t)
 (autoload 'magit-commit-absorb "magit-commit" nil t)
 (autoload 'magit-commit-autofixup "magit-commit" nil t)
(register-definition-prefixes "magit-commit" '("magit-"))



 (autoload 'magit-diff "magit-diff" nil t)
 (autoload 'magit-diff-refresh "magit-diff" nil t)
(autoload 'magit-diff-dwim "magit-diff" "\
Show changes for the thing at point.

For example, if point is on a commit, show the changes introduced by
that commit.  Likewise if point is on the section titled \"Unstaged
changes\", then show those changes in a separate buffer.  Generally
speaking, compare the thing at point with the most logical, trivial
and (in *any* situation) at least potentially useful other thing it
could be compared to.

When the region selects commits, then compare the two commits at
either end.  There are different ways two commits can be compared.
In the buffer showing the diff, you can control how the comparison,
is done, using \"D r\" and \"D f\".

This function does not always show the changes that you might want
to view in any given situation.  You can think of the changes being
shown as the smallest common denominator.  There is no AI involved.
If this command never does what you want, then ignore it, and instead
use the commands that allow you to explicitly specify what you need.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-range "magit-diff" "\
Show differences between two commits.

REV-OR-RANGE should be a range or a single revision.  If it is a
revision, then show changes in the working tree relative to that
revision.  If it is a range, but one side is omitted, then show
changes relative to `HEAD'.

If the region is active, use the revisions on the first and last
line of the region as the two sides of the range.  With a prefix
argument, instead of diffing the revisions, choose a revision to
view changes along, starting at the common ancestor of both
revisions (i.e., use a \"...\" range).

(fn REV-OR-RANGE &optional ARGS FILES)" t)
(autoload 'magit-diff-working-tree "magit-diff" "\
Show changes between the current working tree and the `HEAD' commit.
With a prefix argument show changes between the working tree and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-staged "magit-diff" "\
Show changes between the index and the `HEAD' commit.
With a prefix argument show changes between the index and
a commit read from the minibuffer.

(fn &optional REV ARGS FILES)" t)
(autoload 'magit-diff-unstaged "magit-diff" "\
Show changes between the working tree and the index.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-unmerged "magit-diff" "\
Show changes that are being merged.

(fn &optional ARGS FILES)" t)
(autoload 'magit-diff-while-committing "magit-diff" "\
While committing, show the changes that are about to be committed.
While amending, invoking the command again toggles between
showing just the new changes or all the changes that will
be committed." t)
(autoload 'magit-diff-buffer-file "magit-diff" "\
Show diff for the blob or file visited in the current buffer.

When the buffer visits a blob, then show the respective commit.
When the buffer visits a file, then show the differences between
`HEAD' and the working tree.  In both cases limit the diff to
the file or blob." t)
(autoload 'magit-diff-paths "magit-diff" "\
Show changes between any two files on disk.

(fn A B)" t)
(autoload 'magit-show-commit "magit-diff" "\
Visit the revision at point in another buffer.
If there is no revision at point or with a prefix argument prompt
for a revision.

(fn REV &optional ARGS FILES MODULE)" t)
(register-definition-prefixes "magit-diff" '("magit-"))



 (autoload 'magit-ediff "magit-ediff" nil)
(autoload 'magit-ediff-resolve-all "magit-ediff" "\
Resolve all conflicts in the FILE at point using Ediff.

If there is no file at point or if it doesn't have any unmerged
changes, then prompt for a file.

See info node `(magit) Ediffing' for more information about this
and alternative commands.

(fn FILE)" t)
(autoload 'magit-ediff-resolve-rest "magit-ediff" "\
Resolve outstanding conflicts in the FILE at point using Ediff.

If there is no file at point or if it doesn't have any unmerged
changes, then prompt for a file.

See info node `(magit) Ediffing' for more information about this
and alternative commands.

(fn FILE)" t)
(autoload 'magit-ediff-stage "magit-ediff" "\
Stage and unstage changes to FILE using Ediff.
FILE has to be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-compare "magit-ediff" "\
Compare REVA:FILEA with REVB:FILEB using Ediff.

FILEA and FILEB have to be relative to the top directory of the
repository.  If REVA or REVB is nil, then this stands for the
working tree state.

If the region is active, use the revisions on the first and last
line of the region.  With a prefix argument, instead of diffing
the revisions, choose a revision to view changes along, starting
at the common ancestor of both revisions (i.e., use a \"...\"
range).

(fn REVA REVB FILEA FILEB)" t)
(autoload 'magit-ediff-dwim "magit-ediff" "\
Compare, stage, or resolve using Ediff.
This command tries to guess what file, and what commit or range
the user wants to compare, stage, or resolve using Ediff.  It
might only be able to guess either the file, or range or commit,
in which case the user is asked about the other.  It might not
always guess right, in which case the appropriate `magit-ediff-*'
command has to be used explicitly.  If it cannot read the user's
mind at all, then it asks the user for a command to run." t)
(autoload 'magit-ediff-show-staged "magit-ediff" "\
Show staged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-unstaged "magit-ediff" "\
Show unstaged changes using Ediff.

This only allows looking at the changes; to stage, unstage,
and discard changes using Ediff, use `magit-ediff-stage'.

FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-working-tree "magit-ediff" "\
Show changes between `HEAD' and working tree using Ediff.
FILE must be relative to the top directory of the repository.

(fn FILE)" t)
(autoload 'magit-ediff-show-commit "magit-ediff" "\
Show changes introduced by COMMIT using Ediff.

(fn COMMIT)" t)
(autoload 'magit-ediff-show-stash "magit-ediff" "\
Show changes introduced by STASH using Ediff.
`magit-ediff-show-stash-with-index' controls whether a
three-buffer Ediff is used in order to distinguish changes in the
stash that were staged.

(fn STASH)" t)
(register-definition-prefixes "magit-ediff" '("magit-ediff-"))



 (autoload 'magit-git-mergetool "magit-extras" nil t)
(autoload 'magit-run-git-gui-blame "magit-extras" "\
Run `git gui blame' on the given FILENAME and COMMIT.
Interactively run it for the current file and the `HEAD', with a
prefix or when the current file cannot be determined let the user
choose.  When the current buffer is visiting FILENAME instruct
blame to center around the line point is on.

(fn COMMIT FILENAME &optional LINENUM)" t)
(autoload 'magit-run-git-gui "magit-extras" "\
Run `git gui' for the current git repository." t)
(autoload 'magit-run-gitk "magit-extras" "\
Run `gitk' in the current repository." t)
(autoload 'magit-run-gitk-branches "magit-extras" "\
Run `gitk --branches' in the current repository." t)
(autoload 'magit-run-gitk-all "magit-extras" "\
Run `gitk --all' in the current repository." t)
(autoload 'ido-enter-magit-status "magit-extras" "\
Drop into `magit-status' from file switching.

To make this command available use something like:

  (keymap-set ido-common-completion-map
              \"C-x g\" \\='ido-enter-magit-status)" t)
(autoload 'magit-project-status "magit-extras" "\
Run `magit-status' in the current project's root." t)
(autoload 'magit-dired-jump "magit-extras" "\
Visit file at point using Dired.
With a prefix argument, visit in another window.  If there
is no file at point, then instead visit `default-directory'.

(fn &optional OTHER-WINDOW)" t)
(autoload 'magit-dired-log "magit-extras" "\
Show log for all marked files, or the current file.

(fn &optional FOLLOW)" t)
(autoload 'magit-dired-am-apply-patches "magit-extras" "\
In Dired, apply the marked (or next ARG) files as patches.
If inside a repository, then apply in that.  Otherwise prompt
for a repository.

(fn REPO &optional ARG)" t)
(autoload 'magit-do-async-shell-command "magit-extras" "\
Open FILE with `dired-do-async-shell-command'.
Interactively, open the file at point.

(fn FILE)" t)
(autoload 'magit-previous-line "magit-extras" "\
Like `previous-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects an
area that is larger than the region.  This causes `previous-line'
when invoked while holding the shift key to move up one line and
thereby select two lines.  When invoked inside a hunk body this
command does not move point on the first invocation and thereby
it only selects a single line.  Which inconsistency you prefer
is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-previous-line 'interactive-only '"use `forward-line' with negative argument instead.")
(autoload 'magit-next-line "magit-extras" "\
Like `next-line' but with Magit-specific shift-selection.

Magit's selection mechanism is based on the region but selects
an area that is larger than the region.  This causes `next-line'
when invoked while holding the shift key to move down one line
and thereby select two lines.  When invoked inside a hunk body
this command does not move point on the first invocation and
thereby it only selects a single line.  Which inconsistency you
prefer is a matter of preference.

(fn &optional ARG TRY-VSCROLL)" t)
(function-put 'magit-next-line 'interactive-only 'forward-line)
(autoload 'magit-clean "magit-extras" "\
Remove untracked files from the working tree.
With a prefix argument also remove ignored files,
with two prefix arguments remove ignored files only.

(git clean -f -d [-x|-X])

(fn &optional ARG)" t)
(autoload 'magit-generate-changelog "magit-extras" "\
Insert ChangeLog entries into the current buffer.

The entries are generated from the diff being committed.
If prefix argument, AMENDING, is non-nil, include changes
in HEAD as well as staged changes in the diff to check.

(fn &optional AMENDING)" t)
(autoload 'magit-add-change-log-entry "magit-extras" "\
Find change log file and add date entry and item for current change.
This differs from `add-change-log-entry' (which see) in that
it acts on the current hunk in a Magit buffer instead of on
a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME OTHER-WINDOW)" t)
(autoload 'magit-add-change-log-entry-other-window "magit-extras" "\
Find change log file in other window and add entry and item.
This differs from `add-change-log-entry-other-window' (which see)
in that it acts on the current hunk in a Magit buffer instead of
on a position in a file-visiting buffer.

(fn &optional WHOAMI FILE-NAME)" t)
(autoload 'magit-edit-line-commit "magit-extras" "\
Edit the commit that added the current line.

With a prefix argument edit the commit that removes the line,
if any.  The commit is determined using `git blame' and made
editable using `git rebase --interactive' if it is reachable
from `HEAD', or by checking out the commit (or a branch that
points at it) otherwise.

(fn &optional TYPE)" t)
(autoload 'magit-diff-edit-hunk-commit "magit-extras" "\
From a hunk, edit the respective commit and visit the file.

First visit the file being modified by the hunk at the correct
location using `magit-diff-visit-file'.  This actually visits a
blob.  When point is on a diff header, not within an individual
hunk, then this visits the blob the first hunk is about.

Then invoke `magit-edit-line-commit', which uses an interactive
rebase to make the commit editable, or if that is not possible
because the commit is not reachable from `HEAD' by checking out
that commit directly.  This also causes the actual worktree file
to be visited.

Neither the blob nor the file buffer are killed when finishing
the rebase.  If that is undesirable, then it might be better to
use `magit-rebase-edit-commit' instead of this command.

(fn FILE)" t)
(autoload 'magit-reshelve-since "magit-extras" "\
Change the author and committer dates of the commits since REV.

Ask the user for the first reachable commit whose dates should
be changed.  Then read the new date for that commit.  The initial
minibuffer input and the previous history element offer good
values.  The next commit will be created one minute later and so
on.

This command is only intended for interactive use and should only
be used on highly rearranged and unpublished history.

If KEYID is non-nil, then use that to sign all reshelved commits.
Interactively use the value of the \"--gpg-sign\" option in the
list returned by `magit-rebase-arguments'.

(fn REV KEYID)" t)
(autoload 'magit-pop-revision-stack "magit-extras" "\
Insert a representation of a revision into the current buffer.

Pop a revision from the `magit-revision-stack' and insert it into
the current buffer according to `magit-pop-revision-stack-format'.
Revisions can be put on the stack using `magit-copy-section-value'
and `magit-copy-buffer-revision'.

If the stack is empty or with a prefix argument, instead read a
revision in the minibuffer.  By using the minibuffer history this
allows selecting an item which was popped earlier or to insert an
arbitrary reference or revision without first pushing it onto the
stack.

When reading the revision from the minibuffer, then it might not
be possible to guess the correct repository.  When this command
is called inside a repository (e.g., while composing a commit
message), then that repository is used.  Otherwise (e.g., while
composing an email) then the repository recorded for the top
element of the stack is used (even though we insert another
revision).  If not called inside a repository and with an empty
stack, or with two prefix arguments, then read the repository in
the minibuffer too.

(fn REV TOPLEVEL)" t)
(autoload 'magit-copy-section-value "magit-extras" "\
Save the value of the current section for later use.

Save the section value to the `kill-ring', and, provided that
the current section is a commit, branch, or tag section, push
the (referenced) revision to the `magit-revision-stack' for use
with `magit-pop-revision-stack'.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'.

When the current section is a branch or a tag, and a prefix
argument is used, then save the revision at its tip to the
`kill-ring' instead of the reference name.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.  If a prefix argument is used and the region is within
a hunk, then strip the diff marker column and keep only either
the added or removed lines, depending on the sign of the prefix
argument.

(fn ARG)" t)
(autoload 'magit-copy-buffer-revision "magit-extras" "\
Save the revision of the current buffer for later use.

Save the revision shown in the current buffer to the `kill-ring'
and push it to the `magit-revision-stack'.

This command is mainly intended for use in `magit-revision-mode'
buffers, the only buffers where it is always unambiguous exactly
which revision should be saved.

Most other Magit buffers usually show more than one revision, in
some way or another, so this command has to select one of them,
and that choice might not always be the one you think would have
been the best pick.

In such buffers it is often more useful to save the value of
the current section instead, using `magit-copy-section-value'.

When the region is active, then save that to the `kill-ring',
like `kill-ring-save' would, instead of behaving as described
above.

When `magit-copy-revision-abbreviated' is non-nil, save the
abbreviated revision to the `kill-ring' and the
`magit-revision-stack'." t)
(autoload 'magit-display-repository-buffer "magit-extras" "\
Display a Magit buffer belonging to the current Git repository.
The buffer is displayed using `magit-display-buffer', which see.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-window "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-switch-to-repository-buffer-other-frame "magit-extras" "\
Switch to a Magit buffer belonging to the current Git repository.

(fn BUFFER)" t)
(autoload 'magit-abort-dwim "magit-extras" "\
Abort current operation.
Depending on the context, this will abort a merge, a rebase, a
patch application, a cherry-pick, a revert, or a bisect." t)
(autoload 'magit-back-to-indentation "magit-extras" "\
Move point to the first non-whitespace character on this line.
In Magit diffs, also skip over - and + at the beginning of the line." t)
(register-definition-prefixes "magit-extras" '("magit-"))



 (autoload 'magit-fetch "magit-fetch" nil t)
 (autoload 'magit-fetch-from-pushremote "magit-fetch" nil t)
 (autoload 'magit-fetch-from-upstream "magit-fetch" nil t)
(autoload 'magit-fetch-other "magit-fetch" "\
Fetch from another repository.

(fn REMOTE ARGS)" t)
(autoload 'magit-fetch-branch "magit-fetch" "\
Fetch a BRANCH from a REMOTE.

(fn REMOTE BRANCH ARGS)" t)
(autoload 'magit-fetch-refspec "magit-fetch" "\
Fetch a REFSPEC from a REMOTE.

(fn REMOTE REFSPEC ARGS)" t)
(autoload 'magit-fetch-all "magit-fetch" "\
Fetch from all remotes.

(fn ARGS)" t)
(autoload 'magit-fetch-all-prune "magit-fetch" "\
Fetch from all remotes, and prune.
Prune remote tracking branches for branches that have been
removed on the respective remote." t)
(autoload 'magit-fetch-all-no-prune "magit-fetch" "\
Fetch from all remotes." t)
 (autoload 'magit-fetch-modules "magit-fetch" nil t)
(register-definition-prefixes "magit-fetch" '("magit-"))



(autoload 'magit-find-file "magit-files" "\
View FILE from REV.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go
to the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-window "magit-files" "\
View FILE from REV, in another window.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
(autoload 'magit-find-file-other-frame "magit-files" "\
View FILE from REV, in another frame.
Switch to a buffer visiting blob REV:FILE, creating one if none
already exists.  If prior to calling this command the current
buffer and/or cursor position is about the same file, then go to
the line and column corresponding to that location.

(fn REV FILE)" t)
 (autoload 'magit-file-dispatch "magit" nil t)
(autoload 'magit-blob-visit-file "magit-files" "\
View the file from the worktree corresponding to the current blob.
When visiting a blob or the version from the index, then go to
the same location in the respective file in the working tree." t)
(autoload 'magit-file-checkout "magit-files" "\
Checkout FILE from REV.

(fn REV FILE)" t)
(register-definition-prefixes "magit-files" '("lsp" "magit-"))



(register-definition-prefixes "magit-git" '("magit-"))



 (autoload 'magit-gitignore "magit-gitignore" nil t)
(autoload 'magit-gitignore-in-topdir "magit-gitignore" "\
Add the Git ignore RULE to the top-level \".gitignore\" file.
Since this file is tracked, it is shared with other clones of the
repository.  Also stage the file.

(fn RULE)" t)
(autoload 'magit-gitignore-in-subdir "magit-gitignore" "\
Add the Git ignore RULE to a \".gitignore\" file in DIRECTORY.
Prompt the user for a directory and add the rule to the
\".gitignore\" file in that directory.  Since such files are
tracked, they are shared with other clones of the repository.
Also stage the file.

(fn RULE DIRECTORY)" t)
(autoload 'magit-gitignore-in-gitdir "magit-gitignore" "\
Add the Git ignore RULE to \"$GIT_DIR/info/exclude\".
Rules in that file only affects this clone of the repository.

(fn RULE)" t)
(autoload 'magit-gitignore-on-system "magit-gitignore" "\
Add the Git ignore RULE to the file specified by `core.excludesFile'.
Rules that are defined in that file affect all local repositories.

(fn RULE)" t)
(autoload 'magit-skip-worktree "magit-gitignore" "\
Call \"git update-index --skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-skip-worktree "magit-gitignore" "\
Call \"git update-index --no-skip-worktree -- FILE\".

(fn FILE)" t)
(autoload 'magit-assume-unchanged "magit-gitignore" "\
Call \"git update-index --assume-unchanged -- FILE\".

(fn FILE)" t)
(autoload 'magit-no-assume-unchanged "magit-gitignore" "\
Call \"git update-index --no-assume-unchanged -- FILE\".

(fn FILE)" t)
(register-definition-prefixes "magit-gitignore" '("magit-"))



 (autoload 'magit-log "magit-log" nil t)
 (autoload 'magit-log-refresh "magit-log" nil t)
(autoload 'magit-log-current "magit-log" "\
Show log for the current branch.
When `HEAD' is detached or with a prefix argument show log for
one or more revs read from the minibuffer.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-head "magit-log" "\
Show log for `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-related "magit-log" "\
Show log for the current branch, its upstream and its push target.
When the upstream is a local branch, then also show its own
upstream.  When `HEAD' is detached, then show log for that, the
previously checked out branch and its upstream and push-target.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-other "magit-log" "\
Show log for one or more revs read from the minibuffer.
The user can input any revision or revisions separated by a
space, or even ranges, but only branches and tags, and a
representation of the commit at point, are available as
completion candidates.

(fn REVS &optional ARGS FILES)" t)
(autoload 'magit-log-branches "magit-log" "\
Show log for all local branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-matching-branches "magit-log" "\
Show log for all branches matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-matching-tags "magit-log" "\
Show log for all tags matching PATTERN and `HEAD'.

(fn PATTERN &optional ARGS FILES)" t)
(autoload 'magit-log-all-branches "magit-log" "\
Show log for all local and remote branches and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-all "magit-log" "\
Show log for all references and `HEAD'.

(fn &optional ARGS FILES)" t)
(autoload 'magit-log-buffer-file "magit-log" "\
Show log for the blob or file visited in the current buffer.
With a prefix argument or when `--follow' is an active log
argument, then follow renames.  When the region is active,
restrict the log to the lines that the region touches.

(fn &optional FOLLOW BEG END)" t)
(autoload 'magit-log-trace-definition "magit-log" "\
Show log for the definition at point.

(fn FILE FN REV)" t)
(autoload 'magit-log-merged "magit-log" "\
Show log for the merge of COMMIT into BRANCH.

More precisely, find merge commit M that brought COMMIT into
BRANCH, and show the log of the range \"M^1..M\". If COMMIT is
directly on BRANCH, then show approximately
`magit-log-merged-commit-count' surrounding commits instead.

This command requires git-when-merged, which is available from
https://github.com/mhagger/git-when-merged.

(fn COMMIT BRANCH &optional ARGS FILES)" t)
(autoload 'magit-log-move-to-parent "magit-log" "\
Move to the Nth parent of the current commit.

(fn &optional N)" t)
 (autoload 'magit-shortlog "magit-log" nil t)
(autoload 'magit-shortlog-since "magit-log" "\
Show a history summary for commits since REV.

(fn REV ARGS)" t)
(autoload 'magit-shortlog-range "magit-log" "\
Show a history summary for commit or range REV-OR-RANGE.

(fn REV-OR-RANGE ARGS)" t)
(autoload 'magit-cherry "magit-log" "\
Show commits in a branch that are not merged in the upstream branch.

(fn HEAD UPSTREAM)" t)
(register-definition-prefixes "magit-log" '("magit-"))



(register-definition-prefixes "magit-margin" '("magit-"))



 (autoload 'magit-merge "magit" nil t)
(autoload 'magit-merge-plain "magit-merge" "\
Merge commit REV into the current branch; using default message.

Unless there are conflicts or a prefix argument is used create a
merge commit using a generic commit message and without letting
the user inspect the result.  With a prefix argument pretend the
merge failed to give the user the opportunity to inspect the
merge.

(git merge --no-edit|--no-commit [ARGS] REV)

(fn REV &optional ARGS NOCOMMIT)" t)
(autoload 'magit-merge-editmsg "magit-merge" "\
Merge commit REV into the current branch; and edit message.
Perform the merge and prepare a commit message but let the user
edit it.

(git merge --edit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-nocommit "magit-merge" "\
Merge commit REV into the current branch; pretending it failed.
Pretend the merge failed to give the user the opportunity to
inspect the merge and change the commit message.

(git merge --no-commit --no-ff [ARGS] REV)

(fn REV &optional ARGS)" t)
(autoload 'magit-merge-into "magit-merge" "\
Merge the current branch into BRANCH and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-absorb "magit-merge" "\
Merge BRANCH into the current branch and remove the former.

Before merging, force push the source branch to its push-remote,
provided the respective remote branch already exists, ensuring
that the respective pull-request (if any) won't get stuck on some
obsolete version of the commits that are being merged.  Finally
if `forge-branch-pullreq' was used to create the merged branch,
then also remove the respective remote branch.

(fn BRANCH &optional ARGS)" t)
(autoload 'magit-merge-squash "magit-merge" "\
Squash commit REV into the current branch; don't create a commit.

(git merge --squash REV)

(fn REV)" t)
(autoload 'magit-merge-preview "magit-merge" "\
Preview result of merging REV into the current branch.

(fn REV)" t)
(autoload 'magit-merge-abort "magit-merge" "\
Abort the current merge operation.

(git merge --abort)" t)
(register-definition-prefixes "magit-merge" '("magit-"))



(autoload 'magit-info "magit-mode" "\
Visit the Magit manual." t)
(register-definition-prefixes "magit-mode" '("magit-"))



 (autoload 'magit-notes "magit" nil t)
(register-definition-prefixes "magit-notes" '("magit-notes-"))



 (autoload 'magit-patch "magit-patch" nil t)
 (autoload 'magit-patch-create "magit-patch" nil t)
 (autoload 'magit-patch-apply "magit-patch" nil t)
(autoload 'magit-patch-save "magit-patch" "\
Write current diff into patch FILE.

What arguments are used to create the patch depends on the value
of `magit-patch-save-arguments' and whether a prefix argument is
used.

If the value is the symbol `buffer', then use the same arguments
as the buffer.  With a prefix argument use no arguments.

If the value is a list beginning with the symbol `exclude', then
use the same arguments as the buffer except for those matched by
entries in the cdr of the list.  The comparison is done using
`string-prefix-p'.  With a prefix argument use the same arguments
as the buffer.

If the value is a list of strings (including the empty list),
then use those arguments.  With a prefix argument use the same
arguments as the buffer.

Of course the arguments that are required to actually show the
same differences as those shown in the buffer are always used.

(fn FILE &optional ARG)" t)
(autoload 'magit-request-pull "magit-patch" "\
Request upstream to pull from your public repository.

URL is the url of your publicly accessible repository.
START is a commit that already is in the upstream repository.
END is the last commit, usually a branch name, which upstream
is asked to pull.  START has to be reachable from that commit.

(fn URL START END)" t)
(register-definition-prefixes "magit-patch" '("magit-"))



(register-definition-prefixes "magit-process" '("magit-"))



 (autoload 'magit-pull "magit-pull" nil t)
 (autoload 'magit-pull-from-pushremote "magit-pull" nil t)
 (autoload 'magit-pull-from-upstream "magit-pull" nil t)
(autoload 'magit-pull-branch "magit-pull" "\
Pull from a branch read in the minibuffer.

(fn SOURCE ARGS)" t)
(register-definition-prefixes "magit-pull" '("magit-pull-"))



 (autoload 'magit-push "magit-push" nil t)
 (autoload 'magit-push-current-to-pushremote "magit-push" nil t)
 (autoload 'magit-push-current-to-upstream "magit-push" nil t)
(autoload 'magit-push-current "magit-push" "\
Push the current branch to a branch read in the minibuffer.

(fn TARGET ARGS)" t)
(autoload 'magit-push-other "magit-push" "\
Push an arbitrary branch or commit somewhere.
Both the source and the target are read in the minibuffer.

(fn SOURCE TARGET ARGS)" t)
(autoload 'magit-push-refspecs "magit-push" "\
Push one or multiple REFSPECS to a REMOTE.
Both the REMOTE and the REFSPECS are read in the minibuffer.  To
use multiple REFSPECS, separate them with commas.  Completion is
only available for the part before the colon, or when no colon
is used.

(fn REMOTE REFSPECS ARGS)" t)
(autoload 'magit-push-matching "magit-push" "\
Push all matching branches to another repository.
If multiple remotes exist, then read one from the user.
If just one exists, use that without requiring confirmation.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tags "magit-push" "\
Push all tags to another repository.
If only one remote exists, then push to that.  Otherwise prompt
for a remote, offering the remote configured for the current
branch as default.

(fn REMOTE &optional ARGS)" t)
(autoload 'magit-push-tag "magit-push" "\
Push a tag to another repository.

(fn TAG REMOTE &optional ARGS)" t)
(autoload 'magit-push-notes-ref "magit-push" "\
Push a notes ref to another repository.

(fn REF REMOTE &optional ARGS)" t)
 (autoload 'magit-push-implicitly "magit-push" nil t)
 (autoload 'magit-push-to-remote "magit-push" nil t)
(register-definition-prefixes "magit-push" '("magit-"))



(autoload 'magit-reflog-current "magit-reflog" "\
Display the reflog of the current branch.
If `HEAD' is detached, then show the reflog for that instead." t)
(autoload 'magit-reflog-other "magit-reflog" "\
Display the reflog of a branch or another ref.

(fn REF)" t)
(autoload 'magit-reflog-head "magit-reflog" "\
Display the `HEAD' reflog." t)
(register-definition-prefixes "magit-reflog" '("magit-reflog-"))



 (autoload 'magit-show-refs "magit-refs" nil t)
(autoload 'magit-show-refs-head "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with `HEAD'.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-current "magit-refs" "\
List and compare references in a dedicated buffer.
Compare with the current branch or `HEAD' if it is detached.

(fn &optional ARGS)" t)
(autoload 'magit-show-refs-other "magit-refs" "\
List and compare references in a dedicated buffer.
Compared with a branch read from the user.

(fn &optional REF ARGS)" t)
(register-definition-prefixes "magit-refs" '("magit-"))



 (autoload 'magit-remote "magit-remote" nil t)
(autoload 'magit-remote-add "magit-remote" "\
Add a remote named REMOTE and fetch it.

(fn REMOTE URL &optional ARGS)" t)
(autoload 'magit-remote-rename "magit-remote" "\
Rename the remote named OLD to NEW.

(fn OLD NEW)" t)
(autoload 'magit-remote-remove "magit-remote" "\
Delete the remote named REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune "magit-remote" "\
Remove stale remote-tracking branches for REMOTE.

(fn REMOTE)" t)
(autoload 'magit-remote-prune-refspecs "magit-remote" "\
Remove stale refspecs for REMOTE.

A refspec is stale if there no longer exists at least one branch
on the remote that would be fetched due to that refspec.  A stale
refspec is problematic because its existence causes Git to refuse
to fetch according to the remaining non-stale refspecs.

If only stale refspecs remain, then offer to either delete the
remote or to replace the stale refspecs with the default refspec.

Also remove the remote-tracking branches that were created due to
the now stale refspecs.  Other stale branches are not removed.

(fn REMOTE)" t)
(autoload 'magit-remote-set-head "magit-remote" "\
Set the local representation of REMOTE's default branch.
Query REMOTE and set the symbolic-ref refs/remotes/<remote>/HEAD
accordingly.  With a prefix argument query for the branch to be
used, which allows you to select an incorrect value if you fancy
doing that.

(fn REMOTE &optional BRANCH)" t)
(autoload 'magit-remote-unset-head "magit-remote" "\
Unset the local representation of REMOTE's default branch.
Delete the symbolic-ref \"refs/remotes/<remote>/HEAD\".

(fn REMOTE)" t)
 (autoload 'magit-update-default-branch "magit-remote" nil t)
(autoload 'magit-remote-unshallow "magit-remote" "\
Convert a shallow remote into a full one.
If only a single refspec is set and it does not contain a
wildcard, then also offer to replace it with the standard
refspec.

(fn REMOTE)" t)
 (autoload 'magit-remote-configure "magit-remote" nil t)
(register-definition-prefixes "magit-remote" '("magit-"))



(autoload 'magit-list-repositories "magit-repos" "\
Display a list of repositories.

Use the option `magit-repository-directories' to control which
repositories are displayed." t)
(register-definition-prefixes "magit-repos" '("magit-"))



 (autoload 'magit-reset "magit" nil t)
(autoload 'magit-reset-mixed "magit-reset" "\
Reset the `HEAD' and index to COMMIT, but not the working tree.

(git reset --mixed COMMIT)

(fn COMMIT)" t)
(autoload 'magit-reset-soft "magit-reset" "\
Reset the `HEAD' to COMMIT, but not the index and working tree.

(git reset --soft REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-hard "magit-reset" "\
Reset the `HEAD', index, and working tree to COMMIT.

(git reset --hard REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-keep "magit-reset" "\
Reset the `HEAD' and index to COMMIT, while keeping uncommitted changes.

(git reset --keep REVISION)

(fn COMMIT)" t)
(autoload 'magit-reset-index "magit-reset" "\
Reset the index to COMMIT.
Keep the `HEAD' and working tree as-is, so if COMMIT refers to the
head this effectively unstages all changes.

(git reset COMMIT .)

(fn COMMIT)" t)
(autoload 'magit-reset-worktree "magit-reset" "\
Reset the worktree to COMMIT.
Keep the `HEAD' and index as-is.

(fn COMMIT)" t)
(autoload 'magit-reset-quickly "magit-reset" "\
Reset the `HEAD' and index to COMMIT, and possibly the working tree.
With a prefix argument reset the working tree otherwise don't.

(git reset --mixed|--hard COMMIT)

(fn COMMIT &optional HARD)" t)
(register-definition-prefixes "magit-reset" '("magit-reset-"))



(autoload 'magit-sequencer-continue "magit-sequence" "\
Resume the current cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-skip "magit-sequence" "\
Skip the stopped at commit during a cherry-pick or revert sequence." t)
(autoload 'magit-sequencer-abort "magit-sequence" "\
Abort the current cherry-pick or revert sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-cherry-pick "magit-sequence" nil t)
(autoload 'magit-cherry-copy "magit-sequence" "\
Copy COMMITS from another branch onto the current branch.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then pick all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-apply "magit-sequence" "\
Apply the changes in COMMITS but do not commit them.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then apply all of them,
without prompting.

(fn COMMITS &optional ARGS)" t)
(autoload 'magit-cherry-harvest "magit-sequence" "\
Move COMMITS from another BRANCH onto the current branch.
Remove the COMMITS from BRANCH and stay on the current branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-donate "magit-sequence" "\
Move COMMITS from the current branch onto another existing BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.  `HEAD' is allowed to be detached initially.

(fn COMMITS BRANCH &optional ARGS)" t)
(autoload 'magit-cherry-spinout "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and stay on that branch.
If a conflict occurs, then you have to fix that and finish the
process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
(autoload 'magit-cherry-spinoff "magit-sequence" "\
Move COMMITS from the current branch onto a new BRANCH.
Remove COMMITS from the current branch and checkout BRANCH.
If a conflict occurs, then you have to fix that and finish
the process manually.

(fn COMMITS BRANCH START-POINT &optional ARGS)" t)
 (autoload 'magit-revert "magit-sequence" nil t)
(autoload 'magit-revert-and-commit "magit-sequence" "\
Revert COMMIT by creating a new commit.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
(autoload 'magit-revert-no-commit "magit-sequence" "\
Revert COMMIT by applying it in reverse to the worktree.
Prompt for a commit, defaulting to the commit at point.  If
the region selects multiple commits, then revert all of them,
without prompting.

(fn COMMIT &optional ARGS)" t)
 (autoload 'magit-am "magit-sequence" nil t)
(autoload 'magit-am-apply-patches "magit-sequence" "\
Apply the patches FILES.

(fn &optional FILES ARGS)" t)
(autoload 'magit-am-apply-maildir "magit-sequence" "\
Apply the patches from MAILDIR.

(fn &optional MAILDIR ARGS)" t)
(autoload 'magit-am-continue "magit-sequence" "\
Resume the current patch applying sequence." t)
(autoload 'magit-am-skip "magit-sequence" "\
Skip the stopped at patch during a patch applying sequence." t)
(autoload 'magit-am-abort "magit-sequence" "\
Abort the current patch applying sequence.
This discards all changes made since the sequence started." t)
 (autoload 'magit-rebase "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-pushremote "magit-sequence" nil t)
 (autoload 'magit-rebase-onto-upstream "magit-sequence" nil t)
(autoload 'magit-rebase-branch "magit-sequence" "\
Rebase the current branch onto a branch read in the minibuffer.
All commits that are reachable from `HEAD' but not from the
selected branch TARGET are being rebased.

(fn TARGET ARGS)" t)
(autoload 'magit-rebase-subset "magit-sequence" "\
Rebase a subset of the current branch's history onto a new base.
Rebase commits from START to `HEAD' onto NEWBASE.
START has to be selected from a list of recent commits.

(fn NEWBASE START ARGS)" t)
(autoload 'magit-rebase-interactive "magit-sequence" "\
Start an interactive rebase sequence.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-autosquash "magit-sequence" "\
Combine squash and fixup commits with their intended targets.

(fn ARGS)" t)
(autoload 'magit-rebase-edit-commit "magit-sequence" "\
Edit a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-reword-commit "magit-sequence" "\
Reword a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-remove-commit "magit-sequence" "\
Remove a single older commit using rebase.

(fn COMMIT ARGS)" t)
(autoload 'magit-rebase-continue "magit-sequence" "\
Restart the current rebasing operation.
In some cases this pops up a commit message buffer for you do
edit.  With a prefix argument the old message is reused as-is.

(fn &optional NOEDIT)" t)
(autoload 'magit-rebase-skip "magit-sequence" "\
Skip the current commit and restart the current rebase operation." t)
(autoload 'magit-rebase-edit "magit-sequence" "\
Edit the todo list of the current rebase operation." t)
(autoload 'magit-rebase-abort "magit-sequence" "\
Abort the current rebase operation, restoring the original branch." t)
(register-definition-prefixes "magit-sequence" '("magit-"))



 (autoload 'magit-sparse-checkout "magit-sparse-checkout" nil t)
(autoload 'magit-sparse-checkout-enable "magit-sparse-checkout" "\
Convert the working tree to a sparse checkout.

(fn &optional ARGS)" t)
(autoload 'magit-sparse-checkout-set "magit-sparse-checkout" "\
Restrict working tree to DIRECTORIES.
To extend rather than override the currently configured
directories, call `magit-sparse-checkout-add' instead.

(fn DIRECTORIES)" t)
(autoload 'magit-sparse-checkout-add "magit-sparse-checkout" "\
Add DIRECTORIES to the working tree.
To override rather than extend the currently configured
directories, call `magit-sparse-checkout-set' instead.

(fn DIRECTORIES)" t)
(autoload 'magit-sparse-checkout-reapply "magit-sparse-checkout" "\
Reapply the sparse checkout rules to the working tree.
Some operations such as merging or rebasing may need to check out
files that aren't included in the sparse checkout.  Call this
command to reset to the sparse checkout state." t)
(autoload 'magit-sparse-checkout-disable "magit-sparse-checkout" "\
Convert sparse checkout to full checkout.
Note that disabling the sparse checkout does not clear the
configured directories.  Call `magit-sparse-checkout-enable' to
restore the previous sparse checkout." t)
(register-definition-prefixes "magit-sparse-checkout" '("magit-sparse-checkout-"))



 (autoload 'magit-stash "magit-stash" nil t)
(autoload 'magit-stash-both "magit-stash" "\
Create a stash of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-index "magit-stash" "\
Create a stash of the index only.
Unstaged and untracked changes are not stashed.  The stashed
changes are applied in reverse to both the index and the
worktree.  This command can fail when the worktree is not clean.
Applying the resulting stash has the inverse effect.

(fn MESSAGE)" t)
(autoload 'magit-stash-worktree "magit-stash" "\
Create a stash of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-stash-keep-index "magit-stash" "\
Create a stash of the index and working tree, keeping index intact.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn MESSAGE &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-both "magit-stash" "\
Create a snapshot of the index and working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
(autoload 'magit-snapshot-index "magit-stash" "\
Create a snapshot of the index only.
Unstaged and untracked changes are not stashed." t)
(autoload 'magit-snapshot-worktree "magit-stash" "\
Create a snapshot of unstaged changes in the working tree.
Untracked files are included according to infix arguments.
One prefix argument is equivalent to `--include-untracked'
while two prefix arguments are equivalent to `--all'.

(fn &optional INCLUDE-UNTRACKED)" t)
 (autoload 'magit-stash-push "magit-stash" nil t)
(autoload 'magit-stash-apply "magit-stash" "\
Apply a stash to the working tree.

When using a Git release before v2.38.0, simply run \"git stash
apply\" or with a prefix argument \"git stash apply --index\".

When using Git v2.38.0 or later, behave more intelligently:

First try \"git stash apply --index\", which tries to preserve the
index stored in the stash, if any.  This may fail because applying
the stash could result in conflicts and those have to be stored in
the index, making it impossible to also store the stash's index
there.

If \"git stash\" fails, then potentially fall back to using \"git
apply\".  If the stash does not touch any unstaged files, then pass
\"--3way\" to that command.  Otherwise ask the user whether to use
that argument or \"--reject\".  Customize `magit-no-confirm' if you
want to fall back to using \"--3way\", without being prompted.

(fn STASH)" t)
(autoload 'magit-stash-pop "magit-stash" "\
Apply a stash to the working tree, on success remove it from stash list.

When using a Git release before v2.38.0, simply run \"git stash
pop\" or with a prefix argument \"git stash pop --index\".

When using Git v2.38.0 or later, behave more intelligently:

First try \"git stash apply --index\", which tries to preserve the
index stored in the stash, if any.  This may fail because applying
the stash could result in conflicts and those have to be stored in
the index, making it impossible to also store the stash's index
there.

If \"git stash\" fails, then potentially fall back to using \"git
apply\".  If the stash does not touch any unstaged files, then pass
\"--3way\" to that command.  Otherwise ask the user whether to use
that argument or \"--reject\".  Customize `magit-no-confirm' if you
want to fall back to using \"--3way\", without being prompted.

(fn STASH)" t)
(autoload 'magit-stash-drop "magit-stash" "\
Remove a stash from the stash list.
When the region is active offer to drop all contained stashes.

(fn STASH)" t)
(autoload 'magit-stash-clear "magit-stash" "\
Remove all stashes saved in REF's reflog by deleting REF.

(fn REF)" t)
(autoload 'magit-stash-branch "magit-stash" "\
Create and checkout a new BRANCH from an existing STASH.
The new branch starts at the commit that was current when the
stash was created.  If the stash applies cleanly, then drop it.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-branch-here "magit-stash" "\
Create and checkout a new BRANCH from an existing STASH.
Use the current branch or `HEAD' as the starting-point of BRANCH.
Then apply STASH, dropping it if it applies cleanly.

(fn STASH BRANCH)" t)
(autoload 'magit-stash-format-patch "magit-stash" "\
Create a patch from STASH.

(fn STASH)" t)
(autoload 'magit-stash-list "magit-stash" "\
List all stashes in a buffer." t)
(autoload 'magit-stash-show "magit-stash" "\
Show all diffs of a stash in a buffer.

(fn STASH &optional ARGS FILES)" t)
(register-definition-prefixes "magit-stash" '("magit-"))



(autoload 'magit-init "magit-status" "\
Initialize a Git repository, then show its status.

If the directory is below an existing repository, then the user
has to confirm that a new one should be created inside.  If the
directory is the root of the existing repository, then the user
has to confirm that it should be reinitialized.

Non-interactively DIRECTORY is (re-)initialized unconditionally.

(fn DIRECTORY)" t)
(autoload 'magit-status "magit-status" "\
Show the status of the current Git repository in a buffer.

If the current directory isn't located within a Git repository,
then prompt for an existing repository or an arbitrary directory,
depending on option `magit-repository-directories', and show the
status of the selected repository instead.

* If that option specifies any existing repositories, then offer
  those for completion and show the status buffer for the
  selected one.

* Otherwise read an arbitrary directory using regular file-name
  completion.  If the selected directory is the top-level of an
  existing working tree, then show the status buffer for that.

* Otherwise offer to initialize the selected directory as a new
  repository.  After creating the repository show its status
  buffer.

These fallback behaviors can also be forced using one or more
prefix arguments:

* With two prefix arguments (or more precisely a numeric prefix
  value of 16 or greater) read an arbitrary directory and act on
  it as described above.  The same could be accomplished using
  the command `magit-init'.

* With a single prefix argument read an existing repository, or
  if none can be found based on `magit-repository-directories',
  then fall back to the same behavior as with two prefix
  arguments.

(fn &optional DIRECTORY CACHE)" t)
(defalias 'magit #'magit-status "\
Begin using Magit.

This alias for `magit-status' exists for better discoverability.

Instead of invoking this alias for `magit-status' using
\"M-x magit RET\", you should bind a key to `magit-status'
and read the info node `(magit)Getting Started', which
also contains other useful hints.")
(autoload 'magit-status-here "magit-status" "\
Like `magit-status' but with non-nil `magit-status-goto-file-position'." t)
(autoload 'magit-status-quick "magit-status" "\
Show the status of the current Git repository, maybe without refreshing.

If the status buffer of the current Git repository exists but
isn't being displayed in the selected frame, then display it
without refreshing it.

If the status buffer is being displayed in the selected frame,
then also refresh it.

Prefix arguments have the same meaning as for `magit-status',
and additionally cause the buffer to be refresh.

To use this function instead of `magit-status', add this to your
init file: (global-set-key (kbd \"C-x g\") \\='magit-status-quick)." t)
(autoload 'magit-status-setup-buffer "magit-status" "\


(fn &optional DIRECTORY)")
(register-definition-prefixes "magit-status" '("magit-"))



 (autoload 'magit-submodule "magit-submodule" nil t)
 (autoload 'magit-submodule-add "magit-submodule" nil t)
(autoload 'magit-submodule-read-name-for-path "magit-submodule" "\


(fn PATH &optional PREFER-SHORT)")
 (autoload 'magit-submodule-register "magit-submodule" nil t)
 (autoload 'magit-submodule-populate "magit-submodule" nil t)
 (autoload 'magit-submodule-update "magit-submodule" nil t)
 (autoload 'magit-submodule-synchronize "magit-submodule" nil t)
 (autoload 'magit-submodule-unpopulate "magit-submodule" nil t)
(autoload 'magit-submodule-remove "magit-submodule" "\
Unregister MODULES and remove their working directories.

For safety reasons, do not remove the gitdirs and if a module has
uncommitted changes, then do not remove it at all.  If a module's
gitdir is located inside the working directory, then move it into
the gitdir of the superproject first.

With the \"--force\" argument offer to remove dirty working
directories and with a prefix argument offer to delete gitdirs.
Both actions are very dangerous and have to be confirmed.  There
are additional safety precautions in place, so you might be able
to recover from making a mistake here, but don't count on it.

(fn MODULES ARGS TRASH-GITDIRS)" t)
(autoload 'magit-insert-modules "magit-submodule" "\
Insert submodule sections.
Hook `magit-module-sections-hook' controls which module sections
are inserted, and option `magit-module-sections-nested' controls
whether they are wrapped in an additional section.")
(autoload 'magit-insert-modules-overview "magit-submodule" "\
Insert sections for all modules.
For each section insert the path and the output of `git describe --tags',
or, failing that, the abbreviated HEAD commit hash.")
(autoload 'magit-insert-modules-unpulled-from-upstream "magit-submodule" "\
Insert sections for modules that haven't been pulled from the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpulled-from-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pulled from the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-upstream "magit-submodule" "\
Insert sections for modules that haven't been pushed to the upstream.
These sections can be expanded to show the respective commits.")
(autoload 'magit-insert-modules-unpushed-to-pushremote "magit-submodule" "\
Insert sections for modules that haven't been pushed to the push-remote.
These sections can be expanded to show the respective commits.")
(autoload 'magit-list-submodules "magit-submodule" "\
Display a list of the current repository's populated submodules." t)
(register-definition-prefixes "magit-submodule" '("magit-"))



 (autoload 'magit-subtree "magit-subtree" nil t)
 (autoload 'magit-subtree-import "magit-subtree" nil t)
 (autoload 'magit-subtree-export "magit-subtree" nil t)
(autoload 'magit-subtree-add "magit-subtree" "\
Add REF from REPOSITORY as a new subtree at PREFIX.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-add-commit "magit-subtree" "\
Add COMMIT as a new subtree at PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-merge "magit-subtree" "\
Merge COMMIT into the PREFIX subtree.

(fn PREFIX COMMIT ARGS)" t)
(autoload 'magit-subtree-pull "magit-subtree" "\
Pull REF from REPOSITORY into the PREFIX subtree.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-push "magit-subtree" "\
Extract the history of the subtree PREFIX and push it to REF on REPOSITORY.

(fn PREFIX REPOSITORY REF ARGS)" t)
(autoload 'magit-subtree-split "magit-subtree" "\
Extract the history of the subtree PREFIX.

(fn PREFIX COMMIT ARGS)" t)
(register-definition-prefixes "magit-subtree" '("magit-"))



 (autoload 'magit-tag "magit" nil t)
(autoload 'magit-tag-create "magit-tag" "\
Create a new tag with the given NAME at REV.
With a prefix argument annotate the tag.

(git tag [--annotate] NAME REV)

(fn NAME REV &optional ARGS)" t)
(autoload 'magit-tag-delete "magit-tag" "\
Delete one or more tags.
If the region marks multiple tags (and nothing else), then offer
to delete those, otherwise prompt for a single tag to be deleted,
defaulting to the tag at point.

(git tag -d TAGS)

(fn TAGS)" t)
(autoload 'magit-tag-prune "magit-tag" "\
Offer to delete tags missing locally from REMOTE, and vice versa.

(fn TAGS REMOTE-TAGS REMOTE)" t)
(autoload 'magit-tag-release "magit-tag" "\
Create a release tag for `HEAD'.

Assume that release tags match `magit-release-tag-regexp'.

If `HEAD's message matches `magit-release-commit-regexp', then
base the tag on the version string specified by that.  Otherwise
prompt for the name of the new tag using the highest existing
tag as initial input and leaving it to the user to increment the
desired part of the version string.

When creating an annotated tag, prepare a message based on the message
of the highest existing tag, provided that contains the corresponding
version string, and substituting the new version string for that.  If
that is not the case, propose a message using a reasonable format.

(fn TAG MSG &optional ARGS)" t)
(register-definition-prefixes "magit-tag" '("magit-"))



(register-definition-prefixes "magit-transient" '("magit-"))



(defvar magit-wip-mode nil "\
Non-nil if Magit-Wip mode is enabled.
See the `magit-wip-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-mode'.")
(custom-autoload 'magit-wip-mode "magit-wip" nil)
(autoload 'magit-wip-mode "magit-wip" "\
Save uncommitted changes to work-in-progress refs.

Whenever appropriate (i.e., when dataloss would be a possibility
otherwise) this mode causes uncommitted changes to be committed
to dedicated work-in-progress refs.

For historic reasons this mode is implemented on top of four
other `magit-wip-*' modes, which can also be used individually,
if you want finer control over when the wip refs are updated;
but that is discouraged.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'magit-wip-after-save-mode 'globalized-minor-mode t)
(defvar magit-wip-after-save-mode nil "\
Non-nil if Magit-Wip-After-Save mode is enabled.
See the `magit-wip-after-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `magit-wip-after-save-mode'.")
(custom-autoload 'magit-wip-after-save-mode "magit-wip" nil)
(autoload 'magit-wip-after-save-mode "magit-wip" "\
Toggle Magit-Wip-After-Save-Local mode in all buffers.
With prefix ARG, enable Magit-Wip-After-Save mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Magit-Wip-After-Save-Local mode is enabled in all buffers where
`magit-wip-after-save-local-mode-turn-on' would do it.

See `magit-wip-after-save-local-mode' for more information on
Magit-Wip-After-Save-Local mode.

(fn &optional ARG)" t)
(defvar magit-wip-after-apply-mode nil "\
Non-nil if Magit-Wip-After-Apply mode is enabled.
See the `magit-wip-after-apply-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-after-apply-mode "magit-wip" nil)
(autoload 'magit-wip-after-apply-mode "magit-wip" "\
Commit to work-in-progress refs.

After applying a change using any \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected files to the current wip refs.  For each branch there
may be two wip refs; one contains snapshots of the files as found
in the worktree and the other contains snapshots of the entries
in the index.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-After-Apply mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-after-apply-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(defvar magit-wip-before-change-mode nil "\
Non-nil if Magit-Wip-Before-Change mode is enabled.
See the `magit-wip-before-change-mode' command
for a description of this minor mode.")
(custom-autoload 'magit-wip-before-change-mode "magit-wip" nil)
(autoload 'magit-wip-before-change-mode "magit-wip" "\
Commit to work-in-progress refs before certain destructive changes.

Before invoking a revert command or an \"apply variant\"
command (apply, stage, unstage, discard, and reverse) commit the
affected tracked files to the current wip refs.  For each branch
there may be two wip refs; one contains snapshots of the files
as found in the worktree and the other contains snapshots of the
entries in the index.

Only changes to files which could potentially be affected by the
command which is about to be called are committed.

This is a global minor mode.  If called interactively, toggle the
`Magit-Wip-Before-Change mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='magit-wip-before-change-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'magit-wip-commit-initial-backup "magit-wip" "\
Before saving, commit current file to a worktree wip ref.

The user has to add this function to `before-save-hook'.

Commit the current state of the visited file before saving the
current buffer to that file.  This backs up the same version of
the file as `backup-buffer' would, but stores the backup in the
worktree wip ref, which is also used by the various Magit Wip
modes, instead of in a backup file as `backup-buffer' would.

This function ignores the variables that affect `backup-buffer'
and can be used along-side that function, which is recommended
because this function only backs up files that are tracked in
a Git repository.")
(register-definition-prefixes "magit-wip" '("magit-"))



 (autoload 'magit-worktree "magit-worktree" nil t)
(autoload 'magit-worktree-checkout "magit-worktree" "\
Checkout BRANCH in a new worktree at PATH.

(fn PATH BRANCH)" t)
(autoload 'magit-worktree-branch "magit-worktree" "\
Create a new BRANCH and check it out in a new worktree at PATH.

(fn PATH BRANCH START-POINT)" t)
(autoload 'magit-worktree-move "magit-worktree" "\
Move WORKTREE to PATH.

(fn WORKTREE PATH)" t)
(register-definition-prefixes "magit-worktree" '("magit-"))


(provide 'magit-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treemacs-magit-20240131.2042/treemacs-magit-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "treemacs-magit" '("treemacs-"))


(provide 'treemacs-magit-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treemacs-icons-dired-20241017.2046/treemacs-icons-dired-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar treemacs-icons-dired-mode nil "\
Non-nil if Treemacs-Icons-Dired mode is enabled.
See the `treemacs-icons-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `treemacs-icons-dired-mode'.")
(custom-autoload 'treemacs-icons-dired-mode "treemacs-icons-dired" nil)
(autoload 'treemacs-icons-dired-mode "treemacs-icons-dired" "\
Display treemacs icons for each file in a Dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Treemacs-Icons-Dired mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='treemacs-icons-dired-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'treemacs-icons-dired-enable-once "treemacs-icons-dired" "\
Enable `treemacs-icons-dired-mode' and remove self from `dired-mode-hook'.

This function is meant to be used as a single-use toggle added to
`dired-mode-hook' to enable icons for Dired only once, without having to use
\"with-eval-after-load \\='dired\", since Dired tends to be loaded early.")
(register-definition-prefixes "treemacs-icons-dired" '("treemacs-icons-dired-"))


(provide 'treemacs-icons-dired-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/goto-chg-20240407.1110/goto-chg-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'goto-last-change "goto-chg" "\
Go to the point where the last edit was made in the current buffer.
Repeat the command to go to the second last edit, etc.

To go back to more recent edit, the reverse of this command, use \\[goto-last-change-reverse]
or precede this command with \\[universal-argument] - (minus).

It does not go to the same point twice even if there has been many edits
there. I call the minimal distance between distinguishable edits \"span\".
Set variable `glc-default-span' to control how close is \"the same point\".
Default span is 8.
The span can be changed temporarily with \\[universal-argument] right before \\[goto-last-change]:
\\[universal-argument] <NUMBER> set current span to that number,
\\[universal-argument] (no number) multiplies span by 4, starting with default.
The so set span remains until it is changed again with \\[universal-argument], or the consecutive
repetition of this command is ended by any other command.

When span is zero (i.e. \\[universal-argument] 0) subsequent \\[goto-last-change] visits each and
every point of edit and a message shows what change was made there.
In this case it may go to the same point twice.

This command uses undo information. If undo is disabled, so is this command.
At times, when undo information becomes too large, the oldest information is
discarded. See variable `undo-limit'.

(fn ARG)" t)
(autoload 'goto-last-change-reverse "goto-chg" "\
Go back to more recent changes after \\[goto-last-change] have been used.
See `goto-last-change' for use of prefix argument.

(fn ARG)" t)
(register-definition-prefixes "goto-chg" '("glc-"))


(provide 'goto-chg-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/evil-20250226.1804/evil-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "evil-command-window" '("evil-"))



(register-definition-prefixes "evil-commands" '("evil-"))



(register-definition-prefixes "evil-common" '("bounds-of-evil-" "evil-" "forward-evil-"))



 (autoload 'evil-mode "evil" nil t)
(register-definition-prefixes "evil-core" '("evil-" "turn-o"))



(autoload 'evil-digraph "evil-digraphs" "\
Convert DIGRAPH to character or list representation.
If DIGRAPH is a list (CHAR1 CHAR2), return the corresponding character;
if DIGRAPH is a character, return the corresponding list.
Searches in `evil-digraphs-table-user' and `evil-digraphs-table'.

(fn DIGRAPH)")
(register-definition-prefixes "evil-digraphs" '("evil-digraphs-table"))



(register-definition-prefixes "evil-ex" '("evil-"))



(register-definition-prefixes "evil-integration" '("evil-"))



(register-definition-prefixes "evil-jumps" '("evil-"))



(register-definition-prefixes "evil-keybindings" '("evil--set-motion-state"))



(register-definition-prefixes "evil-macros" '("evil-"))



(register-definition-prefixes "evil-maps" '("evil-"))



(register-definition-prefixes "evil-repeat" '("evil-"))



(register-definition-prefixes "evil-search" '("evil-"))



(register-definition-prefixes "evil-states" '("evil-"))



(register-definition-prefixes "evil-types" '("evil-ex-get-optional-register-and-count"))



(register-definition-prefixes "evil-vars" '("evil-"))


(provide 'evil-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/treemacs-evil-20241222.1336/treemacs-evil-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "treemacs-evil" '("treemacs-evil--"))


(provide 'treemacs-evil-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/tree-sitter-20220212.1632/tree-sitter-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'tree-sitter-mode "tree-sitter" "\
Minor mode that keeps an up-to-date syntax tree using incremental parsing.

This is a minor mode.  If called interactively, toggle the `tree-sitter
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'turn-on-tree-sitter-mode "tree-sitter" "\
Turn on `tree-sitter-mode' in a buffer, if possible.")
(put 'global-tree-sitter-mode 'globalized-minor-mode t)
(defvar global-tree-sitter-mode nil "\
Non-nil if Global Tree-Sitter mode is enabled.
See the `global-tree-sitter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-tree-sitter-mode'.")
(custom-autoload 'global-tree-sitter-mode "tree-sitter" nil)
(autoload 'global-tree-sitter-mode "tree-sitter" "\
Toggle Tree-Sitter mode in all buffers.
With prefix ARG, enable Global Tree-Sitter mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Tree-Sitter mode is enabled in all buffers where
`turn-on-tree-sitter-mode' would do it.

See `tree-sitter-mode' for more information on Tree-Sitter mode.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'tree-sitter-node-at-point 'tree-sitter-node-at-pos "2021-08-30")
(autoload 'tree-sitter-node-at-pos "tree-sitter" "\
Return the smallest syntax node of type NODE-TYPE at POS.
NODE-TYPE may be a symbol, corresponding to a named syntax node; a string,
corresponding to an anonymous node, or a keyword, holding a special value. For
the special value `:named', return the smallest named node at POS. For the
special value `:anonymous', return the smallest anonymous node at POS. IF POS is
nil, POS defaults to the point. Unless IGNORE-INVALID-TYPE is non-nil, signal an
error when a specified named NODE-TYPE does not exist in the current grammar.
Whenever NODE-TYPE is non-nil (other than `:named'), it is possible for the
function to return nil.

(fn &optional NODE-TYPE POS IGNORE-INVALID-TYPE)")
(register-definition-prefixes "tree-sitter" '("tree-sitter-"))



(register-definition-prefixes "tree-sitter-cli" '("tree-sitter-cli-"))



(autoload 'tree-sitter-debug-mode "tree-sitter-debug" "\
Toggle syntax tree debugging for the current buffer.

This mode displays the syntax tree in another buffer, and keeps it up-to-date.

This is a minor mode.  If called interactively, toggle the
`Tree-Sitter-Debug mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-debug-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'tree-sitter-debug-query "tree-sitter-debug" "\
Execute query PATTERNS against the current syntax tree and return captures.

If the optional arg MATCHES is non-nil, matches (from `tsc-query-matches') are
returned instead of captures (from `tsc-query-captures').

If the optional arg TAG-ASSIGNER is non-nil, it is passed to `tsc-make-query' to
assign custom tags to capture names.

This function is primarily useful for debugging purpose. Other packages should
build queries and cursors once, then reuse them.

(fn PATTERNS &optional MATCHES TAG-ASSIGNER)")
(register-definition-prefixes "tree-sitter-debug" '("tree-sitter-debug-"))



(autoload 'tree-sitter-save-excursion "tree-sitter-extras" "\
Save the current location within the syntax tree; execute BODY; restore it.

If the original location cannot be restored due to the syntax tree changing too
much, this macro behaves like `save-excursion', unless
`tree-sitter-save-excursion-try-hard' is non-nil, in which case it tries to get
as close as possible to the original location.

After the location is restored, the buffer text is scrolled so that point stays
at roughly the same vertical screen position. If `pixel-scroll' is available and
`tree-sitter-save-excursion-pixelwise' is non-nil, pixelwise scrolling is used
instead, to make this restoration exact.

(fn &rest BODY)" nil t)
(function-put 'tree-sitter-save-excursion 'lisp-indent-function 0)
(register-definition-prefixes "tree-sitter-extras" '("tree-sitter-"))



(autoload 'tree-sitter-hl-add-patterns "tree-sitter-hl" "\
Add custom syntax highlighting PATTERNS.
If LANG-SYMBOL is non-nil, it identifies the language that PATTERNS should be
applied to. If LANG-SYMBOL is nil, PATTERNS are applied to the current buffer,
and are prioritized over language-specific patterns. Either way, PATTERNS are
prioritized over `tree-sitter-hl-default-patterns'.

This function should be used by minor modes and configuration code. Major modes
should set `tree-sitter-hl-default-patterns' instead.

(fn LANG-SYMBOL PATTERNS)")
(function-put 'tree-sitter-hl-add-patterns 'lisp-indent-function 1)
(autoload 'tree-sitter-hl-mode "tree-sitter-hl" "\
Toggle syntax highlighting based on Tree-sitter's syntax tree.

If `tree-sitter-hl-default-patterns' is nil, turning on this mode does nothing,
and does not interfere with `font-lock-mode'.

Enabling this automatically enables `tree-sitter-mode' in the buffer.

To enable this automatically whenever `tree-sitter-mode' is enabled:

 (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

This is a minor mode.  If called interactively, toggle the
`Tree-Sitter-Hl mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tree-sitter-hl-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "tree-sitter-hl" '("tree-sitter-hl-"))



(autoload 'tree-sitter-require "tree-sitter-load" "\
Return the language object loaded and registered under the name LANG-SYMBOL.
If the language has not been loaded yet, load it with `tree-sitter-load'.

FILE should be the base name (without extension) of the native shared library
that exports the language as the native symbol NATIVE-SYMBOL-NAME.

If FILE is nil, the base name is assumed to be LANG-SYMBOL's name.

If NATIVE-SYMBOL-NAME is nil, the name of the exported native symbol is assumed
to be LANG-SYMBOL's name, prefixed with \"tree_sitter_\".

(fn LANG-SYMBOL &optional FILE NATIVE-SYMBOL-NAME)")
(register-definition-prefixes "tree-sitter-load" '("tree-sitter-l"))



(autoload 'tree-sitter-query-builder "tree-sitter-query" "\
Provide means for developers to write and test tree-sitter queries.

The buffer on focus when the command is called is set as the target buffer." t)
(register-definition-prefixes "tree-sitter-query" '("tree-sitter-"))


(provide 'tree-sitter-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/tramp-2.7.2.2/tramp-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (when (featurep 'tramp-compat)
  (load "tramp-compat" 'noerror 'nomessage))
(defvar tramp-mode (not (eq system-type 'ms-dos)) "\
Whether Tramp is enabled.
If it is set to nil, all remote file names are used literally.")
(custom-autoload 'tramp-mode "tramp" t)
(defconst tramp-initial-file-name-regexp (rx bos "/" (+ (not (any "/:"))) ":" (* (not (any "/:"))) ":") "\
Value for `tramp-file-name-regexp' for autoload.
It must match the initial `tramp-syntax' settings.")
(defvar tramp-file-name-regexp tramp-initial-file-name-regexp "\
Regular expression matching file names handled by Tramp.
This regexp should match Tramp file names but no other file
names.  When calling `tramp-register-file-name-handlers', the
initial value is overwritten by the car of `tramp-file-name-structure'.")
(defvar tramp-ignored-file-name-regexp nil "\
Regular expression matching file names that are not under Tramp's control.")
(custom-autoload 'tramp-ignored-file-name-regexp "tramp" t)
(defconst tramp-autoload-file-name-regexp (rx bos "/" (| "-" (>= 2 (not (any "/:|")))) ":") "\
Regular expression matching file names handled by Tramp autoload.
It must match the initial `tramp-syntax' settings.  It should not
match file names at root of the underlying local file system,
like \"/sys\" or \"/C:\".")
(defvar tramp-foreign-file-name-handler-alist nil "\
Alist of elements (FUNCTION . HANDLER) for foreign methods handled specially.
If (FUNCTION FILENAME) returns non-nil, then all I/O on that file is done by
calling HANDLER.")
(autoload 'tramp-file-name-handler "tramp" "\
Invoke Tramp file name handler for OPERATION and ARGS.
Fall back to normal file name handler if no Tramp file name handler exists.

(fn OPERATION &rest ARGS)")
(defun tramp-autoload-file-name-handler (operation &rest args) "\
Load Tramp file name handler, and perform OPERATION." (tramp-unload-file-name-handlers) (when tramp-mode (let ((default-directory temporary-file-directory)) (when (bound-and-true-p tramp-archive-autoload) (load "tramp-archive" 'noerror 'nomessage)) (load "tramp" 'noerror 'nomessage))) (apply operation args))
(defun tramp-register-autoload-file-name-handlers nil "\
Add Tramp file name handlers to `file-name-handler-alist' during autoload." (unless (rassq #'tramp-file-name-handler file-name-handler-alist) (add-to-list 'file-name-handler-alist (cons tramp-autoload-file-name-regexp #'tramp-autoload-file-name-handler)) (put #'tramp-autoload-file-name-handler 'safe-magic t)))
 (tramp-register-autoload-file-name-handlers)
(defun tramp-unload-file-name-handlers nil "\
Unload Tramp file name handlers from `file-name-handler-alist'." (dolist (fnh file-name-handler-alist) (when (and (symbolp (cdr fnh)) (string-prefix-p "tramp-" (symbol-name (cdr fnh)))) (setq file-name-handler-alist (delq fnh file-name-handler-alist)))))
(defun inhibit-remote-files nil "\
Deactivate remote file names." (interactive) (when (fboundp 'tramp-cleanup-all-connections) (funcall 'tramp-cleanup-all-connections)) (tramp-unload-file-name-handlers) (setq tramp-mode nil))
(defmacro without-remote-files (&rest body) "\
Deactivate remote file names temporarily.
Run BODY." (declare (indent 0) (debug ((form body) body))) `(let ((file-name-handler-alist (copy-tree file-name-handler-alist)) tramp-mode) (tramp-unload-file-name-handlers) ,@body))
(defun tramp-unload-tramp nil "\
Discard Tramp from loading remote files." (interactive) (ignore-errors (unload-feature 'tramp 'force)))
(register-definition-prefixes "tramp" '("tramp-" "with-"))



(register-definition-prefixes "tramp-adb" '("tramp-"))



(register-definition-prefixes "tramp-androidsu" '("tramp-"))



(defvar tramp-archive-enabled (featurep 'dbusbind) "\
Non-nil when file archive support is available.")
(defconst tramp-archive-suffixes '("7z" "apk" "ar" "cab" "CAB" "cpio" "crate" "deb" "depot" "epub" "exe" "iso" "jar" "lzh" "LZH" "msu" "MSU" "mtree" "odb" "odf" "odg" "odp" "ods" "odt" "pax" "rar" "rpm" "shar" "tar" "tbz" "tgz" "tlz" "txz" "tzst" "warc" "xar" "xpi" "xps" "zip" "ZIP") "\
List of suffixes which indicate a file archive.
It must be supported by libarchive(3).")
(defconst tramp-archive-compression-suffixes '("bz2" "gz" "lrz" "lz" "lz4" "lzma" "lzo" "uu" "xz" "Z" "zst") "\
List of suffixes which indicate a compressed file.
It must be supported by libarchive(3).")
(defmacro tramp-archive-autoload-file-name-regexp nil "\
Regular expression matching archive file names." `(rx bos (group (+ nonl) "." (| ,@tramp-archive-suffixes) (32 "." (| ,@tramp-archive-compression-suffixes))) (group "/" (* nonl)) eos))
(defun tramp-archive-autoload-file-name-handler (operation &rest args) "\
Load Tramp archive file name handler, and perform OPERATION." (defvar tramp-archive-autoload) (let ((default-directory temporary-file-directory) (tramp-archive-autoload tramp-archive-enabled)) (apply #'tramp-autoload-file-name-handler operation args)))
(defun tramp-register-archive-autoload-file-name-handler nil "\
Add archive file name handler to `file-name-handler-alist'." (when (and tramp-archive-enabled (not (rassq 'tramp-archive-file-name-handler file-name-handler-alist))) (add-to-list 'file-name-handler-alist (cons (tramp-archive-autoload-file-name-regexp) #'tramp-archive-autoload-file-name-handler)) (put #'tramp-archive-autoload-file-name-handler 'safe-magic t)))
(add-hook 'after-init-hook #'tramp-register-archive-autoload-file-name-handler)
(add-hook 'tramp-archive-unload-hook (lambda nil (remove-hook 'after-init-hook #'tramp-register-archive-autoload-file-name-handler)))
(register-definition-prefixes "tramp-archive" '("tramp-" "with-parsed-tramp-archive-file-name"))



(register-definition-prefixes "tramp-cache" '("tramp-" "with-tramp-"))



(register-definition-prefixes "tramp-cmds" '("tramp-"))



(register-definition-prefixes "tramp-compat" '("tramp-"))



(register-definition-prefixes "tramp-container" '("tramp-"))



(register-definition-prefixes "tramp-crypt" '("tramp-crypt-"))



(register-definition-prefixes "tramp-ftp" '("tramp-"))



(register-definition-prefixes "tramp-fuse" '("tramp-fuse-"))



(register-definition-prefixes "tramp-gvfs" '("tramp-" "with-tramp-dbus-"))



(register-definition-prefixes "tramp-integration" '("tramp-"))



(register-definition-prefixes "tramp-message" '("tramp-" "with-tramp-debug-message"))



(register-definition-prefixes "tramp-rclone" '("tramp-rclone-"))



(register-definition-prefixes "tramp-sh" '("tramp-"))



(register-definition-prefixes "tramp-smb" '("tramp-smb-"))



(register-definition-prefixes "tramp-sshfs" '("tramp-sshfs-"))



(register-definition-prefixes "tramp-sudoedit" '("tramp-sudoedit-"))



(register-definition-prefixes "tramp-uu" '("tramp-uu"))



(register-definition-prefixes "trampver" '("tramp-"))


(provide 'tramp-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/tablist-20231019.1126/tablist-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'tablist-minor-mode "tablist" "\
Toggle tablist minor mode.

This is a minor mode.  If called interactively, toggle the `Tablist
minor mode' mode.  If the prefix argument is positive, enable the mode,
and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `tablist-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'tablist-mode "tablist" "\


(fn)" t)
(register-definition-prefixes "tablist" '("tablist-"))



(register-definition-prefixes "tablist-filter" '("tablist-filter-"))


(provide 'tablist-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/swift-ts-mode-20250115.1906/swift-ts-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'swift-ts-mode "swift-ts-mode" "\
Major mode for editing Swift, powered by tree-sitter.

(fn)" t)
(register-definition-prefixes "swift-ts-mode" '("swift-ts-mode-"))


(provide 'swift-ts-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/swift-mode-20250111.539/swift-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(let ((loads (get 'swift 'custom-loads))) (if (member '"swift-mode" loads) nil (put 'swift 'custom-loads (cons '"swift-mode" loads)) (put 'languages 'custom-loads (cons 'swift (get 'languages 'custom-loads)))))
 (custom-add-load 'languages 'swift-mode)
 (with-eval-after-load 'cus-load
  (custom-add-load 'languages 'swift-mode))
(defsubst swift-mode:add-supported-extension-for-speedbar nil "\
Register .swift to speedbar." (if (fboundp 'speedbar-add-supported-extension) (speedbar-add-supported-extension ".swift") (add-hook 'speedbar-load-hook (lambda nil (speedbar-add-supported-extension ".swift")))))
(autoload 'swift-mode "swift-mode" "\
Major mode for editing Swift code.

\\{swift-mode-map}

(fn)" t)
 (add-to-list 'auto-mode-alist
             '("\\.swift\\(interface\\)?\\'" . swift-mode))
 (swift-mode:add-supported-extension-for-speedbar)
(register-definition-prefixes "swift-mode" '("swift-mode"))



(register-definition-prefixes "swift-mode-beginning-of-defun" '("swift-mode:"))



(register-definition-prefixes "swift-mode-fill" '("swift-mode:"))



(let ((loads (get 'swift-mode:faces 'custom-loads))) (if (member '"swift-mode-font-lock" loads) nil (put 'swift-mode:faces 'custom-loads (cons '"swift-mode-font-lock" loads)) (put 'swift 'custom-loads (cons 'swift-mode:faces (get 'swift 'custom-loads)))))
(register-definition-prefixes "swift-mode-font-lock" '("swift-mode:"))



(let ((loads (get 'swift-mode:imenu 'custom-loads))) (if (member '"swift-mode-imenu" loads) nil (put 'swift-mode:imenu 'custom-loads (cons '"swift-mode-imenu" loads)) (put 'swift 'custom-loads (cons 'swift-mode:imenu (get 'swift 'custom-loads)))))
(register-definition-prefixes "swift-mode-imenu" '("swift-mode:"))



(register-definition-prefixes "swift-mode-indent" '("swift-mode:"))



(register-definition-prefixes "swift-mode-lexer" '("swift-mode:"))



(let ((loads (get 'swift-mode:repl 'custom-loads))) (if (member '"swift-mode-repl" loads) nil (put 'swift-mode:repl 'custom-loads (cons '"swift-mode-repl" loads)) (put 'swift 'custom-loads (cons 'swift-mode:repl (get 'swift 'custom-loads)))))
(autoload 'swift-mode:run-repl "swift-mode-repl" "\
Run a Swift REPL process.

This function input and output via buffer `*CMD*' where CMD is replaced with
the CMD given.
If there is a process already running in `*CMD*', and DONT-SWITCH is nil,
switch to that buffer.
CMD is a string or a list, interpreted as a command line.  The default value is
`swift-mode:repl-executable'.  This function updates the buffer local variable
`swift-mode:repl-executable' with the given CMD if KEEP-DEFAULT is nil,
so it will be used as the default value for the next invocation in the current
buffer.
If KEEP-DEFAULT is non-nil, the `swift-mode:repl-executable' and the global
variable `swift-mode:repl-buffer' are not updated.  The buffer local variable
`swift-mode:repl-buffer' is always updated.
Runs the hook `swift-repl-mode-hook' (after the `comint-mode-hook' is run).
(Type \\[describe-mode] in the process buffer for a list of commands.)

(fn CMD &optional DONT-SWITCH KEEP-DEFAULT)" t)
(defalias 'run-swift #'swift-mode:run-repl)
(autoload 'swift-mode:send-region "swift-mode-repl" "\
Send the current region to the inferior swift process.

START and END define region within current buffer

(fn START END)" t)
(autoload 'swift-mode:send-buffer "swift-mode-repl" "\
Send the buffer to the Swift REPL process." t)
(autoload 'swift-mode:build-swift-module "swift-mode-repl" "\
Build a Swift module in the PROJECT-DIRECTORY.

If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
An list ARGS are appended for builder command line arguments.

(fn &optional PROJECT-DIRECTORY ARGS)" t)
(autoload 'swift-mode:build-ios-app "swift-mode-repl" "\
Build an iOS app in the PROJECT-DIRECTORY.
Build it for iOS device DEVICE-IDENTIFIER for the given SCHEME.
If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.  If it is nil
or omitted, the value of `swift-mode:ios-device-identifier' is used.  If it is
equal to `swift-mode:ios-local-device-identifier', a local device is used via
`ios-deploy' instead.
SCHEME is the name of the project scheme in Xcode.  If it is nil or omitted,
the value of `swift-mode:ios-project-scheme' is used.

(fn &optional PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME)" t)
(autoload 'swift-mode:debug-swift-module "swift-mode-repl" "\
Run debugger on a Swift module in the PROJECT-DIRECTORY.

If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.

(fn &optional PROJECT-DIRECTORY)" t)
(autoload 'swift-mode:debug-ios-app-on-device "swift-mode-repl" "\
Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS local device DEVICE-IDENTIFIER for the given SCHEME.
CODESIGNING-FOLDER-PATH is the path of the codesigning folder in Xcode
build settings.

(fn PROJECT-DIRECTORY SCHEME CODESIGNING-FOLDER-PATH)")
(autoload 'swift-mode:debug-ios-app-on-simulator "swift-mode-repl" "\
Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS simulator DEVICE-IDENTIFIER for the given SCHEME.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.
SCHEME is the name of the project scheme in Xcode.
CODESIGNING-FOLDER-PATH is the path of the codesigning folder used in Xcode
build settings.
PRODUCT-BUNDLE-IDENTIFIER is the name of the product bundle identifier used
in Xcode build settings.

(fn PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME CODESIGNING-FOLDER-PATH PRODUCT-BUNDLE-IDENTIFIER)")
(autoload 'swift-mode:debug-ios-app "swift-mode-repl" "\
Run debugger on an iOS app in the PROJECT-DIRECTORY.
Run it for the iOS simulator device DEVICE-IDENTIFIER for the given SCHEME.
If PROJECT-DIRECTORY is nil or omitted, it is searched from `default-directory'
or its ancestors.
DEVICE-IDENTIFIER is the device identifier of the iOS simulator.  If it is
nil or omitted, the value of `swift-mode:ios-device-identifier' is used.  If
it is equal to `swift-mode:ios-local-device-identifier', a local build via
`ios-deploy' is generated instead.
SCHEME is the name of the project scheme in Xcode.  If it is nil or omitted,
the value of `swift-mode:ios-project-scheme' is used.

(fn &optional PROJECT-DIRECTORY DEVICE-IDENTIFIER SCHEME)" t)
(register-definition-prefixes "swift-mode-repl" '("swift-"))



(register-definition-prefixes "swift-mode-standard-types" '("swift-mode:"))


(provide 'swift-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/svg-lib-0.3/svg-lib-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "svg-lib" '("svg-lib-"))


(provide 'svg-lib-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/spinner-1.7.4/spinner-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'spinner-create "spinner" "\
Create a spinner of the given TYPE.
The possible TYPEs are described in `spinner--type-to-frames'.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

If BUFFER-LOCAL is non-nil, the spinner will be automatically
deactivated if the buffer is killed.  If BUFFER-LOCAL is a
buffer, use that instead of current buffer.

When started, in order to function properly, the spinner runs a
timer which periodically calls `force-mode-line-update' in the
current buffer.  If BUFFER-LOCAL was set at creation time, then
`force-mode-line-update' is called in that buffer instead.  When
the spinner is stopped, the timer is deactivated.

DELAY, if given, is the number of seconds to wait after starting
the spinner before actually displaying it. It is safe to cancel
the spinner before this time, in which case it won't display at
all.

(fn &optional TYPE BUFFER-LOCAL FPS DELAY)")
(autoload 'spinner-start "spinner" "\
Start a mode-line spinner of given TYPE-OR-OBJECT.
If TYPE-OR-OBJECT is an object created with `make-spinner',
simply activate it.  This method is designed for minor modes, so
they can use the spinner as part of their lighter by doing:
    '(:eval (spinner-print THE-SPINNER))
To stop this spinner, call `spinner-stop' on it.

If TYPE-OR-OBJECT is anything else, a buffer-local spinner is
created with this type, and it is displayed in the
`mode-line-process' of the buffer it was created it.  Both
TYPE-OR-OBJECT and FPS are passed to `make-spinner' (which see).
To stop this spinner, call `spinner-stop' in the same buffer.

Either way, the return value is a function which can be called
anywhere to stop this spinner.  You can also call `spinner-stop'
in the same buffer where the spinner was created.

FPS, if given, is the number of desired frames per second.
Default is `spinner-frames-per-second'.

DELAY, if given, is the number of seconds to wait until actually
displaying the spinner. It is safe to cancel the spinner before
this time, in which case it won't display at all.

(fn &optional TYPE-OR-OBJECT FPS DELAY)")
(register-definition-prefixes "spinner" '("spinner-"))


(provide 'spinner-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/smex-20151212.2209/smex-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'smex "smex" nil t)
(autoload 'smex-major-mode-commands "smex" "\
Like `smex', but limited to commands that are relevant to the active major mode." t)
(autoload 'smex-initialize "smex" nil t)
(register-definition-prefixes "smex" '("smex-"))


(provide 'smex-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/sideline-20250219.2052/sideline-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sideline-mode "sideline" "\
Minor mode `sideline-mode'.

This is a minor mode.  If called interactively, toggle the `Sideline
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `sideline-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-sideline-mode 'globalized-minor-mode t)
(defvar global-sideline-mode nil "\
Non-nil if Global Sideline mode is enabled.
See the `global-sideline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-sideline-mode'.")
(custom-autoload 'global-sideline-mode "sideline" nil)
(autoload 'global-sideline-mode "sideline" "\
Toggle Sideline mode in all buffers.
With prefix ARG, enable Global Sideline mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Sideline mode is enabled in all buffers where
`sideline--turn-on-sideline-mode' would do it.

See `sideline-mode' for more information on Sideline mode.

(fn &optional ARG)" t)
(autoload 'sideline-render-this "sideline" "\
Use to force render the next post command.

(fn &rest _)")
(register-definition-prefixes "sideline" '("sideline-"))


(provide 'sideline-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/f-20241003.1131/f-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "f" '("f-"))


(provide 'f-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/markdown-mode-20250226.231/markdown-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'markdown-mode "markdown-mode" "\
Major mode for editing Markdown files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . markdown-mode))
(autoload 'gfm-mode "markdown-mode" "\
Major mode for editing GitHub Flavored Markdown files.

(fn)" t)
(autoload 'markdown-view-mode "markdown-mode" "\
Major mode for viewing Markdown content.

(fn)" t)
(autoload 'gfm-view-mode "markdown-mode" "\
Major mode for viewing GitHub Flavored Markdown content.

(fn)" t)
(autoload 'markdown-live-preview-mode "markdown-mode" "\
Toggle native previewing on save for a specific markdown file.

This is a minor mode.  If called interactively, toggle the
`Markdown-Live-Preview mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `markdown-live-preview-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "markdown-mode" '("defun-markdown-" "gfm-" "markdown"))


(provide 'markdown-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/lsp-mode-20250224.2344/lsp-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lsp-actionscript" '("lsp-actionscript-"))



(put 'lsp-ada-project-file 'safe-local-variable 'stringp)
(register-definition-prefixes "lsp-ada" '("lsp-ada-"))



(register-definition-prefixes "lsp-angular" '("lsp-client"))



(register-definition-prefixes "lsp-ansible" '("lsp-ansible-"))



(register-definition-prefixes "lsp-asm" '("lsp-asm-"))



(register-definition-prefixes "lsp-astro" '("lsp-astro--get-initialization-options"))



(register-definition-prefixes "lsp-autotools" '("lsp-autotools-"))



(register-definition-prefixes "lsp-awk" '("lsp-awk-executable"))



(register-definition-prefixes "lsp-bash" '("lsp-bash-"))



(register-definition-prefixes "lsp-beancount" '("lsp-beancount-"))



(register-definition-prefixes "lsp-bufls" '("lsp-buf"))



(register-definition-prefixes "lsp-c3" '("lsp-c"))



(register-definition-prefixes "lsp-camel" '("lsp-camel-"))



(autoload 'lsp-cpp-flycheck-clang-tidy-error-explainer "lsp-clangd" "\
Explain a clang-tidy ERROR by scraping documentation from llvm.org.

(fn ERROR)")
(register-definition-prefixes "lsp-clangd" '("lsp-c"))



(autoload 'lsp-clojure-show-test-tree "lsp-clojure" "\
Show a test tree and focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(autoload 'lsp-clojure-show-project-tree "lsp-clojure" "\
Show a project tree with source-paths and dependencies.
Focus on it if IGNORE-FOCUS? is nil.

(fn IGNORE-FOCUS?)" t)
(register-definition-prefixes "lsp-clojure" '("lsp-clojure-"))



(register-definition-prefixes "lsp-cmake" '("lsp-cmake-"))



(add-hook 'cobol-mode-hook #'lsp-cobol-start-ls)
(autoload 'lsp-cobol-start-ls "lsp-cobol" "\
Start the COBOL language service." t)
(register-definition-prefixes "lsp-cobol" '("lsp-cobol-"))



(define-obsolete-variable-alias 'lsp-prefer-capf 'lsp-completion-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-enable-completion-at-point 'lsp-completion-enable "\
lsp-mode 7.0.1")
(defvar lsp-completion-enable t "\
Enable `completion-at-point' integration.")
(custom-autoload 'lsp-completion-enable "lsp-completion" t)
(autoload 'lsp-completion-at-point "lsp-completion" "\
Get lsp completions.")
(autoload 'lsp-completion--enable "lsp-completion" "\
Enable LSP completion support.")
(autoload 'lsp-completion-mode "lsp-completion" "\
Toggle LSP completion support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Completion mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-completion-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-auto-configure lsp-completion-enable) (lsp-completion--enable))))
(register-definition-prefixes "lsp-completion" '("lsp-"))



(autoload 'lsp-copilot-check-status "lsp-copilot" "\
Checks the status of the Copilot Server" t)
(autoload 'lsp-copilot-login "lsp-copilot" "\
Log in with copilot.

This function is automatically called during the client initialization if needed" t)
(register-definition-prefixes "lsp-copilot" '("lsp-copilot-"))



(register-definition-prefixes "lsp-credo" '("lsp-credo-"))



(register-definition-prefixes "lsp-crystal" '("lsp-clients-crystal-executable"))



(register-definition-prefixes "lsp-csharp" '("lsp-csharp-"))



(register-definition-prefixes "lsp-css" '("lsp-css-"))



(register-definition-prefixes "lsp-cucumber" '("lsp-cucumber-"))



(register-definition-prefixes "lsp-cypher" '("lsp-client--cypher-ls-server-command"))



(define-obsolete-variable-alias 'lsp-diagnostic-package 'lsp-diagnostics-provider "\
lsp-mode 7.0.1")
(define-obsolete-variable-alias 'lsp-flycheck-default-level 'lsp-diagnostics-flycheck-default-level "\
lsp-mode 7.0.1")
(autoload 'lsp-diagnostics-lsp-checker-if-needed "lsp-diagnostics")
(autoload 'lsp-diagnostics--enable "lsp-diagnostics" "\
Enable LSP checker support.")
(autoload 'lsp-diagnostics-mode "lsp-diagnostics" "\
Toggle LSP diagnostics integration.

This is a minor mode.  If called interactively, toggle the
`Lsp-Diagnostics mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when lsp-auto-configure (lsp-diagnostics--enable))))
(register-definition-prefixes "lsp-diagnostics" '("lsp-diagnostics-"))



(defvar lsp-dired-mode nil "\
Non-nil if Lsp-Dired mode is enabled.
See the `lsp-dired-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-dired-mode'.")
(custom-autoload 'lsp-dired-mode "lsp-dired" nil)
(autoload 'lsp-dired-mode "lsp-dired" "\
Display `lsp-mode' icons for each file in a dired buffer.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Dired mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-dired-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-dired" '("lsp-dired-"))



(register-definition-prefixes "lsp-dockerfile" '("lsp-dockerfile-language-server-command"))



(register-definition-prefixes "lsp-dot" '("lsp-dot--dot-ls-server-command"))



(register-definition-prefixes "lsp-earthly" '("lsp-earthly-"))



(register-definition-prefixes "lsp-elixir" '("lsp-elixir-"))



(register-definition-prefixes "lsp-elm" '("lsp-"))



(register-definition-prefixes "lsp-emmet" '("lsp-emmet-ls-command"))



(register-definition-prefixes "lsp-erlang" '("lsp-erlang-"))



(register-definition-prefixes "lsp-eslint" '("lsp-"))



(register-definition-prefixes "lsp-fennel" '("lsp-fennel--ls-command"))



(register-definition-prefixes "lsp-fortran" '("lsp-clients-"))



(autoload 'lsp-fsharp--workspace-load "lsp-fsharp" "\
Load all of the provided PROJECTS.

(fn PROJECTS)")
(register-definition-prefixes "lsp-fsharp" '("lsp-fsharp-"))



(register-definition-prefixes "lsp-gdscript" '("lsp-gdscript-"))



(register-definition-prefixes "lsp-gleam" '("lsp-gleam-executable"))



(register-definition-prefixes "lsp-glsl" '("lsp-glsl-executable"))



(register-definition-prefixes "lsp-go" '("lsp-go-"))



(register-definition-prefixes "lsp-golangci-lint" '("lsp-golangci-lint-"))



(register-definition-prefixes "lsp-graphql" '("lsp-"))



(register-definition-prefixes "lsp-groovy" '("lsp-groovy-"))



(register-definition-prefixes "lsp-hack" '("lsp-clients-hack-command"))



(register-definition-prefixes "lsp-haxe" '("lsp-"))



(autoload 'lsp-headerline-breadcrumb-mode "lsp-headerline" "\
Toggle breadcrumb on headerline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Headerline-Breadcrumb mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-headerline-breadcrumb-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-breadcrumb-go-to-symbol "lsp-headerline" "\
Go to the symbol on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(autoload 'lsp-breadcrumb-narrow-to-symbol "lsp-headerline" "\
Narrow to the symbol range on breadcrumb at SYMBOL-POSITION.

(fn SYMBOL-POSITION)" t)
(register-definition-prefixes "lsp-headerline" '("lsp-headerline-"))



(register-definition-prefixes "lsp-html" '("lsp-html-"))



(register-definition-prefixes "lsp-hy" '("lsp-clients-hy-server-executable"))



(register-definition-prefixes "lsp-icons" '("lsp-"))



(autoload 'lsp-ido-workspace-symbol "lsp-ido" "\
`ido' for lsp workspace/symbol.
When called with prefix ARG the default selection will be symbol at point.

(fn ARG)" t)
(register-definition-prefixes "lsp-ido" '("lsp-ido-"))



(register-definition-prefixes "lsp-idris" '("lsp-idris2-lsp-"))



(autoload 'lsp-iedit-highlights "lsp-iedit" "\
Start an `iedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-iedit-linked-ranges "lsp-iedit" "\
Start an `iedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-multiedit-highlights "lsp-iedit" "\
Start an `evil-multiedit' operation on the documentHighlights at point.
This can be used as a primitive `lsp-rename' replacement if the
language server doesn't support renaming.

See also `lsp-enable-symbol-highlighting'." t)
(autoload 'lsp-evil-multiedit-linked-ranges "lsp-iedit" "\
Start an `evil-multiedit' for `textDocument/linkedEditingRange'" t)
(autoload 'lsp-evil-state-highlights "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/documentHighlight'" t)
(autoload 'lsp-evil-state-linked-ranges "lsp-iedit" "\
Start `iedit-mode'. for `textDocument/linkedEditingRange'" t)
(register-definition-prefixes "lsp-iedit" '("lsp-iedit--on-ranges"))



(autoload 'lsp-inline-completion-display "lsp-inline-completion" "\
Displays the inline completions overlay.

(fn &optional IMPLICIT)" t)
(defvar lsp-inline-completion-enable t "\
If non-nil it will enable inline completions on idle.")
(custom-autoload 'lsp-inline-completion-enable "lsp-inline-completion" t)
(autoload 'lsp-inline-completion-mode "lsp-inline-completion" "\
Mode automatically displaying inline completions.

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-inline-completion-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(add-hook 'lsp-configure-hook (lambda nil (when (and lsp-inline-completion-enable (lsp-feature? "textDocument/inlineCompletion")) (lsp-inline-completion-mode))))
(autoload 'lsp-inline-completion-company-integration-mode "lsp-inline-completion" "\
Minor mode to be used when company mode is active with lsp-inline-completion-mode.

This is a minor mode.  If called interactively, toggle the
`Lsp-Inline-Completion-Company-Integration mode' mode.  If the prefix
argument is positive, enable the mode, and if it is zero or negative,
disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-inline-completion-company-integration-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-inline-completion" '("lsp-"))



(register-definition-prefixes "lsp-javascript" '("lsp-"))



(register-definition-prefixes "lsp-jq" '("lsp-clients-jq-server-executable"))



(register-definition-prefixes "lsp-json" '("lsp-"))



(register-definition-prefixes "lsp-jsonnet" '("lsp-clients-jsonnet-server-executable"))



(register-definition-prefixes "lsp-kotlin" '("lsp-"))



(register-definition-prefixes "lsp-kubernetes-helm" '("lsp-kubernetes-helm-"))



(autoload 'lsp-lens--enable "lsp-lens" "\
Enable lens mode.")
(autoload 'lsp-lens-show "lsp-lens" "\
Display lenses in the buffer." t)
(autoload 'lsp-lens-hide "lsp-lens" "\
Delete all lenses." t)
(autoload 'lsp-lens-mode "lsp-lens" "\
Toggle code-lens overlays.

This is a minor mode.  If called interactively, toggle the `Lsp-Lens
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-lens-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-avy-lens "lsp-lens" "\
Click lsp lens using `avy' package." t)
(register-definition-prefixes "lsp-lens" '("lsp-"))



(autoload 'lsp-lisp-alive-start-ls "lsp-lisp" "\
Start the alive-lsp." t)
(register-definition-prefixes "lsp-lisp" '("lsp-lisp-a"))



(register-definition-prefixes "lsp-lua" '("lsp-"))



(register-definition-prefixes "lsp-magik" '("lsp-magik-"))



(register-definition-prefixes "lsp-markdown" '("lsp-markdown-"))



(register-definition-prefixes "lsp-marksman" '("lsp-marksman-"))



(register-definition-prefixes "lsp-matlab" '("lsp-clients-matlab-" "matlabls-command"))



(register-definition-prefixes "lsp-mdx" '("lsp-mdx-server-command"))



(register-definition-prefixes "lsp-meson" '("lsp-meson-"))



(register-definition-prefixes "lsp-mint" '("lsp-clients-mint-executable"))



(put 'lsp-enable-file-watchers 'safe-local-variable #'booleanp)
(put 'lsp-file-watch-ignored-directories 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-ignored-files 'safe-local-variable 'lsp--string-listp)
(put 'lsp-file-watch-threshold 'safe-local-variable (lambda (i) (or (numberp i) (not i))))
(autoload 'lsp--string-listp "lsp-mode" "\
Return t if all elements of SEQUENCE are strings, else nil.

(fn SEQUENCE)")
(autoload 'lsp-load-vscode-workspace "lsp-mode" "\
Load vscode workspace from FILE

(fn FILE)" t)
(autoload 'lsp-save-vscode-workspace "lsp-mode" "\
Save vscode workspace to FILE

(fn FILE)" t)
(autoload 'lsp-install-server "lsp-mode" "\
Interactively install or re-install server.
When prefix UPDATE? is t force installation even if the server is present.

(fn UPDATE? &optional SERVER-ID)" t)
(autoload 'lsp-uninstall-server "lsp-mode" "\
Delete a LSP server from `lsp-server-install-dir'.

(fn DIR)" t)
(autoload 'lsp-uninstall-servers "lsp-mode" "\
Uninstall all installed servers." t)
(autoload 'lsp-update-server "lsp-mode" "\
Interactively update (reinstall) a server.

(fn &optional SERVER-ID)" t)
(autoload 'lsp-update-servers "lsp-mode" "\
Update (reinstall) all installed servers." t)
(autoload 'lsp-ensure-server "lsp-mode" "\
Ensure server SERVER-ID

(fn SERVER-ID)")
(autoload 'lsp "lsp-mode" "\
Entry point for the server startup.
When ARG is t the lsp mode will start new language server even if
there is language server which can handle current language. When
ARG is nil current file will be opened in multi folder language
server if there is such. When `lsp' is called with prefix
argument ask the user to select which language server to start.

(fn &optional ARG)" t)
(autoload 'lsp-deferred "lsp-mode" "\
Entry point that defers server startup until buffer is visible.
`lsp-deferred' will wait until the buffer is visible before invoking `lsp'.
This avoids overloading the server with many files when starting Emacs.")
(autoload 'lsp-start-plain "lsp-mode" "\
Start `lsp-mode' using minimal configuration using the latest `melpa' version
of the packages.

In case the major-mode that you are using for " t)
(register-definition-prefixes "lsp-mode" '("defcustom-lsp" "lsp-" "make-lsp-client" "when-lsp-workspace" "with-lsp-workspace"))



(define-obsolete-variable-alias 'lsp-diagnostics-modeline-scope 'lsp-modeline-diagnostics-scope "\
lsp-mode 7.0.1")
(autoload 'lsp-modeline-code-actions-mode "lsp-modeline" "\
Toggle code actions on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Code-Actions mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-code-actions-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(define-obsolete-function-alias 'lsp-diagnostics-modeline-mode 'lsp-modeline-diagnostics-mode "lsp-mode 7.0.1")
(autoload 'lsp-modeline-diagnostics-mode "lsp-modeline" "\
Toggle diagnostics modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Diagnostics mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-diagnostics-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-modeline-workspace-status-mode "lsp-modeline" "\
Toggle workspace status on modeline.

This is a minor mode.  If called interactively, toggle the
`Lsp-Modeline-Workspace-Status mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-modeline-workspace-status-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-modeline" '("lsp-"))



(register-definition-prefixes "lsp-mojo" '("lsp-mojo-executable"))



(register-definition-prefixes "lsp-move" '("lsp-clients-"))



(register-definition-prefixes "lsp-nextflow" '("lsp-nextflow-"))



(register-definition-prefixes "lsp-nginx" '("lsp-nginx-"))



(register-definition-prefixes "lsp-nim" '("lsp-nim-l"))



(register-definition-prefixes "lsp-nix" '("lsp-nix-"))



(register-definition-prefixes "lsp-nushell" '("lsp-nushell-language-server-command"))



(register-definition-prefixes "lsp-ocaml" '("lsp-"))



(register-definition-prefixes "lsp-openscad" '("lsp-openscad-"))



(register-definition-prefixes "lsp-perl" '("lsp-perl-"))



(register-definition-prefixes "lsp-perlnavigator" '("lsp-perlnavigator-"))



(register-definition-prefixes "lsp-php" '("lsp-"))



(register-definition-prefixes "lsp-pls" '("lsp-pls-"))



(register-definition-prefixes "lsp-prolog" '("lsp-prolog-server-command"))



(register-definition-prefixes "lsp-protocol" '("dash-expand:&RangeToPoint" "lsp"))



(register-definition-prefixes "lsp-purescript" '("lsp-purescript-"))



(register-definition-prefixes "lsp-pwsh" '("lsp-pwsh-"))



(register-definition-prefixes "lsp-pyls" '("lsp-"))



(register-definition-prefixes "lsp-pylsp" '("lsp-"))



(register-definition-prefixes "lsp-qml" '("lsp-qml-server-command"))



(register-definition-prefixes "lsp-r" '("lsp-clients-r-server-command"))



(register-definition-prefixes "lsp-racket" '("lsp-racket-lang"))



(register-definition-prefixes "lsp-remark" '("lsp-remark-server-command"))



(register-definition-prefixes "lsp-rf" '("expand-start-command" "lsp-rf-language-server-" "parse-rf-language-server-"))



(register-definition-prefixes "lsp-roslyn" '("lsp-roslyn-"))



(register-definition-prefixes "lsp-rpm-spec" '("lsp-rpm-spec-"))



(register-definition-prefixes "lsp-rubocop" '("lsp-rubocop-"))



(register-definition-prefixes "lsp-ruby-lsp" '("lsp-ruby-lsp-"))



(register-definition-prefixes "lsp-ruby-syntax-tree" '("lsp-ruby-syntax-tree-"))



(register-definition-prefixes "lsp-ruff" '("lsp-ruff-"))



(register-definition-prefixes "lsp-rust" '("lsp-"))



(defvar-local semantic-token-modifier-cache (make-hash-table) "\
A cache of modifier values to the selected fonts.
This allows whole-bitmap lookup instead of checking each bit. The
expectation is that usage of modifiers will tend to cluster, so
we will not have the full range of possible usages, hence a
tractable hash map.

This is set as buffer-local. It should probably be shared in a
given workspace/language-server combination.

This cache should be flushed every time any modifier
configuration changes.")
(autoload 'lsp--semantic-tokens-initialize-buffer "lsp-semantic-tokens" "\
Initialize the buffer for semantic tokens.
IS-RANGE-PROVIDER is non-nil when server supports range requests.")
(autoload 'lsp--semantic-tokens-initialize-workspace "lsp-semantic-tokens" "\
Initialize semantic tokens for WORKSPACE.

(fn WORKSPACE)")
(autoload 'lsp-semantic-tokens--warn-about-deprecated-setting "lsp-semantic-tokens" "\
Warn about deprecated semantic highlighting variable.")
(autoload 'lsp-semantic-tokens--enable "lsp-semantic-tokens" "\
Enable semantic tokens mode.")
(autoload 'lsp-semantic-tokens-mode "lsp-semantic-tokens" "\
Toggle semantic-tokens support.

This is a minor mode.  If called interactively, toggle the
`Lsp-Semantic-Tokens mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `lsp-semantic-tokens-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "lsp-semantic-tokens" '("lsp-"))



(register-definition-prefixes "lsp-semgrep" '("lsp-semgrep-" "semgrep-"))



(register-definition-prefixes "lsp-sml" '("lsp-sml-millet-"))



(register-definition-prefixes "lsp-solargraph" '("lsp-solargraph-"))



(register-definition-prefixes "lsp-solidity" '("lsp-client--solidity-"))



(register-definition-prefixes "lsp-sorbet" '("lsp-sorbet-"))



(register-definition-prefixes "lsp-sql" '("lsp-sql-"))



(register-definition-prefixes "lsp-sqls" '("lsp-sql"))



(register-definition-prefixes "lsp-steep" '("lsp-steep-"))



(register-definition-prefixes "lsp-svelte" '("lsp-svelte-plugin-"))



(register-definition-prefixes "lsp-terraform" '("construct-tf-package" "lsp-t"))



(register-definition-prefixes "lsp-tex" '("lsp-"))



(register-definition-prefixes "lsp-toml" '("lsp-toml-"))



(register-definition-prefixes "lsp-trunk" '("lsp-trunk-"))



(register-definition-prefixes "lsp-ts-query" '("lsp-ts-query-"))



(register-definition-prefixes "lsp-ttcn3" '("lsp-ttcn3-lsp-server-command"))



(register-definition-prefixes "lsp-typeprof" '("lsp-typeprof-"))



(register-definition-prefixes "lsp-typespec" '("lsp-typespec-"))



(register-definition-prefixes "lsp-v" '("lsp-v-"))



(register-definition-prefixes "lsp-vala" '("lsp-clients-vala-ls-executable"))



(register-definition-prefixes "lsp-verilog" '("lsp-clients-"))



(register-definition-prefixes "lsp-vetur" '("lsp-vetur-"))



(register-definition-prefixes "lsp-vhdl" '("ghdl-ls-bin-name" "hdl-checker-bin-name" "lsp-vhdl-" "vhdl-"))



(register-definition-prefixes "lsp-vimscript" '("lsp-clients-vim-"))



(register-definition-prefixes "lsp-volar" '("lsp-volar-"))



(register-definition-prefixes "lsp-wgsl" '("lsp-wgsl-"))



(register-definition-prefixes "lsp-xml" '("lsp-xml-"))



(register-definition-prefixes "lsp-yaml" '("lsp-"))



(register-definition-prefixes "lsp-yang" '("lsp-yang-"))



(register-definition-prefixes "lsp-zig" '("lsp-z"))


(provide 'lsp-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/sideline-lsp-20250101.857/sideline-lsp-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sideline-lsp "sideline-lsp" "\
Backend for sideline.

Argument COMMAND is required in sideline backend.

(fn COMMAND)")
(register-definition-prefixes "sideline-lsp" '("sideline-lsp-"))


(provide 'sideline-lsp-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/flycheck-20250226.1541/flycheck-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-manual "flycheck" "\
Open the Flycheck manual." t)
(autoload 'flycheck-quick-help "flycheck" "\
Display brief Flycheck help." t)
(autoload 'flycheck-mode "flycheck" "\
Flycheck is a minor mode for on-the-fly syntax checking.

In `flycheck-mode' the buffer is automatically syntax-checked
using the first suitable syntax checker from `flycheck-checkers'.
Use `flycheck-select-checker' to select a checker for the current
buffer manually.

If you run into issues, use `\\[flycheck-verify-setup]' to get help.

Flycheck supports many languages out of the box, and many
additional ones are available on MELPA.  Adding new ones is very
easy.  Complete documentation is available online at URL
`https://www.flycheck.org/en/latest/'.  Please report issues and
request features at URL `https://github.com/flycheck/flycheck'.

Flycheck displays its status in the mode line.  In the default
configuration, it looks like this:

`FlyC'     This buffer has not been checked yet.
`FlyC*'    Flycheck is running.  Expect results soon!
`FlyC:0'   Last check resulted in no errors and no warnings.
`FlyC:3|5' This buffer contains three errors and five warnings.
           Use `\\[flycheck-list-errors]' to see the list.
`FlyC-'    Flycheck doesn't have a checker for this buffer.

You may also see the following icons:
`FlyC!'    The checker crashed.
`FlyC.'    The last syntax check was manually interrupted.
`FlyC?'    The checker did something unexpected, like exiting with 1
           but returning no errors.

The following keybindings are available in `flycheck-mode':

\\{flycheck-mode-map}
(you can change the prefix by customizing
`flycheck-keymap-prefix')

If called interactively, enable Flycheck mode if ARG is positive,
and disable it if ARG is zero or negative.  If called from Lisp,
also enable the mode if ARG is omitted or nil, and toggle it if
ARG is ‘toggle’; disable the mode otherwise.

(fn &optional ARG)" t)
(put 'global-flycheck-mode 'globalized-minor-mode t)
(defvar global-flycheck-mode nil "\
Non-nil if Global Flycheck mode is enabled.
See the `global-flycheck-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-mode'.")
(custom-autoload 'global-flycheck-mode "flycheck" nil)
(autoload 'global-flycheck-mode "flycheck" "\
Toggle Flycheck mode in all buffers.
With prefix ARG, enable Global Flycheck mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck mode is enabled in all buffers where `flycheck-mode-on-safe'
would do it.

See `flycheck-mode' for more information on Flycheck mode.

(fn &optional ARG)" t)
(autoload 'flycheck-define-error-level "flycheck" "\
Define a new error LEVEL with PROPERTIES.

The following PROPERTIES constitute an error level:

`:severity SEVERITY'
     A number denoting the severity of this level.  The higher
     the number, the more severe is this level compared to other
     levels.  Defaults to 0; info is -10, warning is 10, and
     error is 100.

     The severity is used by `flycheck-error-level-<' to
     determine the ordering of errors according to their levels.

`:compilation-level LEVEL'

     A number indicating the broad class of messages that errors
     at this level belong to: one of 0 (info), 1 (warning), or
     2 or nil (error).  Defaults to nil.

     This is used by `flycheck-checker-pattern-to-error-regexp'
     to map error levels into `compilation-mode''s hierarchy and
     to get proper highlighting of errors in `compilation-mode'.

`:overlay-category CATEGORY'
     A symbol denoting the overlay category to use for error
     highlight overlays for this level.  See Info
     node `(elisp)Overlay Properties' for more information about
     overlay categories.

     A category for an error level overlay should at least define
     the `face' property, for error highlighting.  Another useful
     property for error level categories is `priority', to
     influence the stacking of multiple error level overlays.

`:fringe-bitmap BITMAPS'
     A fringe bitmap symbol denoting the bitmap to use for fringe
     indicators for this level, or a cons of two bitmaps (one for
     narrow fringes and one for wide fringes).  See Info node
     `(elisp)Fringe Bitmaps' for more information about fringe
     bitmaps, including a list of built-in fringe bitmaps.

`:fringe-face FACE'
     A face symbol denoting the face to use for fringe indicators
     for this level.

`:margin-spec SPEC'
     A display specification indicating what to display in the
     margin when `flycheck-indication-mode' is `left-margin' or
     `right-margin'.  See Info node `(elisp)Displaying in the
     Margins'.  If omitted, Flycheck generates an image spec from
     the fringe bitmap.

`:error-list-face FACE'
     A face symbol denoting the face to use for messages of this
     level in the error list.  See `flycheck-list-errors'.

(fn LEVEL &rest PROPERTIES)")
(function-put 'flycheck-define-error-level 'lisp-indent-function 1)
(autoload 'flycheck-define-command-checker "flycheck" "\
Define SYMBOL as syntax checker to run a command.

Define SYMBOL as generic syntax checker via
`flycheck-define-generic-checker', which uses an external command
to check the buffer.  SYMBOL and DOCSTRING are the same as for
`flycheck-define-generic-checker'.

In addition to the properties understood by
`flycheck-define-generic-checker', the following PROPERTIES
constitute a command syntax checker.  Unless otherwise noted, all
properties are mandatory.  Note that the default `:error-filter'
of command checkers is `flycheck-sanitize-errors'.

`:command COMMAND'
     The command to run for syntax checking.

     COMMAND is a list of the form `(EXECUTABLE [ARG ...])'.

     EXECUTABLE is a string with the executable of this syntax
     checker.  It can be overridden with the variable
     `flycheck-SYMBOL-executable'.  Note that this variable is
     NOT implicitly defined by this function.  Use
     `flycheck-def-executable-var' to define this variable.

     Each ARG is an argument to the executable, either as string,
     or as special symbol or form for
     `flycheck-substitute-argument', which see.

`:error-patterns PATTERNS'
     A list of patterns to parse the output of the `:command'.

     Each ITEM in PATTERNS is a list `(LEVEL SEXP ...)', where
     LEVEL is a Flycheck error level (see
     `flycheck-define-error-level'), followed by one or more RX
     `SEXP's which parse an error of that level and extract line,
     column, file name and the message.

     See `rx' for general information about RX, and
     `flycheck-rx-to-string' for some special RX forms provided
     by Flycheck.

     All patterns are applied in the order of declaration to the
     whole output of the syntax checker.  Output already matched
     by a pattern will not be matched by subsequent patterns.  In
     other words, the first pattern wins.

     This property is optional.  If omitted, however, an
     `:error-parser' is mandatory.

`:error-parser FUNCTION'
     A function to parse errors with.

     The function shall accept three arguments OUTPUT CHECKER
     BUFFER.  OUTPUT is the syntax checker output as string,
     CHECKER the syntax checker that was used, and BUFFER a
     buffer object representing the checked buffer.  The function
     must return a list of `flycheck-error' objects parsed from
     OUTPUT.

     This property is optional.  If omitted, it defaults to
     `flycheck-parse-with-patterns'.  In this case,
     `:error-patterns' is mandatory.

`:standard-input t'
     Whether to send the buffer contents on standard input.

     If this property is given and has a non-nil value, send the
     contents of the buffer on standard input.

     Some checkers that support reading from standard input have
     a separate flag to indicate the name of the file whose
     contents are being passed on standard input (typically
     `stdin-filename').  In that case, use the `(option)' form in
     `:command' to pass the value of variable `buffer-file-name'
     when the current buffer has a file name (that is,
     use `option \"--stdin-file-name\" buffer-file-name').

     For buffers not backed by files, checkers that support input
     on stdin typically report a file name like `-' or `<stdin>'.
     Make sure your error parser or patterns expect these file
     names (for example, use `(or \"<stdin>\" (file-name))') or
     call `flycheck-remove-error-file-names' in a custom
     `:error-filter'.

     Defaults to nil.

Note that you may not give `:start', `:interrupt', and
`:print-doc' for a command checker.  You can give a custom
`:verify' function, though, whose results will be appended to the
default `:verify' function of command checkers.

(fn SYMBOL DOCSTRING &rest PROPERTIES)")
(function-put 'flycheck-define-command-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-command-checker 'doc-string-elt 2)
(autoload 'flycheck-def-config-file-var "flycheck" "\
Define SYMBOL as config file variable for CHECKER, with default FILE-NAME.

SYMBOL is declared as customizable variable using `defcustom', to
provide configuration files for the given syntax CHECKER.
CUSTOM-ARGS are forwarded to `defcustom'.

FILE-NAME is the initial value of the new variable.  If omitted,
the default value is nil.  It can be either a string or a list of
strings.

Use this together with the `config-file' form in the `:command'
argument to `flycheck-define-checker'.

(fn SYMBOL CHECKER &optional FILE-NAME &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-config-file-var 'lisp-indent-function 3)
(autoload 'flycheck-def-option-var "flycheck" "\
Define SYMBOL as option variable with INIT-VALUE for CHECKER.

SYMBOL is declared as customizable variable using `defcustom', to
provide an option for the given syntax CHECKERS (a checker or a
list of checkers).  INIT-VALUE is the initial value of the
variable, and DOCSTRING is its docstring.  CUSTOM-ARGS are
forwarded to `defcustom'.

Use this together with the `option', `option-list' and
`option-flag' forms in the `:command' argument to
`flycheck-define-checker'.

(fn SYMBOL INIT-VALUE CHECKERS DOCSTRING &rest CUSTOM-ARGS)" nil t)
(function-put 'flycheck-def-option-var 'lisp-indent-function 3)
(function-put 'flycheck-def-option-var 'doc-string-elt 4)
(autoload 'flycheck-define-checker "flycheck" "\
Define SYMBOL as command syntax checker with DOCSTRING and PROPERTIES.

Like `flycheck-define-command-checker', but PROPERTIES must not
be quoted.  Also, implicitly define the executable variable for
SYMBOL with `flycheck-def-executable-var'.

(fn SYMBOL DOCSTRING &rest PROPERTIES)" nil t)
(function-put 'flycheck-define-checker 'lisp-indent-function 1)
(function-put 'flycheck-define-checker 'doc-string-elt 2)
(register-definition-prefixes "flycheck" '("flycheck-" "help-flycheck-checker-d" "list-flycheck-errors"))



(register-definition-prefixes "flycheck-buttercup" '("flycheck-buttercup-format-error-list"))



(register-definition-prefixes "flycheck-ert" '("flycheck-er"))


(provide 'flycheck-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/sideline-flycheck-20250201.1746/sideline-flycheck-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sideline-flycheck "sideline-flycheck" "\
Backend for sideline.

Argument COMMAND is required in sideline backend.

(fn COMMAND)")
(autoload 'sideline-flycheck-setup "sideline-flycheck" "\
Setup for `flycheck-mode'.")
(register-definition-prefixes "sideline-flycheck" '("sideline-flycheck-"))


(provide 'sideline-flycheck-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/sideline-eglot/sideline-eglot-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sideline-eglot "sideline-eglot" "\
Eglot backend for sideline.

Argument COMMAND is required in sideline backend.

(fn COMMAND)")
(register-definition-prefixes "sideline-eglot" '("sideline-eglot--"))


(provide 'sideline-eglot-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/shrink-path-20190208.1335/shrink-path-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "shrink-path" '("shrink-path-"))


(provide 'shrink-path-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/sesman-20240417.1723/sesman-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'sesman-start "sesman" "\
Start a Sesman session." t)
(autoload 'sesman-restart "sesman" "\
Restart sesman session.
When WHICH is nil, restart the current session; when a single universal
argument or 'linked, restart all linked sessions; when a double universal
argument, t or 'all, restart all sessions. For programmatic use, WHICH can also
be a session or a name of the session, in which case that session is restarted.

(fn &optional WHICH)" t)
(autoload 'sesman-quit "sesman" "\
Terminate a Sesman session.
When WHICH is nil, kill only the current session; when a single universal
argument or 'linked, kill all linked sessions; when a double universal argument,
t or 'all, kill all sessions. For programmatic use, WHICH can also be a session
or a name of the session, in which case that session is killed.

(fn &optional WHICH)" t)
(autoload 'sesman-info "sesman" "\
Display info for all current sessions (`sesman-current-sessions').
In the resulting minibuffer display linked sessions are numbered and the
other (friendly) sessions are not. When ALL is non-nil, show info for all
sessions.

(fn &optional ALL)" t)
(autoload 'sesman-link-with-buffer "sesman" "\
Ask for SESSION and link with BUFFER.
BUFFER defaults to current buffer. On universal argument, or if BUFFER is 'ask,
ask for buffer.

(fn &optional BUFFER SESSION)" t)
(autoload 'sesman-link-with-directory "sesman" "\
Ask for SESSION and link with DIR.
DIR defaults to `default-directory'. On universal argument, or if DIR is 'ask,
ask for directory.

(fn &optional DIR SESSION)" t)
(autoload 'sesman-link-with-project "sesman" "\
Ask for SESSION and link with PROJECT.
PROJECT defaults to current project. On universal argument, or if PROJECT is
'ask, ask for the project. SESSION defaults to the current session.

(fn &optional PROJECT SESSION)" t)
(autoload 'sesman-link-with-least-specific "sesman" "\
Ask for SESSION and link with the least specific context available.
Normally the least specific context is the project. If not in a project, link
with the `default-directory'. If `default-directory' is nil, link with current
buffer.

(fn &optional SESSION)" t)
(autoload 'sesman-unlink "sesman" "\
Break sesman LINKS.
If LINKS is nil, ask interactively for a link. With a prefix argument break all
links.

(fn &optional LINKS)" t)
 (autoload 'sesman-map "sesman" "Session management prefix keymap." t 'keymap)
(register-definition-prefixes "sesman" '("sesman-"))



(autoload 'sesman-browser "sesman-browser" "\
Display an interactive session browser.
See `sesman-browser-mode' for more details." t)
(register-definition-prefixes "sesman-browser" '("sesman-"))


(provide 'sesman-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/rust-mode-20241112.438/rust-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "rust-cargo" '("rust-"))



(register-definition-prefixes "rust-common" '("rust-"))



(register-definition-prefixes "rust-compile" '("cargo-compilation-regexps" "rustc-"))



(autoload 'rust-mode "rust-mode" "\
Major mode for Rust code." t)
(add-to-list 'auto-mode-alist '("\\.rs\\'" . rust-mode))
(register-definition-prefixes "rust-mode" '("rust-"))



(register-definition-prefixes "rust-playpen" '("rust-"))



(register-definition-prefixes "rust-prog-mode" '("rust-"))



(register-definition-prefixes "rust-rustfmt" '("rust-"))



(autoload 'rust-dbg-wrap-or-unwrap "rust-utils" "\
Either remove or add the dbg! macro." t)
(register-definition-prefixes "rust-utils" '("rust-"))


(provide 'rust-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/rg-20241221.1420/rg-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar rg-keymap-prefix "\3s" "\
Prefix for global `rg' keymap.")
(custom-autoload 'rg-keymap-prefix "rg" t)
(defvar rg-command-line-flags-function 'identity "\
Function to modify command line flags of a search.
The argument of the function is an optional list of search specific
command line flags and the function shall return a list of command
line flags to use.")
(autoload 'rg-define-toggle "rg" "\
Define a command line flag that can be toggled from the rg result buffer.

This will create a function with prefix \"rg-custom-toggle-flag-\"
concatenated with the FLAG name, stripped of any leading dashes.  Flag
must be a form that will be evaluated to a string at macro expansion
time.  For instance, if FLAG is \"--invert-match\" the function name
will be `rg-custom-toggle-flag-invert-match'.  If the flag contains a
value that will be excluded from the function name.

Optional KEY is a key binding that is added to `rg-mode-map'.  If the
optional DEFAULT parameter is non nil the flag will be enabled by default.

(fn FLAG &optional KEY DEFAULT)" nil t)
(autoload 'rg-enable-default-bindings "rg" "\
Enable the global `rg' default key bindings under PREFIX key.
If prefix is not supplied `rg-keymap-prefix' is used.

(fn &optional PREFIX)" t)
(autoload 'rg-use-old-defaults "rg" "\
Restore default settings pre version 2.0.0.")
(autoload 'rg-define-search "rg" "\
Define an rg search functions named NAME.
ARGS is a search specification that defines parameters of a search.
It optionally starts with a string that is used as the docstring for
the defined function.  The rest of ARGS contains key value pairs
according to the specification below.  All keys are optional with
specified default if left out.

:query      Method for retrieving the search string.  Allowed values
            are `point' which means extract thing at point and `ask'
            which means prompt the user for a string.  Any form that
            evaluates to a string is allowed.
            Default is `ask'.
:format     Specifies if :query is interpreted literally (`literal')
            or as a regexp (`regexp').  If it is a form, eg.
            (not `current-prefix-arg'), and is non-nil the :query is
            interpreted literally, otherwise as a regexp.
            Default is `regexp'.
:files      Form that evaluates to a file alias or custom file glob.
            `current' means extract alias from current buffer file name,
            `ask' will prompt the user.
            Default is `ask'.
:dir        Root search directory.  Allowed values are `ask' for user
            prompt, `current' for current dir and `project' for project
            root.  Any form that evaluates to a directory string is
            also allowed.
            Default is `ask'.
:confirm    `never', `always', or `prefix' are allowed values.  Specifies
            if the the final search command line string can be modified
            and confirmed by the user.
            Default is `never'.
:flags      `ask' or a list of command line flags that will be used when
            invoking the search.
:menu       Bind the command into `rg-menu'.  Must be a list with three
            items in it.  The first item is the description of the
            group in which the new command will appear.  If the group
            does not exist a new will be created.  The second item is
            the key binding for this new command (ether a key vector
            or a key description string) and the third item is the
            description of the command that will appear in the menu.

Example:
(rg-define-search search-home-dir-in-elisp
  \"Doc string.\"
  :query ask
  :format literal
  :files \"elisp\"
  :dir (getenv \"HOME\"))
  :menu (\"Custom\" \"H\" \"Home dir\")

(fn NAME &rest ARGS)" nil t)
(function-put 'rg-define-search 'lisp-indent-function 'defun)
 (autoload 'rg-project "rg.el" "" t)
 (autoload 'rg-dwim-project-dir "rg.el" "" t)
 (autoload 'rg-dwim-current-dir "rg.el" "" t)
 (autoload 'rg-dwim-current-file "rg.el" "" t)
(autoload 'rg-dwim "rg" "\
Run ripgrep without user interaction figuring out the intention by magic(!).
The default magic searches for thing at point in files matching
current file under project root directory.

With \\[universal-argument] prefix (CURDIR), search is done in
current dir instead of project root.

With repeated \\[universal-argument] prefix, search is done in
the current dir and using the current variable `buffer-file-name'
as a pattern.  Subdirectories are still searched, so different
files with the same name pattern still will be searched.

(fn &optional CURDIR)" t)
 (autoload 'rg-literal "rg.el" "" t)
 (autoload 'rg "rg.el" "" t)
(register-definition-prefixes "rg" '("kill-rg" "rg-"))



(register-definition-prefixes "rg-header" '("rg-"))



(register-definition-prefixes "rg-history" '("rg-history-"))



(autoload 'rg-list-searches "rg-ibuffer" "\
List all `rg-mode' buffers in `ibuffer'." t)
(register-definition-prefixes "rg-ibuffer" '("rg-"))



(register-definition-prefixes "rg-info-hack" '("info-insert-file-contents"))



 (autoload 'rg-isearch-current-file "rg-isearch.el" "" t)
 (autoload 'rg-isearch-current-dir "rg-isearch.el" "" t)
 (autoload 'rg-isearch-project "rg-isearch.el" "" t)
 (autoload 'rg-isearch-menu "rg-isearch.el" "" t)
(register-definition-prefixes "rg-isearch" '("rg-get-isearch-string"))



 (autoload 'rg-menu "rg-menu.el" "" t)
(autoload 'rg-enable-menu "rg-menu" "\
Bind `rg-menu' to PREFIX key.
If prefix is not supplied `rg-keymap-prefix' is used.

(fn &optional PREFIX)" t)
(register-definition-prefixes "rg-menu" '("rg-menu-"))



(register-definition-prefixes "rg-result" '("rg-"))



(autoload 'wgrep-rg-setup "wgrep-rg" "\
Setup wgrep rg support.")
(add-hook 'rg-mode-hook 'wgrep-rg-setup)
(register-definition-prefixes "wgrep-rg" '("wgrep-rg-"))


(provide 'rg-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/recursion-indicator-20250101.924/recursion-indicator-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar recursion-indicator-mode nil "\
Non-nil if Recursion-Indicator mode is enabled.
See the `recursion-indicator-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `recursion-indicator-mode'.")
(custom-autoload 'recursion-indicator-mode "recursion-indicator" nil)
(autoload 'recursion-indicator-mode "recursion-indicator" "\
Show the recursion depth in the mode-line.

This is a global minor mode.  If called interactively, toggle the
`Recursion-Indicator mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='recursion-indicator-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "recursion-indicator" '("recursion-indicator-"))


(provide 'recursion-indicator-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/rainbow-delimiters-20210515.1254/rainbow-delimiters-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'rainbow-delimiters-mode "rainbow-delimiters" "\
Highlight nested parentheses, brackets, and braces according to their depth.

This is a minor mode.  If called interactively, toggle the
`Rainbow-Delimiters mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `rainbow-delimiters-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'rainbow-delimiters-mode-enable "rainbow-delimiters" "\
Enable `rainbow-delimiters-mode'.")
(autoload 'rainbow-delimiters-mode-disable "rainbow-delimiters" "\
Disable `rainbow-delimiters-mode'.")
(register-definition-prefixes "rainbow-delimiters" '("rainbow-delimiters-"))


(provide 'rainbow-delimiters-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/pyvenv-20211014.707/pyvenv-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pyvenv-activate "pyvenv" "\
Activate the virtual environment in DIRECTORY.

(fn DIRECTORY)" t)
(autoload 'pyvenv-deactivate "pyvenv" "\
Deactivate any current virtual environment." t)
(autoload 'pyvenv-workon "pyvenv" "\
Activate a virtual environment from $WORKON_HOME.

If the virtual environment NAME is already active, this function
does not try to reactivate the environment.

(fn NAME)" t)
(defvar pyvenv-mode nil "\
Non-nil if Pyvenv mode is enabled.
See the `pyvenv-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-mode'.")
(custom-autoload 'pyvenv-mode "pyvenv" nil)
(autoload 'pyvenv-mode "pyvenv" "\
Global minor mode for pyvenv.

Will show the current virtualenv in the mode line, and respect a
`pyvenv-workon' setting in files.

This is a global minor mode.  If called interactively, toggle the
`Pyvenv mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(defvar pyvenv-tracking-mode nil "\
Non-nil if Pyvenv-Tracking mode is enabled.
See the `pyvenv-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `pyvenv-tracking-mode'.")
(custom-autoload 'pyvenv-tracking-mode "pyvenv" nil)
(autoload 'pyvenv-tracking-mode "pyvenv" "\
Global minor mode to track the current virtualenv.

When this mode is active, pyvenv will activate a buffer-specific
virtualenv whenever the user switches to a buffer with a
buffer-local `pyvenv-workon' or `pyvenv-activate' variable.

This is a global minor mode.  If called interactively, toggle the
`Pyvenv-Tracking mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='pyvenv-tracking-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'pyvenv-restart-python "pyvenv" "\
Restart Python inferior processes." t)
(register-definition-prefixes "pyvenv" '("pyvenv-"))


(provide 'pyvenv-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/python-pytest-20240826.948/python-pytest-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'python-pytest-dispatch "python-pytest" nil t)
(autoload 'python-pytest "python-pytest" "\
Run pytest with ARGS.

With a prefix argument, allow editing.

(fn &optional ARGS)" t)
(autoload 'python-pytest-file "python-pytest" "\
Run pytest on FILE, using ARGS.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t)
(autoload 'python-pytest-file-dwim "python-pytest" "\
Run pytest on FILE, intelligently finding associated test modules.

When run interactively, this tries to work sensibly using
the current file.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE &optional ARGS)" t)
(autoload 'python-pytest-files "python-pytest" "\
Run pytest on FILES, using ARGS.

When run interactively, this allows for interactive file selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILES &optional ARGS)" t)
(autoload 'python-pytest-directories "python-pytest" "\
Run pytest on DIRECTORIES, using ARGS.

When run interactively, this allows for interactive directory selection.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn DIRECTORIES &optional ARGS)" t)
(autoload 'python-pytest-run-def-at-point-treesit "python-pytest" "\
Run def at point." t)
(autoload 'python-pytest-run-class-at-point-treesit "python-pytest" "\
Run class at point." t)
(autoload 'python-pytest-run-def-or-class-at-point "python-pytest" "\
Run pytest on FILE with FUNC (or class).

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t)
(autoload 'python-pytest-run-def-or-class-at-point-dwim "python-pytest" "\
Run pytest on FILE using FUNC at point as the node-id.

If `python-pytest--test-file-p' returns t for FILE (i.e. the file
is a test file), then this function results in the same behavior
as calling `python-pytest-run-def-at-point'. If
`python-pytest--test-file-p' returns nil for FILE (i.e. the
current file is not a test file), then this function will try to
find related test files and test defs (i.e. sensible match) for
the current file and the def at point.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn FILE FUNC ARGS)" t)
(autoload 'python-pytest-last-failed "python-pytest" "\
Run pytest, only executing previous test failures.

Additional ARGS are passed along to pytest.
With a prefix argument, allow editing.

(fn &optional ARGS)" t)
(autoload 'python-pytest-repeat "python-pytest" "\
Run pytest with the same argument as the most recent invocation.

With a prefix ARG, allow editing." t)
(register-definition-prefixes "python-pytest" '("python-pytest-"))


(provide 'python-pytest-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/python-mode-20250224.1104/python-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "python-mode" '("all-mode-setting" "comint-mime-" "flake8" "force-py-shell-name-p-o" "gud-pdb-history" "highlight-indent-active" "hs-hide-comments-when-hiding-all" "info-lookup-mode" "ipython" "iypthon" "jython" "pdb-track-stack-from-shell-p" "pep8" "pst-here" "quote" "strip-chars-" "toggle-force-py-shell-name-p" "turn-o" "virtualenv-"))


(provide 'python-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ghub-20250220.1447/ghub-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "buck" '("buck-default-host"))



(autoload 'ghub-clear-caches "ghub" "\
Clear all caches that might negatively affect Ghub.

If a library that is used by Ghub caches incorrect information
such as a mistyped password, then that can prevent Ghub from
asking the user for the correct information again.

Set `url-http-real-basic-auth-storage' to nil
and call `auth-source-forget+'." t)
(register-definition-prefixes "ghub" '("ghub-"))



(register-definition-prefixes "ghub-graphql" '("ghub-"))



(register-definition-prefixes "glab" '("glab-default-host"))



(register-definition-prefixes "gogs" '("gogs-default-host"))



(register-definition-prefixes "gsexp" '("gsexp-"))



(register-definition-prefixes "gtea" '("gtea-default-host"))


(provide 'ghub-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/pr-review-20241223.230/pr-review-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pr-review-url-parse "pr-review" "\
Return pr path (repo-owner repo-name pr-id) for URL, or nil on error.

(fn URL)")
(autoload 'pr-review-open "pr-review" "\
Open review buffer for REPO-OWNER/REPO-NAME PR-ID (number).
Open in current window if NEW-WINDOW is nil, in other window otherwise.
ANCHOR is a database id that may be present in the url fragment
of a github pr notification, if it's not nil, try to jump to specific
location after open.
LAST-READ-TIME is the time when the PR is last read (in ISO string, mostly from notification buffer),
if it's not nil, newer comments will be highlighted, and it will jump to first unread comment
if ANCHOR is nil.

(fn REPO-OWNER REPO-NAME PR-ID &optional NEW-WINDOW ANCHOR LAST-READ-TIME)")
(autoload 'pr-review "pr-review" "\
Open Pr Review with URL (which is a link to github pr).
This is the main entrypoint of `pr-review'.
If NEW-WINDOW is not nil, open it in a new window.
When called interactively, user will be prompted to enter a PR url
and new window will be used when called with prefix.

(fn URL &optional NEW-WINDOW)" t)
(autoload 'pr-review-open-url "pr-review" "\
Open Pr Review with URL, in a new window if NEW-WINDOW is not nil.
This function is the same as `pr-review',
but it can be used in `browse-url-handlers' with `pr-review-url-parse'.

(fn URL &optional NEW-WINDOW &rest _)")
(register-definition-prefixes "pr-review" '("pr-review-"))



(register-definition-prefixes "pr-review-action" '("pr-review-"))



(register-definition-prefixes "pr-review-api" '("pr-review-"))



(register-definition-prefixes "pr-review-common" '("pr-review-"))



(register-definition-prefixes "pr-review-input" '("pr-review-"))



(register-definition-prefixes "pr-review-listview" '("pr-review-"))



(autoload 'pr-review-notification "pr-review-notification" "\
Show github notifications in a new buffer." t)
(register-definition-prefixes "pr-review-notification" '("pr-review-"))



(register-definition-prefixes "pr-review-render" '("pr-review-"))



(autoload 'pr-review-search "pr-review-search" "\
Search PRs using a custom QUERY and list result in buffer.
See github docs for syntax of QUERY.
When called interactively, you will be asked to enter the QUERY.

(fn QUERY)" t)
(autoload 'pr-review-search-open "pr-review-search" "\
Search PRs using a custom QUERY and open one of them.
See github docs for syntax of QUERY.
When called interactively, you will be asked to enter the QUERY.

(fn QUERY)" t)
(register-definition-prefixes "pr-review-search" '("pr-review-"))


(provide 'pr-review-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/popup-20250101.843/popup-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "popup" '("popup-"))


(provide 'popup-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/poetry-20240329.1103/poetry-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'poetry "poetry" nil t)
(autoload 'poetry-add-dep "poetry" "\
Add PACKAGE as a new dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-add-dev-dep "poetry" "\
Add PACKAGE as a new development dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-add-opt-dep "poetry" "\
Add PACKAGE as a new optional dependency to the project.

PACKAGE can be a list of packages, separated by spaces.

(fn PACKAGE)" t)
(autoload 'poetry-remove "poetry" "\
Remove PACKAGE from the project dependencies.

TYPE is the type of dependency (dep, dev or opt).

(fn PACKAGE TYPE)" t)
(autoload 'poetry-check "poetry" "\
Check the validity of the pyproject.toml file." t)
(autoload 'poetry-install-install "poetry" "\
Install the project dependencies." t)
(autoload 'poetry-lock "poetry" "\
Locks the project dependencies." t)
(autoload 'poetry-update "poetry" "\
Update dependencies as according to the pyproject.toml file." t)
(autoload 'poetry-show "poetry" "\
Show information about package PACKAGE.

(fn PACKAGE)" t)
(autoload 'poetry-build "poetry" "\
Build a package, as a tarball and a wheel by default." t)
(autoload 'poetry-publish "poetry" "\
Publish the package to a remote repository.

REPO is the repository and USERNAME and PASSWORD the
credential to use.

(fn REPO USERNAME PASSWORD)" t)
(autoload 'poetry-new "poetry" "\
Create a new Python project at PATH.

(fn PATH)" t)
(autoload 'poetry-init "poetry" "\
Initialize a Poetry project in PATH.

(fn &optional PATH)" t)
(autoload 'poetry-edit-pyproject-toml "poetry" "\
Open the current project 'pyproject.toml' file for edition." t)
(autoload 'poetry-run "poetry" "\
Run COMMAND in the appropriate environment.

(fn COMMAND)" t)
(autoload 'poetry-shell "poetry" "\
Spawn a shell within the virtual environment." t)
(autoload 'poetry-self-update "poetry" "\
Update poetry to the latest version." t)
(autoload 'poetry-venv-workon "poetry" "\
Activate the virtualenv associated to the current poetry project." t)
(autoload 'poetry-venv-deactivate "poetry" "\
De-activate the virtualenv associated to the current poetry project." t)
(autoload 'poetry-venv-toggle "poetry" "\
Toggle the virtualenv associated to the current poetry project." t)
(defvar poetry-tracking-mode nil "\
Non-nil if Poetry-Tracking mode is enabled.
See the `poetry-tracking-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `poetry-tracking-mode'.")
(custom-autoload 'poetry-tracking-mode "poetry" nil)
(autoload 'poetry-tracking-mode "poetry" "\
Global minor mode to track the current poetry virtualenv.

For every project, Poetry automatically creates a virtualenv and install the project dependencies in it.
This minor mode automatically activates the relevant Poetry virtualenv when visiting a project file.

It ensures that your python scripts are always executed in the right environment.

This is a global minor mode.  If called interactively, toggle the
`Poetry-Tracking mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='poetry-tracking-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'poetry-find-project-root "poetry" "\
Return the poetry project root if any.")
(register-definition-prefixes "poetry" '("poetry-"))


(provide 'poetry-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/pet-20250115.422/pet-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pet-executable-find "pet" "\
Find the correct EXECUTABLE for the current Python project.

Search for EXECUTABLE first in the `pre-commit' virtualenv, then
whatever environment if found by `pet-virtualenv-root', then
`pyenv', then finally from the variable `exec-path'.

The executable will only be searched in an environment created by
a Python virtualenv management tool if the project is set up to
use it.

(fn EXECUTABLE)")
(autoload 'pet-virtualenv-root "pet" "\
Find the path to the virtualenv for the current Python project.

Selects a virtualenv in the follow order:

1. The value of the environment variable `VIRTUAL_ENV' if defined.
2. If the current project is using any `conda' variant, return the absolute path
   to the virtualenv directory for the current project.
3. Ditta for `poetry'.
4. Ditto for `pipenv'.
5. A directory in `pet-venv-dir-names' in the project root if found.
6. If the current project is using `pyenv', return the path to the virtualenv
   directory by looking up the prefix from `.python-version'.")
(autoload 'pet-flycheck-setup "pet" "\
Set up all `flycheck' Python checker configuration.")
(autoload 'pet-flycheck-teardown "pet" "\
Reset all `flycheck' Python checker configuration to default.")
(autoload 'pet-mode "pet" "\
Minor mode to set up buffer local variables for Python tools.

This is a minor mode.  If called interactively, toggle the `Pet mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `pet-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "pet" '("pet-"))


(provide 'pet-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/parseclj-20231203.1905/parseclj-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "parseclj" '("parseclj-"))



(register-definition-prefixes "parseclj-alist" '("parseclj-"))



(register-definition-prefixes "parseclj-ast" '("parseclj-ast-"))



(register-definition-prefixes "parseclj-lex" '("parseclj-lex-"))



(register-definition-prefixes "parseclj-parser" '("parseclj-"))


(provide 'parseclj-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/parseedn-20231203.1909/parseedn-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "parseedn" '("parseedn-"))


(provide 'parseedn-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/parinfer-rust-mode-20241108.1719/parinfer-rust-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "parinfer-rust-changes" '("parinfer-rust--"))



(register-definition-prefixes "parinfer-rust-flycheck" '("parinfer-rust--flycheck-start"))



(register-definition-prefixes "parinfer-rust-flymake" '("parinfer-rust-"))



(register-definition-prefixes "parinfer-rust-helper" '("parinfer-rust-"))



(autoload 'parinfer-rust-switch-mode "parinfer-rust-mode" "\
Switch to a different Parinfer mode.

Either: indent, smart, or paren." t)
(autoload 'parinfer-rust-toggle-paren-mode "parinfer-rust-mode" "\
Switch to paren mode if current mode is either smart or indent.
Switch back to previous mode if current mode is paren mode. Uses
`parinfer-rust-preferred-mode' as a fallback if previous mode is
not available." t)
(defvar parinfer-rust-mode-map (make-sparse-keymap) "\
Keymap for `parinfer-rust-mode'.")
(autoload 'parinfer-rust-mode "parinfer-rust-mode" "\
A simpler way to write lisps.

This is a minor mode.  If called interactively, toggle the
`Parinfer-Rust mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `parinfer-rust-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "parinfer-rust-mode" '("parinfer-rust-"))


(provide 'parinfer-rust-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/pandoc-mode-20250225.852/pandoc-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'pandoc-mode "pandoc-mode" "\
Minor mode for interacting with Pandoc.

This is a minor mode.  If called interactively, toggle the `Pandoc mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `pandoc-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'conditionally-turn-on-pandoc "pandoc-mode" "\
Turn on pandoc-mode if a pandoc settings file exists.
This is for use in major mode hooks.")
(register-definition-prefixes "pandoc-mode" '("pandoc-"))



(register-definition-prefixes "pandoc-mode-utils" '("abbreviations" "ascii" "atx-headers" "base-header-level" "bibl" "chapters" "cit" "columns" "def" "dpi" "email-obfuscation" "eol" "epub-" "filter" "gladtex" "highlight-style" "html-q-tags" "id-prefix" "ipynb-output" "jsmath" "katex" "latex" "listings" "lua-filter" "metadata" "mimetex" "natbib" "number-" "old-dashes" "pdf-engine" "preserve-tabs" "reference-" "request-header" "resource-path" "shift-heading-level-by" "slide-level" "smart" "syntax-definition" "tab" "template" "title-prefix" "track-changes" "variable" "verbose" "webtex" "wrap"))


(provide 'pandoc-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-9.7.23/org-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "ob-C" '("org-babel-"))



(register-definition-prefixes "ob-R" '("ob-" "org-babel-"))



(register-definition-prefixes "ob-awk" '("org-babel-"))



(register-definition-prefixes "ob-calc" '("org-babel-"))



(register-definition-prefixes "ob-clojure" '("ob-clojure-" "org-babel-"))



(register-definition-prefixes "ob-comint" '("org-babel-comint-"))



(register-definition-prefixes "ob-core" '("org-"))



(register-definition-prefixes "ob-css" '("org-babel-"))



(register-definition-prefixes "ob-ditaa" '("org-"))



(register-definition-prefixes "ob-dot" '("org-babel-"))



(register-definition-prefixes "ob-emacs-lisp" '("org-babel-"))



(register-definition-prefixes "ob-eshell" '("ob-eshell-session-live-p" "org-babel-"))



(register-definition-prefixes "ob-eval" '("org-babel-"))



(register-definition-prefixes "ob-exp" '("org-"))



(register-definition-prefixes "ob-forth" '("org-babel-"))



(register-definition-prefixes "ob-fortran" '("org-babel-"))



(register-definition-prefixes "ob-gnuplot" '("*org-babel-gnuplot-" "org-babel-"))



(register-definition-prefixes "ob-groovy" '("org-babel-"))



(register-definition-prefixes "ob-haskell" '("org-babel-"))



(register-definition-prefixes "ob-java" '("org-babel-"))



(register-definition-prefixes "ob-js" '("org-babel-"))



(register-definition-prefixes "ob-julia" '("org-babel-"))



(register-definition-prefixes "ob-latex" '("org-babel-"))



(register-definition-prefixes "ob-lilypond" '("ob-lilypond-header-args" "org-babel-"))



(register-definition-prefixes "ob-lisp" '("org-babel-"))



(register-definition-prefixes "ob-lob" '("org-babel-"))



(register-definition-prefixes "ob-lua" '("org-babel-"))



(register-definition-prefixes "ob-makefile" '("org-babel-"))



(register-definition-prefixes "ob-maxima" '("org-babel-"))



(register-definition-prefixes "ob-ocaml" '("org-babel-"))



(register-definition-prefixes "ob-octave" '("org-babel-"))



(register-definition-prefixes "ob-org" '("org-babel-"))



(register-definition-prefixes "ob-perl" '("org-babel-"))



(register-definition-prefixes "ob-plantuml" '("org-"))



(register-definition-prefixes "ob-processing" '("org-babel-"))



(register-definition-prefixes "ob-python" '("org-babel-"))



(register-definition-prefixes "ob-ref" '("org-babel-"))



(register-definition-prefixes "ob-ruby" '("org-babel-"))



(register-definition-prefixes "ob-sass" '("org-babel-"))



(register-definition-prefixes "ob-scheme" '("org-babel-"))



(register-definition-prefixes "ob-screen" '("org-babel-"))



(register-definition-prefixes "ob-sed" '("org-babel-"))



(register-definition-prefixes "ob-shell" '("ob-shell-async-" "org-babel-"))



(register-definition-prefixes "ob-sql" '("org-babel-"))



(register-definition-prefixes "ob-sqlite" '("org-babel-"))



(register-definition-prefixes "ob-table" '("org-"))



(register-definition-prefixes "ob-tangle" '("org-babel-"))



(autoload 'org-cite-insert "oc" "\
Insert a citation at point.
Insertion is done according to the processor set in `org-cite-insert-processor'.
ARG is the prefix argument received when calling interactively the function.

(fn ARG)" t)
(register-definition-prefixes "oc" '("org-cite-"))



(register-definition-prefixes "oc-basic" '("org-cite-basic-"))



(register-definition-prefixes "oc-biblatex" '("org-cite-biblatex-"))



(register-definition-prefixes "oc-bibtex" '("org-cite-bibtex-export-"))



(register-definition-prefixes "oc-csl" '("org-cite-csl-"))



(register-definition-prefixes "oc-natbib" '("org-cite-natbib-"))



(register-definition-prefixes "ol" '("org-"))



(register-definition-prefixes "ol-bbdb" '("org-bbdb-"))



(register-definition-prefixes "ol-bibtex" '("org-"))



(register-definition-prefixes "ol-docview" '("org-docview-"))



(register-definition-prefixes "ol-doi" '("org-link-doi-"))



(register-definition-prefixes "ol-eshell" '("org-eshell-"))



(register-definition-prefixes "ol-eww" '("org-eww-"))



(register-definition-prefixes "ol-gnus" '("org-gnus-"))



(register-definition-prefixes "ol-info" '("org-info-"))



(register-definition-prefixes "ol-irc" '("org-irc-"))



(register-definition-prefixes "ol-man" '("org-man-"))



(register-definition-prefixes "ol-mhe" '("org-mhe-"))



(register-definition-prefixes "ol-rmail" '("org-rmail-"))



(register-definition-prefixes "ol-w3m" '("org-w3m-"))



(autoload 'org-babel-do-load-languages "org" "\
Load the languages defined in `org-babel-load-languages'.

(fn SYM VALUE)")
(autoload 'org-babel-load-file "org" "\
Load Emacs Lisp source code blocks in the Org FILE.
This function exports the source code using `org-babel-tangle'
and then loads the resulting file using `load-file'.  With
optional prefix argument COMPILE, the tangled Emacs Lisp file is
byte-compiled before it is loaded.

(fn FILE &optional COMPILE)" t)
(autoload 'org-version "org" "\
Show the Org version.
Interactively, or when MESSAGE is non-nil, show it in echo area.
With prefix argument, or when HERE is non-nil, insert it at point.
In non-interactive uses, a reduced version string is output unless
FULL is given.

(fn &optional HERE FULL MESSAGE)" t)
(autoload 'org-load-modules-maybe "org" "\
Load all extensions listed in `org-modules'.

(fn &optional FORCE)")
(autoload 'org-clock-persistence-insinuate "org" "\
Set up hooks for clock persistence.")
(autoload 'org-mode "org" "\
Outline-based notes management and organizer, alias
\"Carsten's outline-mode for keeping track of everything.\"

Org mode develops organizational tasks around a NOTES file which
contains information about projects as plain text.  Org mode is
implemented on top of Outline mode, which is ideal to keep the content
of large files well structured.  It supports ToDo items, deadlines and
time stamps, which magically appear in the diary listing of the Emacs
calendar.  Tables are easily created with a built-in table editor.
Plain text URL-like links connect to websites, emails (VM), Usenet
messages (Gnus), BBDB entries, and any files related to the project.
For printing and sharing of notes, an Org file (or a part of it)
can be exported as a structured ASCII or HTML file.

The following commands are available:

\\{org-mode-map}

(fn)" t)
(autoload 'org-run-like-in-org-mode "org" "\
Run a command, pretending that the current buffer is in Org mode.
This will temporarily bind local variables that are typically bound in
Org mode to the values they have in Org mode, and then interactively
call CMD.

(fn CMD)")
(autoload 'org-open-file "org" "\
Open the file at PATH.
First, this expands any special file name abbreviations.  Then the
configuration variable `org-file-apps' is checked if it contains an
entry for this file type, and if yes, the corresponding command is launched.

If no application is found, Emacs simply visits the file.

With optional prefix argument IN-EMACS, Emacs will visit the file.
With a double \\[universal-argument] \\[universal-argument] prefix arg, Org tries to avoid opening in Emacs
and to use an external application to visit the file.

Optional LINE specifies a line to go to, optional SEARCH a string
to search for.  If LINE or SEARCH is given, the file will be
opened in Emacs, unless an entry from `org-file-apps' that makes
use of groups in a regexp matches.

If you want to change the way frames are used when following a
link, please customize `org-link-frame-setup'.

If the file does not exist, throw an error.

(fn PATH &optional IN-EMACS LINE SEARCH)")
(autoload 'org-open-at-point-global "org" "\
Follow a link or a timestamp like Org mode does.
Also follow links and emails as seen by `thing-at-point'.
This command can be called in any mode to follow an external
link or a timestamp that has Org mode syntax.  Its behavior
is undefined when called on internal links like fuzzy links.
Raise a user error when there is nothing to follow." t)
(autoload 'org-offer-links-in-entry "org" "\
Offer links in the current entry and return the selected link.
If there is only one link, return it.
If NTH is an integer, return the NTH link found.
If ZERO is a string, check also this string for a link, and if
there is one, return it.

(fn BUFFER MARKER &optional NTH ZERO)")
(autoload 'org-switchb "org" "\
Switch between Org buffers.

With `\\[universal-argument]' prefix, restrict available buffers to files.

With `\\[universal-argument] \\[universal-argument]' prefix, restrict available buffers to agenda files.

(fn &optional ARG)" t)
(autoload 'org-cycle-agenda-files "org" "\
Cycle through the files in `org-agenda-files'.
If the current buffer visits an agenda file, find the next one in the list.
If the current buffer does not, find the first agenda file." t)
(autoload 'org-submit-bug-report "org" "\
Submit a bug report on Org via mail.

Don't hesitate to report any problems or inaccurate documentation.

If you don't have setup sending mail from (X)Emacs, please copy the
output buffer into your mail program, as it gives us important
information about your Org version and configuration." t)
(autoload 'org-reload "org" "\
Reload all Org Lisp files.
With prefix arg UNCOMPILED, load the uncompiled versions.

(fn &optional UNCOMPILED)" t)
(autoload 'org-customize "org" "\
Call the customize function with org as argument." t)
(register-definition-prefixes "org" '("org-" "turn-on-org-cdlatex"))



(autoload 'org-toggle-sticky-agenda "org-agenda" "\
Toggle `org-agenda-sticky'.

(fn &optional ARG)" t)
(autoload 'org-agenda "org-agenda" "\
Dispatch agenda commands to collect entries to the agenda buffer.
Prompts for a command to execute.  Any prefix arg will be passed
on to the selected command.  The default selections are:

a     Call `org-agenda-list' to display the agenda for current day or week.
t     Call `org-todo-list' to display the global todo list.
T     Call `org-todo-list' to display the global todo list, select only
      entries with a specific TODO keyword (the user gets a prompt).
m     Call `org-tags-view' to display headlines with tags matching
      a condition  (the user is prompted for the condition).
M     Like `m', but select only TODO entries, no ordinary headlines.
e     Export views to associated files.
s     Search entries for keywords.
S     Search entries for keywords, only with TODO keywords.
/     Multi occur across all agenda files and also files listed
      in `org-agenda-text-search-extra-files'.
<     Restrict agenda commands to buffer, subtree, or region.
      Press several times to get the desired effect.
>     Remove a previous restriction.
#     List \"stuck\" projects.
!     Configure what \"stuck\" means.
C     Configure custom agenda commands.

More commands can be added by configuring the variable
`org-agenda-custom-commands'.  In particular, specific tags and TODO keyword
searches can be pre-defined in this way.

If the current buffer is in Org mode and visiting a file, you can also
first press `<' once to indicate that the agenda should be temporarily
(until the next use of `\\[org-agenda]') restricted to the current file.
Pressing `<' twice means to restrict to the current subtree or region
(if active).

(fn &optional ARG KEYS RESTRICTION)" t)
(autoload 'org-batch-agenda "org-agenda" "\
Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string it is used as a tags/todo match string.
Parameters are alternating variable names and values that will be bound
before running the agenda command.

(fn CMD-KEY &rest PARAMETERS)" nil t)
(autoload 'org-batch-agenda-csv "org-agenda" "\
Run an agenda command in batch mode and send the result to STDOUT.
If CMD-KEY is a string of length 1, it is used as a key in
`org-agenda-custom-commands' and triggers this command.  If it is a
longer string it is used as a tags/todo match string.
Parameters are alternating variable names and values that will be bound
before running the agenda command.

The output gives a line for each selected agenda item.  Each
item is a list of comma-separated values, like this:

category,head,type,todo,tags,date,time,extra,priority-l,priority-n

category     The category of the item
head         The headline, without TODO kwd, TAGS and PRIORITY
type         The type of the agenda entry, can be
                todo               selected in TODO match
                tagsmatch          selected in tags match
                diary              imported from diary
                deadline           a deadline on given date
                scheduled          scheduled on given date
                timestamp          entry has timestamp on given date
                closed             entry was closed on given date
                upcoming-deadline  warning about deadline
                past-scheduled     forwarded scheduled item
                block              entry has date block including g. date
todo         The todo keyword, if any
tags         All tags including inherited ones, separated by colons
date         The relevant date, like 2007-2-14
time         The time, like 15:00-16:50
extra        String with extra planning info
priority-l   The priority letter if any was given
priority-n   The computed numerical priority
agenda-day   The day in the agenda where this is listed

(fn CMD-KEY &rest PARAMETERS)" nil t)
(autoload 'org-store-agenda-views "org-agenda" "\
Store agenda views.

(fn &rest PARAMETERS)" t)
(autoload 'org-batch-store-agenda-views "org-agenda" "\
Run all custom agenda commands that have a file argument.

(fn &rest PARAMETERS)" nil t)
(autoload 'org-agenda-list "org-agenda" "\
Produce a daily/weekly view from all files in variable `org-agenda-files'.
The view will be for the current day or week, but from the overview buffer
you will be able to go to other days/weeks.

With a numeric prefix argument in an interactive call, the agenda will
span ARG days.  Lisp programs should instead specify SPAN to change
the number of days.  SPAN defaults to `org-agenda-span'.

START-DAY defaults to TODAY, or to the most recent match for the weekday
given in `org-agenda-start-on-weekday'.

When WITH-HOUR is non-nil, only include scheduled and deadline
items if they have an hour specification like [h]h:mm.

(fn &optional ARG START-DAY SPAN WITH-HOUR)" t)
(autoload 'org-search-view "org-agenda" "\
Show all entries that contain a phrase or words or regular expressions.

With optional prefix argument TODO-ONLY, only consider entries that are
TODO entries.  The argument STRING can be used to pass a default search
string into this function.  If EDIT-AT is non-nil, it means that the
user should get a chance to edit this string, with cursor at position
EDIT-AT.

The search string can be viewed either as a phrase that should be found as
is, or it can be broken into a number of snippets, each of which must match
in a Boolean way to select an entry.  The default depends on the variable
`org-agenda-search-view-always-boolean'.
Even if this is turned off (the default) you can always switch to
Boolean search dynamically by preceding the first word with  \"+\" or \"-\".

The default is a direct search of the whole phrase, where each space in
the search string can expand to an arbitrary amount of whitespace,
including newlines.

If using a Boolean search, the search string is split on whitespace and
each snippet is searched separately, with logical AND to select an entry.
Words prefixed with a minus must *not* occur in the entry.  Words without
a prefix or prefixed with a plus must occur in the entry.  Matching is
case-insensitive.  Words are enclosed by word delimiters (i.e. they must
match whole words, not parts of a word) if
`org-agenda-search-view-force-full-words' is set (default is nil).

Boolean search snippets enclosed by curly braces are interpreted as
regular expressions that must or (when preceded with \"-\") must not
match in the entry.  Snippets enclosed into double quotes will be taken
as a whole, to include whitespace.

- If the search string starts with an asterisk, search only in headlines.
- If (possibly after the leading star) the search string starts with an
  exclamation mark, this also means to look at TODO entries only, an effect
  that can also be achieved with a prefix argument.
- If (possibly after star and exclamation mark) the search string starts
  with a colon, this will mean that the (non-regexp) snippets of the
  Boolean search must match as full words.

This command searches the agenda files, and in addition the files
listed in `org-agenda-text-search-extra-files' unless a restriction lock
is active.

(fn &optional TODO-ONLY STRING EDIT-AT)" t)
(autoload 'org-todo-list "org-agenda" "\
Show all (not done) TODO entries from all agenda files in a single list.
The prefix arg can be used to select a specific TODO keyword and limit
the list to these.  When using `\\[universal-argument]', you will be prompted
for a keyword.  A numeric prefix directly selects the Nth keyword in
`org-todo-keywords-1'.

(fn &optional ARG)" t)
(autoload 'org-tags-view "org-agenda" "\
Show all headlines for all `org-agenda-files' matching a TAGS criterion.
The prefix arg TODO-ONLY limits the search to TODO entries.

(fn &optional TODO-ONLY MATCH)" t)
(autoload 'org-agenda-list-stuck-projects "org-agenda" "\
Create agenda view for projects that are stuck.
Stuck projects are project that have no next actions.  For the definitions
of what a project is and how to check if it stuck, customize the variable
`org-stuck-projects'.

(fn &rest IGNORE)" t)
(autoload 'org-diary "org-agenda" "\
Return diary information from org files.
This function can be used in a \"sexp\" diary entry in the Emacs calendar.
It accesses org files and extracts information from those files to be
listed in the diary.  The function accepts arguments specifying what
items should be listed.  For a list of arguments allowed here, see the
variable `org-agenda-entry-types'.

The call in the diary file should look like this:

   &%%(org-diary) ~/path/to/some/orgfile.org

Use a separate line for each org file to check.  Or, if you omit the file name,
all files listed in `org-agenda-files' will be checked automatically:

   &%%(org-diary)

If you don't give any arguments (as in the example above), the default value
of `org-agenda-entry-types' is used: (:deadline :scheduled :timestamp :sexp).
So the example above may also be written as

   &%%(org-diary :deadline :timestamp :sexp :scheduled)

The function expects the lisp variables `entry' and `date' to be provided
by the caller, because this is how the calendar works.  Don't use this
function from a program - use `org-agenda-get-day-entries' instead.

(fn &rest ARGS)")
(autoload 'org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item "org-agenda" "\
Do we have a reason to ignore this TODO entry because it has a time stamp?

(fn &optional END)")
(autoload 'org-agenda-set-restriction-lock "org-agenda" "\
Set restriction lock for agenda to current subtree or file.
When in a restricted subtree, remove it.

The restriction will span over the entire file if TYPE is `file',
or if TYPE is (4), or if the cursor is before the first headline
in the file.  Otherwise, only apply the restriction to the current
subtree.

(fn &optional TYPE)" t)
(autoload 'org-calendar-goto-agenda "org-agenda" "\
Compute the Org agenda for the calendar date displayed at the cursor.
This is a command that has to be installed in `calendar-mode-map'." t)
(autoload 'org-agenda-to-appt "org-agenda" "\
Activate appointments found in `org-agenda-files'.

With a `\\[universal-argument]' prefix, refresh the list of appointments.

If FILTER is t, interactively prompt the user for a regular
expression, and filter out entries that don't match it.

If FILTER is a string, use this string as a regular expression
for filtering entries out.

If FILTER is a function, filter out entries against which
calling the function returns nil.  This function takes one
argument: an entry from `org-agenda-get-day-entries'.

FILTER can also be an alist with the car of each cell being
either `headline' or `category'.  For example:

   ((headline \"IMPORTANT\")
    (category \"Work\"))

will only add headlines containing IMPORTANT or headlines
belonging to the \"Work\" category.

ARGS are symbols indicating what kind of entries to consider.
By default `org-agenda-to-appt' will use :deadline*, :scheduled*
(i.e., deadlines and scheduled items with a hh:mm specification)
and :timestamp entries.  See the docstring of `org-diary' for
details and examples.

If an entry has a APPT_WARNTIME property, its value will be used
to override `appt-message-warning-time'.

(fn &optional REFRESH FILTER &rest ARGS)" t)
(register-definition-prefixes "org-agenda" '("org-"))



(register-definition-prefixes "org-archive" '("org-a"))



(register-definition-prefixes "org-attach" '("org-attach-"))



(register-definition-prefixes "org-attach-git" '("org-attach-git-"))



(autoload 'org-capture-string "org-capture" "\
Capture STRING with the template selected by KEYS.

(fn STRING &optional KEYS)" t)
(autoload 'org-capture "org-capture" "\
Capture something.
\\<org-capture-mode-map>
This will let you select a template from `org-capture-templates', and
then file the newly captured information.  The text is immediately
inserted at the target location, and an indirect buffer is shown where
you can edit it.  Pressing `\\[org-capture-finalize]' brings you back to the previous
state of Emacs, so that you can continue your work.

When called interactively with a `\\[universal-argument]' prefix argument GOTO, don't
capture anything, just go to the file/headline where the selected
template stores its notes.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, go to the last note stored.

When called with a `C-0' (zero) prefix, insert a template at point.

When called with a `C-1' (one) prefix, force prompting for a date when
a datetree entry is made.

ELisp programs can set KEYS to a string associated with a template
in `org-capture-templates'.  In this case, interactive selection
will be bypassed.

If `org-capture-use-agenda-date' is non-nil, capturing from the
agenda will use the date at point as the default date.  Then, a
`C-1' prefix will tell the capture process to use the HH:MM time
of the day at point (if any) or the current HH:MM time.

(fn &optional GOTO KEYS)" t)
(autoload 'org-capture-import-remember-templates "org-capture" "\
Set `org-capture-templates' to be similar to `org-remember-templates'." t)
(register-definition-prefixes "org-capture" '("org-capture-"))



(register-definition-prefixes "org-clock" '("org-"))



(register-definition-prefixes "org-colview" '("org-"))



(register-definition-prefixes "org-compat" '("org-" "outline-"))



(autoload 'org-encrypt-entry "org-crypt" "\
Encrypt the content of the current headline." t)
(autoload 'org-decrypt-entry "org-crypt" "\
Decrypt the content of the current headline." t)
(autoload 'org-encrypt-entries "org-crypt" "\
Encrypt all top-level entries in the current buffer." t)
(autoload 'org-decrypt-entries "org-crypt" "\
Decrypt all entries in the current buffer." t)
(autoload 'org-crypt-use-before-save-magic "org-crypt" "\
Add a hook to automatically encrypt entries before a file is saved to disk.")
(register-definition-prefixes "org-crypt" '("org-"))



(register-definition-prefixes "org-ctags" '("org-"))



(autoload 'org-cycle "org-cycle" "\
TAB-action and visibility cycling for Org mode.

This is the command invoked in Org mode by the `TAB' key.  Its main
purpose is outline visibility cycling, but it also invokes other actions
in special contexts.

When this function is called with a `\\[universal-argument]' prefix, rotate the entire
buffer through 3 states (global cycling)
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

With a `\\[universal-argument] \\[universal-argument]' prefix argument, switch to the startup visibility,
determined by the variable `org-startup-folded', and by any VISIBILITY
properties in the buffer.

With a `\\[universal-argument] \\[universal-argument] \\[universal-argument]' prefix argument, show the entire buffer, including
any drawers.

When inside a table, re-align the table and move to the next field.

When point is at the beginning of a headline, rotate the subtree started
by this line through 3 different states (local cycling)
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.
               From this state, you can move to one of the children
               and zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.
If there is no subtree, switch directly from CHILDREN to FOLDED.

When point is at the beginning of an empty headline and the variable
`org-cycle-level-after-item/entry-creation' is set, cycle the level
of the headline by demoting and promoting it to likely levels.  This
speeds up creation document structure by pressing `TAB' once or several
times right after creating a new headline.

When there is a numeric prefix, go up to a heading with level ARG, do
a `show-subtree' and return to the previous cursor position.  If ARG
is negative, go up that many levels.

When point is not at the beginning of a headline, execute the global
binding for `TAB', which is re-indenting the line.  See the option
`org-cycle-emulate-tab' for details.

As a special case, if point is at the very beginning of the buffer, if
there is no headline there, and if the variable `org-cycle-global-at-bob'
is non-nil, this function acts as if called with prefix argument (`\\[universal-argument] TAB',
same as `S-TAB') also when called without prefix argument.

(fn &optional ARG)" t)
(autoload 'org-cycle-global "org-cycle" "\
Cycle the global visibility.  For details see `org-cycle'.
With `\\[universal-argument]' prefix ARG, switch to startup visibility.
With a numeric prefix, show all headlines up to that level.

(fn &optional ARG)" t)
(register-definition-prefixes "org-cycle" '("org-"))



(register-definition-prefixes "org-datetree" '("org-datetree-"))



(register-definition-prefixes "org-duration" '("org-duration-"))



(register-definition-prefixes "org-element" '("org-element-"))



(register-definition-prefixes "org-element-ast" '("org-element-"))



(register-definition-prefixes "org-entities" '("org-entit"))



(register-definition-prefixes "org-faces" '("org-"))



(register-definition-prefixes "org-feed" '("org-feed-"))



(register-definition-prefixes "org-fold" '("org-fold-"))



(register-definition-prefixes "org-fold-core" '("org-fold-core-"))



(register-definition-prefixes "org-footnote" '("org-footnote-"))



(register-definition-prefixes "org-goto" '("org-goto-"))



(register-definition-prefixes "org-habit" '("org-"))



(register-definition-prefixes "org-id" '("org-id-"))



(register-definition-prefixes "org-indent" '("org-indent-"))



(register-definition-prefixes "org-inlinetask" '("org-inlinetask-"))



(register-definition-prefixes "org-keys" '("org-"))



(register-definition-prefixes "org-lint" '("org-lint-"))



(register-definition-prefixes "org-list" '("org-"))



(register-definition-prefixes "org-macro" '("org-macro-"))



(register-definition-prefixes "org-macs" '("org-"))



(register-definition-prefixes "org-mobile" '("org-mobile-"))



(register-definition-prefixes "org-mouse" '("org-"))



(register-definition-prefixes "org-num" '("org-num-"))



(register-definition-prefixes "org-pcomplete" '("org-" "pcomplete/org-mode/"))



(register-definition-prefixes "org-persist" '("org-persist-"))



(register-definition-prefixes "org-plot" '("org-"))



(register-definition-prefixes "org-protocol" '("org-"))



(register-definition-prefixes "org-refile" '("org-"))



(register-definition-prefixes "org-src" '("org-"))



(register-definition-prefixes "org-table" '("org"))



(register-definition-prefixes "org-tempo" '("org-tempo-"))



(register-definition-prefixes "org-timer" '("org-timer-"))



(autoload 'org-release "org-version" "\
The release version of Org.
Inserted by installing Org mode or when a release is made.")
(autoload 'org-git-version "org-version" "\
The Git version of Org mode.
Inserted by installing Org or when a release is made.")



(register-definition-prefixes "ox" '("org-"))



(register-definition-prefixes "ox-ascii" '("org-"))



(register-definition-prefixes "ox-beamer" '("org-beamer-"))



(register-definition-prefixes "ox-html" '("org-"))



(register-definition-prefixes "ox-icalendar" '("org-icalendar-"))



(autoload 'org-koma-letter-export-as-latex "ox-koma-letter" "\
Export current buffer as a KOMA Scrlttr2 letter.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Export is done in a buffer named \"*Org KOMA-LETTER Export*\".  It
will be displayed if `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)
(autoload 'org-koma-letter-export-to-latex "ox-koma-letter" "\
Export current buffer as a KOMA Scrlttr2 letter (tex).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

When optional argument PUB-DIR is set, use it as the publishing
directory.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)
(autoload 'org-koma-letter-export-to-pdf "ox-koma-letter" "\
Export current buffer as a KOMA Scrlttr2 letter (pdf).

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

When optional argument BODY-ONLY is non-nil, only write code
between \"\\begin{letter}\" and \"\\end{letter}\".

EXT-PLIST, when provided, is a property list with external
parameters overriding Org default settings, but still inferior to
file-local settings.

Return PDF file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY BODY-ONLY EXT-PLIST)" t)
(register-definition-prefixes "ox-koma-letter" '("org-koma-letter-"))



(register-definition-prefixes "ox-latex" '("org-"))



(register-definition-prefixes "ox-man" '("org-man-"))



(register-definition-prefixes "ox-md" '("org-"))



(register-definition-prefixes "ox-odt" '("org-odt-"))



(register-definition-prefixes "ox-org" '("org-org-"))



(register-definition-prefixes "ox-publish" '("org-publish-"))



(register-definition-prefixes "ox-texinfo" '("org-"))


(provide 'org-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ox-pandoc-20240710.1424/ox-pandoc-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-pandoc-export-to-asciidoc "ox-pandoc" "\
Export to asciidoc.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-asciidoc-and-open "ox-pandoc" "\
Export to asciidoc and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-asciidoc "ox-pandoc" "\
Export as asciidoc.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-beamer "ox-pandoc" "\
Export to beamer.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-beamer-and-open "ox-pandoc" "\
Export to beamer and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-beamer "ox-pandoc" "\
Export as beamer.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-beamer-pdf "ox-pandoc" "\
Export to beamer-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-beamer-pdf-and-open "ox-pandoc" "\
Export to beamer-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-commonmark "ox-pandoc" "\
Export to commonmark.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-commonmark-and-open "ox-pandoc" "\
Export to commonmark and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-commonmark "ox-pandoc" "\
Export as commonmark.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-context "ox-pandoc" "\
Export to context.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-context-and-open "ox-pandoc" "\
Export to context and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-context "ox-pandoc" "\
Export as context.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-context-pdf "ox-pandoc" "\
Export to context-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-context-pdf-and-open "ox-pandoc" "\
Export to context-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docbook4 "ox-pandoc" "\
Export to docbook4.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docbook4-and-open "ox-pandoc" "\
Export to docbook4 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-docbook4 "ox-pandoc" "\
Export as docbook4.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docbook5 "ox-pandoc" "\
Export to docbook5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docbook5-and-open "ox-pandoc" "\
Export to docbook5 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-docbook5 "ox-pandoc" "\
Export as docbook5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docx "ox-pandoc" "\
Export to docx.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-docx-and-open "ox-pandoc" "\
Export to docx and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-dokuwiki "ox-pandoc" "\
Export to dokuwiki.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-dokuwiki-and-open "ox-pandoc" "\
Export to dokuwiki and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-dokuwiki "ox-pandoc" "\
Export as dokuwiki.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-dzslides "ox-pandoc" "\
Export to dzslides.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-dzslides-and-open "ox-pandoc" "\
Export to dzslides and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-dzslides "ox-pandoc" "\
Export as dzslides.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-epub2 "ox-pandoc" "\
Export to epub2.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-epub2-and-open "ox-pandoc" "\
Export to epub2 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-epub3 "ox-pandoc" "\
Export to epub3.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-epub3-and-open "ox-pandoc" "\
Export to epub3 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-fb2 "ox-pandoc" "\
Export to fb2.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-fb2-and-open "ox-pandoc" "\
Export to fb2 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-fb2 "ox-pandoc" "\
Export as fb2.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-gfm "ox-pandoc" "\
Export to gfm.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-gfm-and-open "ox-pandoc" "\
Export to gfm and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-gfm "ox-pandoc" "\
Export as gfm.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-haddock "ox-pandoc" "\
Export to haddock.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-haddock-and-open "ox-pandoc" "\
Export to haddock and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-haddock "ox-pandoc" "\
Export as haddock.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html4 "ox-pandoc" "\
Export to html4.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html4-and-open "ox-pandoc" "\
Export to html4 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-html4 "ox-pandoc" "\
Export as html4.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html5 "ox-pandoc" "\
Export to html5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html5-and-open "ox-pandoc" "\
Export to html5 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-html5 "ox-pandoc" "\
Export as html5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html5-pdf "ox-pandoc" "\
Export to html5-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-html5-pdf-and-open "ox-pandoc" "\
Export to html5-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-icml "ox-pandoc" "\
Export to icml.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-icml-and-open "ox-pandoc" "\
Export to icml and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-icml "ox-pandoc" "\
Export as icml.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-jats "ox-pandoc" "\
Export to jats.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-jats-and-open "ox-pandoc" "\
Export to jats and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-jats "ox-pandoc" "\
Export as jats.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-jira "ox-pandoc" "\
Export to jira.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-jira "ox-pandoc" "\
Export as jira.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-json "ox-pandoc" "\
Export to json.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-json-and-open "ox-pandoc" "\
Export to json and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-json "ox-pandoc" "\
Export as json.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-latex "ox-pandoc" "\
Export to latex.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-latex-and-open "ox-pandoc" "\
Export to latex and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-latex "ox-pandoc" "\
Export as latex.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-latex-pdf "ox-pandoc" "\
Export to latex-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-latex-pdf-and-open "ox-pandoc" "\
Export to latex-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-man "ox-pandoc" "\
Export to man.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-man-and-open "ox-pandoc" "\
Export to man and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-man "ox-pandoc" "\
Export as man.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown "ox-pandoc" "\
Export to markdown.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown-and-open "ox-pandoc" "\
Export to markdown and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-markdown "ox-pandoc" "\
Export as markdown.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_mmd "ox-pandoc" "\
Export to markdown_mmd.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_mmd-and-open "ox-pandoc" "\
Export to markdown_mmd and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-markdown_mmd "ox-pandoc" "\
Export as markdown_mmd.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_phpextra "ox-pandoc" "\
Export to markdown_phpextra.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_phpextra-and-open "ox-pandoc" "\
Export to markdown_phpextra and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-markdown_phpextra "ox-pandoc" "\
Export as markdown_phpextra.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_strict "ox-pandoc" "\
Export to markdown_strict.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-markdown_strict-and-open "ox-pandoc" "\
Export to markdown_strict and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-markdown_strict "ox-pandoc" "\
Export as markdown_strict.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-mediawiki "ox-pandoc" "\
Export to mediawiki.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-mediawiki-and-open "ox-pandoc" "\
Export to mediawiki and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-mediawiki "ox-pandoc" "\
Export as mediawiki.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-ms "ox-pandoc" "\
Export to ms.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-ms-and-open "ox-pandoc" "\
Export to ms and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-ms "ox-pandoc" "\
Export as ms.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-ms-pdf "ox-pandoc" "\
Export to ms-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-ms-pdf-and-open "ox-pandoc" "\
Export to ms-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-muse "ox-pandoc" "\
Export to muse.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-muse-and-open "ox-pandoc" "\
Export to muse and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-muse "ox-pandoc" "\
Export as muse.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-native "ox-pandoc" "\
Export to native.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-native-and-open "ox-pandoc" "\
Export to native and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-native "ox-pandoc" "\
Export as native.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-odt "ox-pandoc" "\
Export to odt.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-odt-and-open "ox-pandoc" "\
Export to odt and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-opendocument "ox-pandoc" "\
Export to opendocument.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-opendocument-and-open "ox-pandoc" "\
Export to opendocument and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-opendocument "ox-pandoc" "\
Export as opendocument.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-opml "ox-pandoc" "\
Export to opml.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-opml-and-open "ox-pandoc" "\
Export to opml and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-opml "ox-pandoc" "\
Export as opml.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-org "ox-pandoc" "\
Export to org.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-org-and-open "ox-pandoc" "\
Export to org and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-org "ox-pandoc" "\
Export as org.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-plain "ox-pandoc" "\
Export to plain.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-plain-and-open "ox-pandoc" "\
Export to plain and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-plain "ox-pandoc" "\
Export as plain.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-pptx "ox-pandoc" "\
Export to pptx.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-pptx-and-open "ox-pandoc" "\
Export to pptx and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-revealjs "ox-pandoc" "\
Export to revealjs.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-revealjs-and-open "ox-pandoc" "\
Export to revealjs and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-revealjs "ox-pandoc" "\
Export as revealjs.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-rst "ox-pandoc" "\
Export to rst.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-rst-and-open "ox-pandoc" "\
Export to rst and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-rst "ox-pandoc" "\
Export as rst.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-rtf "ox-pandoc" "\
Export to rtf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-rtf-and-open "ox-pandoc" "\
Export to rtf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-rtf "ox-pandoc" "\
Export as rtf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-s5 "ox-pandoc" "\
Export to s5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-s5-and-open "ox-pandoc" "\
Export to s5 and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-s5 "ox-pandoc" "\
Export as s5.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-slideous "ox-pandoc" "\
Export to slideous.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-slideous-and-open "ox-pandoc" "\
Export to slideous and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-slideous "ox-pandoc" "\
Export as slideous.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-slidy "ox-pandoc" "\
Export to slidy.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-slidy-and-open "ox-pandoc" "\
Export to slidy and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-slidy "ox-pandoc" "\
Export as slidy.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-tei "ox-pandoc" "\
Export to tei.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-tei-and-open "ox-pandoc" "\
Export to tei and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-tei "ox-pandoc" "\
Export as tei.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-texinfo "ox-pandoc" "\
Export to texinfo.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-texinfo-and-open "ox-pandoc" "\
Export to texinfo and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-texinfo "ox-pandoc" "\
Export as texinfo.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-textile "ox-pandoc" "\
Export to textile.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-textile-and-open "ox-pandoc" "\
Export to textile and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-textile "ox-pandoc" "\
Export as textile.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-typst "ox-pandoc" "\
Export to typst.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-typst-and-open "ox-pandoc" "\
Export to typst and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-typst "ox-pandoc" "\
Export as typst.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-typst-pdf "ox-pandoc" "\
Export to typst-pdf.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-typst-pdf-and-open "ox-pandoc" "\
Export to typst-pdf and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-zimwiki "ox-pandoc" "\
Export to zimwiki.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-to-zimwiki-and-open "ox-pandoc" "\
Export to zimwiki and open.

(fn &optional A S V B E)" t)
(autoload 'org-pandoc-export-as-zimwiki "ox-pandoc" "\
Export as zimwiki.

(fn &optional A S V B E)" t)
(register-definition-prefixes "ox-pandoc" '("org-pandoc-"))


(provide 'ox-pandoc-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ox-gfm-20231215.1901/ox-gfm-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-gfm-export-as-markdown "ox-gfm" "\
Export current buffer to a Github Flavored Markdown buffer.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting buffer should be accessible
through the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Export is done in a buffer named \"*Org GFM Export*\", which will
be displayed when `org-export-show-temporary-export-buffer' is
non-nil.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t)
(autoload 'org-gfm-convert-region-to-md "ox-gfm" "\
Convert the region to Github Flavored Markdown.
This can be used in any buffer, this function assume that the
current region has org-mode syntax.  For example, you can write
an itemized list in org-mode syntax in a Markdown buffer and use
this command to convert it." t)
(autoload 'org-gfm-export-to-markdown "ox-gfm" "\
Export current buffer to a Github Flavored Markdown file.

If narrowing is active in the current buffer, only export its
narrowed part.

If a region is active, export that region.

A non-nil optional argument ASYNC means the process should happen
asynchronously.  The resulting file should be accessible through
the `org-export-stack' interface.

When optional argument SUBTREEP is non-nil, export the sub-tree
at point, extracting information from the headline properties
first.

When optional argument VISIBLE-ONLY is non-nil, don't export
contents of hidden elements.

Return output file's name.

(fn &optional ASYNC SUBTREEP VISIBLE-ONLY)" t)
(autoload 'org-gfm-publish-to-gfm "ox-gfm" "\
Publish an org file to Markdown.
FILENAME is the filename of the Org file to be published.  PLIST
is the property list for the given project.  PUB-DIR is the
publishing directory.
Return output file name.

(fn PLIST FILENAME PUB-DIR)")
(register-definition-prefixes "ox-gfm" '("gfm-table-" "org-gfm-" "width-cookies"))


(provide 'ox-gfm-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ov-20230522.1117/ov-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'ov-clear "ov" "\
Clear overlays satisfying a condition.

If PROP-OR-BEG is a symbol, clear overlays with this property set to non-nil.

If VAL-OR-END is non-nil, the specified property's value should
`equal' to this value.

If both of these are numbers, clear the overlays between these points.

If BEG and END are numbers, clear the overlays with specified
property and value between these points.

With no arguments, clear all overlays in the buffer.

(fn &optional PROP-OR-BEG (VAL-OR-END \\='any) BEG END)" t)
(register-definition-prefixes "ov" 'nil)


(provide 'ov-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-super-agenda-20240916.1753/org-super-agenda-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar org-super-agenda-mode nil "\
Non-nil if Org-Super-Agenda mode is enabled.
See the `org-super-agenda-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-super-agenda-mode'.")
(custom-autoload 'org-super-agenda-mode "org-super-agenda" nil)
(autoload 'org-super-agenda-mode "org-super-agenda" "\
Group items in Org agenda views according to `org-super-agenda-groups'.
With prefix argument ARG, turn on if positive, otherwise off.

(fn &optional ARG)" t)
(register-definition-prefixes "org-super-agenda" '("org-super-agenda-"))


(provide 'org-super-agenda-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/emacsql-20250223.1743/emacsql-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'emacsql-show-last-sql "emacsql" "\
Display the compiled SQL of the s-expression SQL expression before point.
A prefix argument causes the SQL to be printed into the current buffer.

(fn &optional PREFIX)" t)
(register-definition-prefixes "emacsql" '("emacsql-"))



(register-definition-prefixes "emacsql-compiler" '("emacsql-"))



(register-definition-prefixes "emacsql-mysql" '("emacsql-mysql-"))



(register-definition-prefixes "emacsql-pg" '("emacsql-pg-connection"))



(register-definition-prefixes "emacsql-psql" '("emacsql-psql-"))



(register-definition-prefixes "emacsql-sqlite" '("emacsql-"))



(register-definition-prefixes "emacsql-sqlite-builtin" '("emacsql-sqlite-builtin-connection"))



(register-definition-prefixes "emacsql-sqlite-module" '("emacsql-sqlite-module-connection"))


(provide 'emacsql-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-roam-20250218.1722/org-roam-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-roam-list-files "org-roam" "\
Return a list of all Org-roam files under `org-roam-directory'.
See `org-roam-file-p' for how each file is determined to be as
part of Org-Roam.")
(register-definition-prefixes "org-roam" '("org-roam-"))



(autoload 'org-roam-capture- "org-roam-capture" "\
Main entry point of `org-roam-capture' module.
GOTO and KEYS correspond to `org-capture' arguments.
INFO is a plist for filling up Org-roam's capture templates.
NODE is an `org-roam-node' construct containing information about the node.
PROPS is a plist containing additional Org-roam properties for each template.
TEMPLATES is a list of org-roam templates.

(fn &key GOTO KEYS NODE INFO PROPS TEMPLATES)")
(autoload 'org-roam-capture "org-roam-capture" "\
Launches an `org-capture' process for a new or existing node.
This uses the templates defined at `org-roam-capture-templates'.
Arguments GOTO and KEYS see `org-capture'.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed along to the underlying `org-roam-capture-'.

(fn &optional GOTO KEYS &key FILTER-FN TEMPLATES INFO)" t)
(register-definition-prefixes "org-roam-capture" '("org-roam-capture-"))



(register-definition-prefixes "org-roam-compat" '("org-roam--"))



(autoload 'org-roam-dailies-capture-today "org-roam-dailies" "\
Create an entry in the daily-note for today.
When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-today "org-roam-dailies" "\
Find the daily-note for today, creating it if necessary.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-tomorrow "org-roam-dailies" "\
Create an entry in the daily-note for tomorrow.

With numeric argument N, use the daily-note N days in the future.

With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-tomorrow "org-roam-dailies" "\
Find the daily-note for tomorrow, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-yesterday "org-roam-dailies" "\
Create an entry in the daily-note for yesteday.

With numeric argument N, use the daily-note N days in the past.

When GOTO is non-nil, go the note without creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional GOTO KEYS)" t)
(autoload 'org-roam-dailies-goto-yesterday "org-roam-dailies" "\
Find the daily-note for yesterday, creating it if necessary.

With numeric argument N, use the daily-note N days in the
future.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn N &optional KEYS)" t)
(autoload 'org-roam-dailies-capture-date "org-roam-dailies" "\
Create an entry in the daily-note for a date using the calendar.
Prefer past dates, unless PREFER-FUTURE is non-nil.
With a `C-u' prefix or when GOTO is non-nil, go the note without
creating an entry.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional GOTO PREFER-FUTURE KEYS)" t)
(autoload 'org-roam-dailies-goto-date "org-roam-dailies" "\
Find the daily-note for a date using the calendar, creating it if necessary.
Prefer past dates, unless PREFER-FUTURE is non-nil.

ELisp programs can set KEYS to a string associated with a template.
In this case, interactive selection will be bypassed.

(fn &optional PREFER-FUTURE KEYS)" t)
(autoload 'org-roam-dailies-find-directory "org-roam-dailies" "\
Find and open `org-roam-dailies-directory'." t)
(register-definition-prefixes "org-roam-dailies" '("org-roam-dailies-"))



(autoload 'org-roam-db-sync "org-roam-db" "\
Synchronize the cache state with the current Org files on-disk.
If FORCE, force a rebuild of the cache from scratch.

(fn &optional FORCE)" t)
(defvar org-roam-db-autosync-mode nil "\
Non-nil if Org-Roam-Db-Autosync mode is enabled.
See the `org-roam-db-autosync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `org-roam-db-autosync-mode'.")
(custom-autoload 'org-roam-db-autosync-mode "org-roam-db" nil)
(autoload 'org-roam-db-autosync-mode "org-roam-db" "\
Global minor mode to keep your Org-roam session automatically synchronized.

Through the session this will continue to setup your
buffers (that are Org-roam file visiting), keep track of the
related changes, maintain cache consistency and incrementally
update the currently active database.

If you need to manually trigger resync of the currently active
database, see `org-roam-db-sync' command.

This is a global minor mode.  If called interactively, toggle the
`Org-Roam-Db-Autosync mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-roam-db-autosync-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'org-roam-db-autosync-enable "org-roam-db" "\
Activate `org-roam-db-autosync-mode'.")
(register-definition-prefixes "org-roam-db" '("emacsql-constraint" "org-roam-db"))



(register-definition-prefixes "org-roam-export" '("org-roam-export--org-html--reference"))



(autoload 'org-roam-graph "org-roam-graph" "\
Build and possibly display a graph for NODE.
ARG may be any of the following values:
  - nil       show the graph.
  - `\\[universal-argument]'     show the graph for NODE.
  - `\\[universal-argument]' N   show the graph for NODE limiting nodes to N steps.

(fn &optional ARG NODE)" t)
(register-definition-prefixes "org-roam-graph" '("org-roam-"))



(autoload 'org-roam-update-org-id-locations "org-roam-id" "\
Scan Org-roam files to update `org-id' related state.
This is like `org-id-update-id-locations', but will automatically
use the currently bound `org-directory' and `org-roam-directory'
along with DIRECTORIES (if any), where the lookup for files in
these directories will be always recursive.

Note: Org-roam doesn't have hard dependency on
`org-id-locations-file' to lookup IDs for nodes that are stored
in the database, but it still tries to properly integrates with
`org-id'. This allows the user to cross-reference IDs outside of
the current `org-roam-directory', and also link with \"id:\"
links to headings/files within the current `org-roam-directory'
that are excluded from identification in Org-roam as
`org-roam-node's, e.g. with \"ROAM_EXCLUDE\" property.

(fn &rest DIRECTORIES)" t)
(register-definition-prefixes "org-roam-id" '("org-roam-id-"))



(register-definition-prefixes "org-roam-log" '("org-roam-log-"))



(autoload 'org-roam-migrate-wizard "org-roam-migrate" "\
Migrate all notes from to be compatible with Org-roam v2.
1. Convert all notes from v1 format to v2.
2. Rebuild the cache.
3. Replace all file links with ID links." t)
(register-definition-prefixes "org-roam-migrate" '("org-roam-migrate-"))



(autoload 'org-roam-buffer-display-dedicated "org-roam-mode" "\
Launch NODE dedicated Org-roam buffer.
Unlike the persistent `org-roam-buffer', the contents of this
buffer won't be automatically changed and will be held in place.

In interactive calls prompt to select NODE, unless called with
`universal-argument', in which case NODE will be set to
`org-roam-node-at-point'.

(fn NODE)" t)
(register-definition-prefixes "org-roam-mode" '("org-roam-"))



(autoload 'org-roam-node-find "org-roam-node" "\
Find and open an Org-roam node by its title or alias.
INITIAL-INPUT is the initial input for the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
If OTHER-WINDOW, visit the NODE in another window.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)

(fn &optional OTHER-WINDOW INITIAL-INPUT FILTER-FN PRED &key TEMPLATES)" t)
(autoload 'org-roam-node-random "org-roam-node" "\
Find and open a random Org-roam node.
With prefix argument OTHER-WINDOW, visit the node in another
window instead.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional OTHER-WINDOW FILTER-FN)" t)
(autoload 'org-roam-node-insert "org-roam-node" "\
Find an Org-roam node and insert (where the point is) an \"id:\" link to it.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.
The TEMPLATES, if provided, override the list of capture templates (see
`org-roam-capture-'.)
The INFO, if provided, is passed to the underlying `org-roam-capture-'.

(fn &optional FILTER-FN &key TEMPLATES INFO)" t)
(autoload 'org-roam-refile "org-roam-node" "\
Refile node at point to an org-roam NODE.

If region is active, then use it instead of the node at point.

(fn NODE)" t)
(autoload 'org-roam-extract-subtree "org-roam-node" "\
Convert current subtree at point to a node, and extract it into a new file." t)
(autoload 'org-roam-ref-find "org-roam-node" "\
Find and open an Org-roam node that's dedicated to a specific ref.
INITIAL-INPUT is the initial input to the prompt.
FILTER-FN is a function to filter out nodes: it takes an `org-roam-node',
and when nil is returned the node will be filtered out.

(fn &optional INITIAL-INPUT FILTER-FN)" t)
(register-definition-prefixes "org-roam-node" '("org-roam-"))



(register-definition-prefixes "org-roam-overlay" '("org-roam-overlay-"))



(register-definition-prefixes "org-roam-protocol" '("org-roam-"))



(autoload 'org-roam-version "org-roam-utils" "\
Return `org-roam' version.
Interactively, or when MESSAGE is non-nil, show in the echo area.

(fn &optional MESSAGE)" t)
(autoload 'org-roam-diagnostics "org-roam-utils" "\
Collect and print info for `org-roam' issues." t)
(register-definition-prefixes "org-roam-utils" '("org-roam-"))


(provide 'org-roam-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-roam-ql-20241231.1802/org-roam-ql-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-roam-ql-nodes "org-roam-ql" "\
Convert SOURCE-OR-QUERY to org-roam-nodes.
if SORT-FN is provided, the returned values will be sorted with it.

SOURCE-OR-QUERY can be one of the following:
- A org-roam-ql query.
- A symbol or string referring to a saved query registered using
  `org-roam-ql-add-saved-query'. If a string is used, it will be
  interned to a symbol.
- A string name of a org-roam-ql bookmark.
- A `buffer-name' of a `org-roam-mode' buffer.
- A list of params that can be passed to `org-roam-db-query'.  Expected
  to have the form (QUERY ARG1 ARG2 ARG3...).  `org-roam-db-query' will
  called with the list or parameters as: (org-roam-db-query QUERY ARG1
  ARG2 ARG3...).  The first element in each row in the result from the
  query is expected to have the ID of a corresponding node, which will
  be conerted to a org-roam-node.  QUERY can be a complete query.  If
  the query is going to be of the form [:select [id] :from nodes
  :where (= todo \"TODO\")], you can omit the part till after
  :where i.e., pass only [(= todo \"TODO\")] and the rest will get
  appended in the front.
- A list of org-roam-nodes or an org-roam-node.
- A function that returns a list of org-roam-nodes.

SORT-FN can be a function that takes two org-roam-nodes, and
compatible with `seq-sort'.  Or it can be any regsitered sort
functions with `org-roam-ql-register-sort-fn'.

(fn SOURCE-OR-QUERY &optional SORT-FN)")
(autoload 'org-roam-ql-add-saved-query "org-roam-ql" "\
Create saved QUERY with NAME and DOCSTRING.
QUERY can be an org-roam-ql query, a list of params that can be passed
to `org-roam-db-query' (see `org-roam-ql-nodes') or a function which
can be used with `org-roam-nodes'.
NAME can be a string or a symbol. Under the hood, it is stored as a
symbol. Hence if a string is passed, it will be saved with a symbol
with name NAME.

(fn NAME DOCSTRING QUERY)")
(function-put 'org-roam-ql-add-saved-query 'lisp-indent-function 'defun)
(function-put 'org-roam-ql-add-saved-query 'doc-string-elt 2)
(autoload 'org-roam-ql-search "org-roam-ql" "\
Get nodes that match SOURCE-OR-QUERY and display in org-roam-ql
buffer.  See `org-roam-ql-nodes' for what SOURCE-OR-QUERY can be.
TITLE is a title to associate with the view.  Reesults will be
displayed in a org-roam-ql buffer.  SORT-FN is used for sorting the
results.  It can be a string name of a slot or a predicate function
which can be used to sort the nodes.  See `org-roam-nodes' for more
info on this

(fn SOURCE-OR-QUERY &optional TITLE SORT-FN)" t)
(autoload 'org-roam-ql-defpred "org-roam-ql" "\
Create a org-roam-ql predicate with the NAME.
DOCSTRING is the docstring of the predicate.
The COMPARISON-FUNCTION is a function that returns non-nil if this
predicate doesn't fail for a given org-roam-node.  The first value
passed to this function would be the value from calling the
EXTRACTION-FUNCTION with the respective node, and the remainder of the
arguments from the predicate itself.

If any predicate or expansion function with same NAME exists, it will be
overwritten.

(fn NAME DOCSTRING EXTRACTION-FUNCTION COMPARISON-FUNCTION)")
(function-put 'org-roam-ql-defpred 'lisp-indent-function 'defun)
(function-put 'org-roam-ql-defpred 'doc-string-elt 2)
(autoload 'org-roam-ql-defexpansion "org-roam-ql" "\
Add an EXPANSION-FUNCTION identified by NAME in an org-roam-ql query.
DOCSTRING is the docstring of the predicate.
The EXPANSION-FUNCTION should take the parameters
passed in the query and return values that can be passed to
  `org-roam-nodes'

If any predicate or expansion function with same NAME exists, it will be
overwritten.

(fn NAME DOCSTRING EXPANSION-FUNCTION)")
(function-put 'org-roam-ql-defexpansion 'lisp-indent-function 'defun)
(function-put 'org-roam-ql-defexpansion 'doc-string-elt 2)
(autoload 'org-roam-ql-register-sort-fn "org-roam-ql" "\
Register SORT-FUNCTION with name FUNCTION-NAME.
The function should take two org-roam-nodes and return a truth value,
which is used to sort, i.e., if non-nil, the first node would be
before the second node passed to the function.  Uses `seq-sort'.  If a
sort-function with the given name already exists, it would be
overwritten.

(fn FUNCTION-NAME SORT-FUNCTION)")
(function-put 'org-roam-ql-register-sort-fn 'lisp-indent-function 'defun)
(autoload 'org-roam-ql-agenda-buffer-from-roam-buffer "org-roam-ql" "\
Convert a roam buffer to agenda buffer." t)
(autoload 'org-roam-ql-refresh-buffer "org-roam-ql" "\
Refresh org-roam-ql buffer (agenda/org-roam)." t)
(autoload 'org-roam-ql-convert-roam-buffer-to-roam-ql-buffer "org-roam-ql" "\
Convert a `org-roam-mode' buffer to a `org-roam-ql-mode' buffer." t)
(register-definition-prefixes "org-roam-ql" '("org-"))


(provide 'org-roam-ql-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-ql-20241107.345/org-ql-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-ql-select "org-ql" "\
Return items matching QUERY in BUFFERS-OR-FILES.

BUFFERS-OR-FILES is a file or buffer, a list of files and/or
buffers, or a function which returns such a list.

QUERY is an `org-ql' query sexp (quoted, since this is a
function).

ACTION is a function which is called on each matching entry with
point at the beginning of its heading.  It may be:

- `element' or nil: Equivalent to `org-element-headline-parser'.

- `element-with-markers': Equivalent to calling
  `org-element-headline-parser', with markers added using
  `org-ql--add-markers'.  Suitable for formatting with
  `org-ql-view--format-element', allowing insertion into an Org
  Agenda-like buffer.

- A sexp, which will be byte-compiled into a lambda function.

- A function symbol.

If NARROW is non-nil, buffers are not widened (the default is to
widen and search the entire buffer).

SORT is either nil, in which case items are not sorted; or one or
a list of defined `org-ql' sorting methods (`date', `deadline',
`scheduled', `closed', `todo', `priority', `reverse', or `random'); or a
user-defined comparator function that accepts two items as
arguments and returns nil or non-nil.  Sorting methods are
applied in the order given (i.e. later methods override earlier
ones), and `reverse' may be used more than once.

For example, `(date priority)' would present items with the
highest priority first, and within each priority the oldest items
would appear first.  In contrast, `(date reverse priority)' would
also present items with the highest priority first, but within
each priority the newest items would appear first.

(fn BUFFERS-OR-FILES QUERY &key ACTION NARROW SORT)")
(function-put 'org-ql-select 'lisp-indent-function 'defun)
(autoload 'org-ql-query "org-ql" "\
Like `org-ql-select', but arguments are named more like a SQL query.

SELECT corresponds to the `org-ql-select' argument ACTION.  It is
the function called on matching headings, the results of which
are returned by this function.  It may be:

- `element' or nil: Equivalent to `org-element-headline-parser'.

- `element-with-markers': Equivalent to
  `org-element-headline-parser', with markers added using
  `org-ql--add-markers'.  Suitable for formatting with
  `org-ql-view--format-element', allowing insertion into an Org
  Agenda-like buffer.

- A sexp, which will be byte-compiled into a lambda function.

- A function symbol.

FROM corresponds to the `org-ql-select' argument BUFFERS-OR-FILES.
It may be one or a list of file paths and/or buffers.

WHERE corresponds to the `org-ql-select' argument QUERY.  It
should be an `org-ql' query sexp.

ORDER-BY corresponds to the `org-ql-select' argument SORT, which
see.

NARROW corresponds to the `org-ql-select' argument NARROW.

(fn &key (SELECT \\='element-with-markers) FROM WHERE NARROW ORDER-BY)")
(function-put 'org-ql-query 'lisp-indent-function 0)
(register-definition-prefixes "org-ql" '("org-ql-"))



(autoload 'org-ql-completing-read "org-ql-completing-read" "\
Return marker at entry in BUFFERS-FILES selected with `org-ql'.
PROMPT is shown to the user.

NARROWP is passed to `org-ql-select', which see.

QUERY-PREFIX may be a string to prepend to the query entered by
the user (e.g. use \"heading:\" to only search headings, easily
creating a custom command that saves the user from having to type
it).

QUERY-FILTER may be a function through which the query the user
types is filtered before execution (e.g. it could replace spaces
with commas to turn multiple tokens, which would normally be
treated as multiple predicates, into multiple arguments to a
single predicate).

(fn BUFFERS-FILES &key QUERY-PREFIX QUERY-FILTER NARROWP (ACTION #\\='org-ql-completing-read-action) (SNIPPET #\\='org-ql-completing-read-snippet) (PATH #\\='org-ql-completing-read-path) (ACTION-FILTER #\\='list) (PROMPT \"Find entry: \"))")
(function-put 'org-ql-completing-read 'lisp-indent-function 'defun)
(register-definition-prefixes "org-ql-completing-read" '("org-ql-completing-read-"))



(autoload 'org-ql-find "org-ql-find" "\
Go to an Org entry in BUFFERS-FILES selected by searching entries with `org-ql'.
Interactively, search the buffers and files relevant to the
current buffer (i.e. in `org-agenda-mode', the value of
`org-ql-view-buffers-files' or `org-agenda-contributing-files';
in `org-mode', that buffer).

With one or more universal prefix arguments, WIDEN buffers before
searching (otherwise, respect any narrowing).  With two universal
prefix arguments, select multiple buffers to search with
completion and PROMPT.

QUERY-PREFIX may be a string to prepend to the query (e.g. use
\"heading:\" to only search headings, easily creating a custom
command that saves the user from having to type it).

QUERY-FILTER may be a function through which the query the user
types is filtered before execution (e.g. it could replace spaces
with commas to turn multiple tokens, which would normally be
treated as multiple predicates, into multiple arguments to a
single predicate).

(fn BUFFERS-FILES &key QUERY-PREFIX QUERY-FILTER WIDEN (PROMPT \"Find entry: \"))" t)
(autoload 'org-ql-refile "org-ql-find" "\
Refile current entry to MARKER (interactively, one selected with `org-ql').
Interactive completion uses files listed in `org-refile-targets',
which see (but only the files are used).

(fn MARKER)" t)
(autoload 'org-ql-find-in-agenda "org-ql-find" "\
Call `org-ql-find' on `org-agenda-files'." t)
(autoload 'org-ql-find-in-org-directory "org-ql-find" "\
Call `org-ql-find' on files in `org-directory'." t)
(autoload 'org-ql-find-path "org-ql-find" "\
Call `org-ql-find' to search outline paths in BUFFERS-FILES.
Interactively, search the buffers and files relevant to the
current buffer (i.e. in `org-agenda-mode', the value of
`org-ql-view-buffers-files' or `org-agenda-contributing-files';
in `org-mode', that buffer).  With universal prefix, select
multiple buffers to search with completion and PROMPT.

(fn BUFFERS-FILES)" t)
(autoload 'org-ql-open-link "org-ql-find" "\
Open a link selected with `org-ql-completing-read'.
Links found in entries matching the input query are offered as
candidates, and the selected one is opened with
`org-open-at-point'.  Arguments BUFFERS-FILES, QUERY-FILTER,
QUERY-PREFIX, and PROMPT are passed to `org-ql-completing-read',
which see.

Interactively, search the buffers and files relevant to the
current buffer (i.e. in `org-agenda-mode', the value of
`org-ql-view-buffers-files' or `org-agenda-contributing-files';
in `org-mode', that buffer).  With universal prefix, select
multiple buffers to search with completion and PROMPT.

(fn BUFFERS-FILES &key QUERY-PREFIX QUERY-FILTER (PROMPT \"Open link: \"))" t)
(register-definition-prefixes "org-ql-find" '("org-ql-find-"))



(autoload 'org-ql-sparse-tree "org-ql-search" "\
Show a sparse tree for QUERY in BUFFER and return number of results.
The tree will show the lines where the query matches, and any
other context defined in `org-show-context-detail', which see.

QUERY is an `org-ql' query in either sexp or string form (see
Info node `(org-ql)Queries').

When KEEP-PREVIOUS is non-nil (interactively, with prefix), the
outline is not reset to the overview state before finding
matches, which allows stacking calls to this command.

Runs `org-occur-hook' after making the sparse tree.

(fn QUERY &key KEEP-PREVIOUS (BUFFER (current-buffer)))" t)
(autoload 'org-ql-search "org-ql-search" "\
Search for QUERY with `org-ql'.
Interactively, prompt for these variables:

BUFFERS-FILES: A list of buffers and/or files to search.
Interactively, may also be:

- `buffer': search the current buffer
- `all': search all Org buffers
- `agenda': search buffers returned by the function `org-agenda-files'
- `directory': search Org files in `org-directory'
- A space-separated list of file or buffer names

QUERY: An `org-ql' query in either sexp or non-sexp form (see
Info node `(org-ql)Queries').

SUPER-GROUPS: An `org-super-agenda' group set.  See variable
`org-super-agenda-groups' and Info node `(org-super-agenda)Group
selectors'.

NARROW: When non-nil, don't widen buffers before
searching.  Interactively, with prefix, leave narrowed.

SORT: One or a list of `org-ql' sorting functions, like `date' or
`priority' (see Info node `(org-ql)Listing / acting-on results').

TITLE: An optional string displayed in the header.

BUFFER: Optionally, a buffer or name of a buffer in which to
display the results.  By default, the value of
`org-ql-view-buffer' is used, and a new buffer is created if
necessary.

(fn BUFFERS-FILES QUERY &key NARROW SUPER-GROUPS SORT TITLE (BUFFER org-ql-view-buffer))" t)
(function-put 'org-ql-search 'lisp-indent-function 'defun)
(autoload 'org-ql-search-block "org-ql-search" "\
Insert items for QUERY into current buffer.
QUERY should be an `org-ql' query form.  Intended to be used as a
user-defined function in `org-agenda-custom-commands'.  QUERY
corresponds to the `match' item in the custom command form.

Like other agenda block commands, it searches files returned by
function `org-agenda-files'.  Inserts a newline after the block.

If `org-ql-block-header' is non-nil, it is used as the header
string for the block, otherwise a the header is formed
automatically from the query.

(fn QUERY)")
(defalias 'org-ql-block 'org-ql-search-block)
(register-definition-prefixes "org-ql-search" '("org-ql-"))



(autoload 'org-ql-view "org-ql-view" "\
Choose and display the `org-ql-views' view NAME.
Interactively, prompt for NAME.

(fn &optional NAME)" t)
(autoload 'org-ql-view-recent-items "org-ql-view" "\
Show items in FILES from last NUM-DAYS days with timestamps of TYPE.
TYPE may be `ts', `ts-active', `ts-inactive', `clocked', or
`closed'.

(fn &key NUM-DAYS (TYPE \\='ts) (FILES (org-agenda-files)) (GROUPS \\='((:auto-parent t) (:auto-todo t))))" t)
(autoload 'org-ql-view-sidebar "org-ql-view" "\
Show `org-ql-view' view list sidebar.
SLOT is passed to `display-buffer-in-side-window', which see.

(fn &key (SLOT org-ql-view-list-slot))" t)
(autoload 'org-ql-view-bookmark-handler "org-ql-view" "\
Show Org QL View BOOKMARK in current buffer.

(fn BOOKMARK)")
(register-definition-prefixes "org-ql-view" '("org-ql-view"))


(provide 'org-ql-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-roam-ql-ql-20240721.306/org-roam-ql-ql-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-roam-ql-ql-buffer-from-roam-buffer "org-roam-ql-ql" "\
Convert a roam buffer to org-ql buffer." t)
(autoload 'org-roam-ql-ql-roam-buffer-from-agenda-buffer "org-roam-ql-ql" "\
Convert a agenda reusult to a roam-buffer." t)
(autoload 'org-roam-ql-ql-init "org-roam-ql-ql" "\
Integrate `org-roam-ql' into `org-ql'.")
(register-definition-prefixes "org-roam-ql-ql" '("org-roam-ql-ql--"))


(provide 'org-roam-ql-ql-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-numbering/org-numbering-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'treesit-jump-transient "treesit-jump" "\
Transient for using treesit-jump.

(fn)" t)
(autoload 'treesit-jump-jump "treesit-jump" "\
Select and jump to a treesit query for the current major-mode." t)
(autoload 'treesit-jump-select "treesit-jump" "\
Select and select the region of a treesit query for the current major-mode." t)
(autoload 'treesit-jump-delete "treesit-jump" "\
Select and delete the region of a treesit query for the current major-mode." t)
(autoload 'treesit-jump-parent-jump "treesit-jump" "\
Select and jump to a treesit parent of the current node." t)
(register-definition-prefixes "treesit-jump" '("treesit-jump-"))


(provide 'org-numbering-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-modern-20250101.923/org-modern-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-modern-mode "org-modern" "\
Modern looks for Org.

This is a minor mode.  If called interactively, toggle the `Org-Modern
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `org-modern-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'org-modern-agenda "org-modern" "\
Finalize Org agenda highlighting.")
(put 'global-org-modern-mode 'globalized-minor-mode t)
(defvar global-org-modern-mode nil "\
Non-nil if Global Org-Modern mode is enabled.
See the `global-org-modern-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-org-modern-mode'.")
(custom-autoload 'global-org-modern-mode "org-modern" nil)
(autoload 'global-org-modern-mode "org-modern" "\
Toggle Org-Modern mode in all buffers.
With prefix ARG, enable Global Org-Modern mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Org-Modern mode is enabled in all buffers where `org-modern--on' would
do it.

See `org-modern-mode' for more information on Org-Modern mode.

(fn &optional ARG)" t)
(register-definition-prefixes "org-modern" '("org-modern-"))


(provide 'org-modern-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/async-20241126.810/async-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'async-start-process "async" "\
Start the executable PROGRAM asynchronously named NAME.  See `async-start'.
PROGRAM is passed PROGRAM-ARGS, calling FINISH-FUNC with the
process object when done.  If FINISH-FUNC is nil, the future
object will return the process object when the program is
finished.  Set DEFAULT-DIRECTORY to change PROGRAM's current
working directory.

(fn NAME PROGRAM FINISH-FUNC &rest PROGRAM-ARGS)")
(autoload 'async-start "async" "\
Execute START-FUNC (often a lambda) in a subordinate Emacs process.
When done, the return value is passed to FINISH-FUNC.  Example:

    (async-start
       ;; What to do in the child process
       (lambda ()
         (message \"This is a test\")
         (sleep-for 3)
         222)

       ;; What to do when it finishes
       (lambda (result)
         (message \"Async process done, result should be 222: %s\"
                  result)))

If you call `async-send' from a child process, the message will
be also passed to the FINISH-FUNC.  You can test RESULT to see if
it is a message by using `async-message-p'.  If nil, it means
this is the final result.  Example of the FINISH-FUNC:

    (lambda (result)
      (if (async-message-p result)
          (message \"Received a message from child process: %s\" result)
        (message \"Async process done, result: %s\" result)))

If FINISH-FUNC is nil or missing, a future is returned that can
be inspected using `async-get', blocking until the value is
ready.  Example:

    (let ((proc (async-start
                   ;; What to do in the child process
                   (lambda ()
                     (message \"This is a test\")
                     (sleep-for 3)
                     222))))

        (message \"I'm going to do some work here\") ;; ....

        (message \"Waiting on async process, result should be 222: %s\"
                 (async-get proc)))

If you don't want to use a callback, and you don't care about any
return value from the child process, pass the `ignore' symbol as
the second argument (if you don't, and never call `async-get', it
will leave *emacs* process buffers hanging around):

    (async-start
     (lambda ()
       (delete-file \"a remote file on a slow link\" nil))
     \\='ignore)

Special case:
If the output of START-FUNC is a string with properties
e.g. (buffer-string) RESULT will be transformed in a list where the
car is the string itself (without props) and the cdr the rest of
properties, this allows using in FINISH-FUNC the string without
properties and then apply the properties in cdr to this string (if
needed).
Properties handling special objects like markers are returned as
list to allow restoring them later.
See <https://github.com/jwiegley/emacs-async/issues/145> for more infos.

Note: Even when FINISH-FUNC is present, a future is still
returned except that it yields no value (since the value is
passed to FINISH-FUNC).  Call `async-get' on such a future always
returns nil.  It can still be useful, however, as an argument to
`async-ready' or `async-wait'.

(fn START-FUNC &optional FINISH-FUNC)")
(register-definition-prefixes "async" '("async-"))



(autoload 'async-byte-recompile-directory "async-bytecomp" "\
Compile all *.el files in DIRECTORY asynchronously.
All *.elc files are systematically deleted before proceeding.

(fn DIRECTORY &optional QUIET)")
(defvar async-bytecomp-package-mode nil "\
Non-nil if Async-Bytecomp-Package mode is enabled.
See the `async-bytecomp-package-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `async-bytecomp-package-mode'.")
(custom-autoload 'async-bytecomp-package-mode "async-bytecomp" nil)
(autoload 'async-bytecomp-package-mode "async-bytecomp" "\
Byte compile asynchronously packages installed with package.el.

Async compilation of packages can be controlled by
`async-bytecomp-allowed-packages'.
NOTE: Use this mode only if you install/upgrade etc... your packages
synchronously, if you use a package manager like helm-package.el which
by default is async you don't need this.

This is a global minor mode.  If called interactively, toggle the
`Async-Bytecomp-Package mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='async-bytecomp-package-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'async-byte-compile-file "async-bytecomp" "\
Byte compile Lisp code FILE asynchronously.

Same as `byte-compile-file' but asynchronous.

(fn FILE)" t)
(register-definition-prefixes "async-bytecomp" '("async-"))



(register-definition-prefixes "async-package" '("async-p"))



(defvar dired-async-mode nil "\
Non-nil if Dired-Async mode is enabled.
See the `dired-async-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `dired-async-mode'.")
(custom-autoload 'dired-async-mode "dired-async" nil)
(autoload 'dired-async-mode "dired-async" "\
Do dired actions asynchronously.

This is a global minor mode.  If called interactively, toggle the
`Dired-Async mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='dired-async-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'dired-async-do-copy "dired-async" "\
Run ‘dired-do-copy’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-symlink "dired-async" "\
Run ‘dired-do-symlink’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-hardlink "dired-async" "\
Run ‘dired-do-hardlink’ asynchronously.

(fn &optional ARG)" t)
(autoload 'dired-async-do-rename "dired-async" "\
Run ‘dired-do-rename’ asynchronously.

(fn &optional ARG)" t)
(register-definition-prefixes "dired-async" '("dired-async-"))



(register-definition-prefixes "smtpmail-async" '("async-smtpmail-"))


(provide 'async-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-download-20241118.1846/org-download-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'org-download-enable "org-download" "\
Enable org-download.")
(register-definition-prefixes "org-download" '("org-download-"))


(provide 'org-download-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/org-ai-20250131.2236/org-ai-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar org-ai-global-mode nil "\
Non-nil if Org-Ai-Global mode is enabled.
See the `org-ai-global-mode' command
for a description of this minor mode.")
(custom-autoload 'org-ai-global-mode "org-ai" nil)
(autoload 'org-ai-global-mode "org-ai" "\
Non `org-mode' specific minor mode for the OpenAI API.

This is a global minor mode.  If called interactively, toggle the
`Org-Ai-Global mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='org-ai-global-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{org-ai-global-mode-map}

(fn &optional ARG)" t)
(register-definition-prefixes "org-ai" '("org-ai-"))



(register-definition-prefixes "org-ai-block" '("org-ai-"))



(autoload 'org-ai-on-project "org-ai-on-project" "\
Start org-ai-on-project inside BASE-DIR.
This is a command that will allow you to run an org-ai prompt on
multiple files. You can select the files using a regexp expression
and optionally select regions inside of the files.

Those files will then be concatenated and passed to org-ai with
your prompt.

(fn &optional BASE-DIR)" t)
(register-definition-prefixes "org-ai-on-project" '("org-ai-"))



(register-definition-prefixes "org-ai-oobabooga" '("org-ai-"))



(register-definition-prefixes "org-ai-openai" '("org-ai-" "strip-api-url"))



(register-definition-prefixes "org-ai-openai-image" '("org-ai-"))



(register-definition-prefixes "org-ai-sd" '("org-ai-"))



(register-definition-prefixes "org-ai-talk" '("org-ai-talk-"))



(register-definition-prefixes "org-ai-useful" '("org-ai-"))


(provide 'org-ai-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/orderless-20250201.2341/orderless-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'orderless-all-completions "orderless" "\
Split STRING into components and find entries TABLE matching all.
The predicate PRED is used to constrain the entries in TABLE.  The
matching portions of each candidate are highlighted.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(autoload 'orderless-try-completion "orderless" "\
Complete STRING to unique matching entry in TABLE.
This uses `orderless-all-completions' to find matches for STRING
in TABLE among entries satisfying PRED.  If there is only one
match, it completes to that match.  If there are no matches, it
returns nil.  In any other case it \"completes\" STRING to
itself, without moving POINT.
This function is part of the `orderless' completion style.

(fn STRING TABLE PRED POINT)")
(add-to-list 'completion-styles-alist '(orderless orderless-try-completion orderless-all-completions "Completion of multiple components, in any order."))
(autoload 'orderless-ivy-re-builder "orderless" "\
Convert STR into regexps for use with ivy.
This function is for integration of orderless with ivy, use it as
a value in `ivy-re-builders-alist'.

(fn STR)")
(register-definition-prefixes "orderless" '("orderless-"))



(autoload 'orderless-kwd-dispatch "orderless-kwd" "\
Match COMPONENT against the keywords in `orderless-kwd-alist'.

(fn COMPONENT INDEX TOTAL)")
(register-definition-prefixes "orderless-kwd" '("orderless-kwd-"))


(provide 'orderless-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/kv-20140108.1534/kv-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "kv" '("dotass" "keyword->symbol" "map-bind"))


(provide 'kv-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/esxml-20230308.2254/esxml-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "esxml" '("attr" "esxml-" "pp-esxml-to-xml" "string-trim-whitespace" "sxml-to-" "xml-to-esxml"))



(register-definition-prefixes "esxml-query" '("esxml-"))


(provide 'esxml-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/nov-20240825.1528/nov-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'nov-mode "nov" "\
Major mode for reading EPUB documents

(fn)" t)
(autoload 'nov-bookmark-jump-handler "nov" "\
The bookmark handler-function interface for bookmark BMK.

See also `nov-bookmark-make-record'.

(fn BMK)")
(register-definition-prefixes "nov" '("nov-"))


(provide 'nov-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/no-littering-20250101.1420/no-littering-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'no-littering-expand-etc-file-name "no-littering" "\
Expand filename FILE relative to `no-littering-etc-directory'.

(fn FILE)")
(autoload 'no-littering-expand-var-file-name "no-littering" "\
Expand filename FILE relative to `no-littering-var-directory'.

(fn FILE)")
(autoload 'no-littering-theme-backups "no-littering" "\
Theme locations where backups of various sorts are created.

The purpose of this package is to store data files of various
sorts in a handful of central locations, instead of spreading
them all over the place.  When doing that for temporary files,
which contain backups of some sort, that increases the odds that
sensitive data is written to disk in clear text and/or that such
clear text files persist longer, if they would be created anyway.

Because of that, simply loading `no-littering' does not theme
certain, potentially unsafe variables.  Instead, this function is
provided, so that you can decide whether to take the risk or not.

Calling this function sets these variables:
- `auto-save-file-name-transforms' (built-in)
- `backup-directory-alist' (built-in)
- `undo-tree-history-directory-alist' (from `undo-tree')

The default values of these variables cause additional files to
be created in the same directories as the files that are being
visited.  Calling this function changes the values of these
variables, so that this is only done for visited files located in
certain directories.  For all other visited files, the additional
files are created in files inside `no-littering-var-directory'.

Additional files are created in the same directory as the visited
file, for files located in:
- \"/tmp/\"
- \"/dev/shm\"
- `temporary-file-directory'

With these settings it is still possible that sensitive data is
written to additional files, but you are more likely to spot it,
and because these directories usually use a `tmpfs' file-system,
the leaked secrets should not persist after a reboot.

If you do *not* call this function, then these additional files
are always created in the same directory as the visited files,
regardless of the location of the visited files.  In other words,
even when using the default values, there is a significant risk
of leaking sensitive data, and if you want to reduce that, then
you must turn of these features completely.")
(register-definition-prefixes "no-littering" '("emacs-session-filename" "no-littering-"))


(provide 'no-littering-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/nerd-icons-20250222.1319/nerd-icons-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'nerd-icons-install-fonts "nerd-icons" "\
Helper function to download and install the latests fonts based on OS.
The provided Nerd Font is Symbols Nerd Font Mono.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t)
(autoload 'nerd-icons-insert "nerd-icons" "\
Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When GLYPH-SET is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG GLYPH-SET)" t)
(autoload 'nerd-icons-icon-for-dir "nerd-icons" "\
Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn DIR &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-file "nerd-icons" "\
Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-extension "nerd-icons" "\
Get the formatted icon for EXT.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn EXT &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-mode "nerd-icons" "\
Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-url "nerd-icons" "\
Get the formatted icon for URL.
If an icon for URL isn't found in `nerd-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)")
(autoload 'nerd-icons-icon-for-buffer "nerd-icons" "\
Get the formatted icon for the current buffer.

This function prioritises the use of the buffers file extension to
discern the icon when its `major-mode' matches its auto mode,
otherwise it will use the buffers `major-mode' to decide its
icon.")
(register-definition-prefixes "nerd-icons" '("nerd-icons-"))


(provide 'nerd-icons-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/nerd-icons-completion-20241221.1846/nerd-icons-completion-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'nerd-icons-completion-marginalia-setup "nerd-icons-completion" "\
Hook to `marginalia-mode-hook' to bind `nerd-icons-completion-mode' to it.")
(defvar nerd-icons-completion-mode nil "\
Non-nil if Nerd-Icons-Completion mode is enabled.
See the `nerd-icons-completion-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `nerd-icons-completion-mode'.")
(custom-autoload 'nerd-icons-completion-mode "nerd-icons-completion" nil)
(autoload 'nerd-icons-completion-mode "nerd-icons-completion" "\
Add icons to completion candidates.

This is a global minor mode.  If called interactively, toggle the
`Nerd-Icons-Completion mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='nerd-icons-completion-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "nerd-icons-completion" '("nerd-icons-completion-completion-metadata-get"))


(provide 'nerd-icons-completion-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/markdown-ts-mode-20240422.2329/markdown-ts-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "markdown-ts-mode" '("markdown-ts-"))


(provide 'markdown-ts-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/marginalia-20250203.1018/marginalia-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar marginalia-mode nil "\
Non-nil if Marginalia mode is enabled.
See the `marginalia-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `marginalia-mode'.")
(custom-autoload 'marginalia-mode "marginalia" nil)
(autoload 'marginalia-mode "marginalia" "\
Annotate completion candidates with richer information.

This is a global minor mode.  If called interactively, toggle the
`Marginalia mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='marginalia-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'marginalia-cycle "marginalia" "\
Cycle between annotators in `marginalia-annotator-registry'." t)
(function-put 'marginalia-cycle 'completion-predicate #'(lambda (&rest _) (> (minibuffer-depth) 1)))
(register-definition-prefixes "marginalia" '("marginalia-"))


(provide 'marginalia-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/magit-popup-20200719.1015/magit-popup-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "magit-popup" '("magit-"))


(provide 'magit-popup-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/magit-delta-20220125.50/magit-delta-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'magit-delta-mode "magit-delta" "\
Use Delta when displaying diffs in Magit.

https://github.com/dandavison/delta

This is a minor mode.  If called interactively, toggle the `Magit-Delta
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `magit-delta-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "magit-delta" '("magit-delta-"))


(provide 'magit-delta-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/lsp-treemacs-20240406.2141/lsp-treemacs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'lsp-treemacs-symbols "lsp-treemacs" "\
Show symbols view." t)
(autoload 'lsp-treemacs-java-deps-list "lsp-treemacs" "\
Display java dependencies." t)
(autoload 'lsp-treemacs-java-deps-follow "lsp-treemacs" nil t)
(defvar lsp-treemacs-sync-mode nil "\
Non-nil if Lsp-Treemacs-Sync mode is enabled.
See the `lsp-treemacs-sync-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `lsp-treemacs-sync-mode'.")
(custom-autoload 'lsp-treemacs-sync-mode "lsp-treemacs" nil)
(autoload 'lsp-treemacs-sync-mode "lsp-treemacs" "\
Global minor mode for synchronizing lsp-mode workspace folders and

treemacs projects.

This is a global minor mode.  If called interactively, toggle the
`Lsp-Treemacs-Sync mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='lsp-treemacs-sync-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'lsp-treemacs-references "lsp-treemacs" "\
Show the references for the symbol at point.
With a prefix argument, select the new window and expand the tree of
references automatically.

(fn ARG)" t)
(autoload 'lsp-treemacs-implementations "lsp-treemacs" "\
Show the implementations for the symbol at point.
With a prefix argument, select the new window expand the tree of
implementations automatically.

(fn ARG)" t)
(autoload 'lsp-treemacs-call-hierarchy "lsp-treemacs" "\
Show the incoming call hierarchy for the symbol at point.
With a prefix argument, show the outgoing call hierarchy.

(fn OUTGOING)" t)
(autoload 'lsp-treemacs-type-hierarchy "lsp-treemacs" "\
Show the type hierarchy for the symbol at point.
With prefix 0 show sub-types.
With prefix 1 show super-types.
With prefix 2 show both.

(fn DIRECTION)" t)
(autoload 'lsp-treemacs-errors-list "lsp-treemacs" nil t)
(register-definition-prefixes "lsp-treemacs" '("lsp-treemacs-"))



(register-definition-prefixes "lsp-treemacs-generic" '("lsp-treemacs-"))



(register-definition-prefixes "lsp-treemacs-themes" '("lsp-treemacs-theme"))


(provide 'lsp-treemacs-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/lsp-docker-20240806.702/lsp-docker-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "lsp-docker" '("lsp-docker-"))


(provide 'lsp-docker-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/loop-20160813.1407/loop-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "loop" '("loop-"))


(provide 'loop-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/load-relative-20230214.1032/load-relative-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload '__FILE__ "load-relative" "\
Return the string name of file/buffer that is currently begin executed.

The first approach for getting this information is perhaps the
most pervasive and reliable.  But it the most low-level and not
part of a public API, so it might change in future
implementations.  This method uses the name that is recorded by
readevalloop of `lread.c' as the car of variable
`current-load-list'.

Failing that, we use `load-file-name' which should work in some
subset of the same places that the first method works.  However
`load-file-name' will be nil for code that is eval'd.  To cover
those cases, we try function `buffer-file-name' which is initially
correct, for eval'd code, but will change and may be wrong if the
code sets or switches buffers after the initial execution.

As a last resort, you can pass in SYMBOL which should be some
symbol that has been previously defined if none of the above
methods work we will use the file-name value find via
`symbol-file'.

(fn &optional SYMBOL)")
(autoload 'find-file-noselect-relative "load-relative" "\
Read relative FILENAME into a buffer and return the buffer.
If a buffer exists visiting FILENAME, return that one, but
verify that the file has not changed since visited or saved.
The buffer is not selected, just returned to the caller.
Optional second arg NOWARN non-nil means suppress any warning messages.
Optional third arg RAWFILE non-nil means the file is read literally.
Optional fourth arg WILDCARDS non-nil means do wildcard processing
and visit all the matching files.  When wildcards are actually
used and expanded, return a list of buffers that are visiting
the various files.

(fn FILENAME &optional NOWARN RAWFILE WILDCARDS)")
(autoload 'with-relative-file "load-relative" "\
Read the relative FILE into a temporary buffer and evaluate BODY
in this buffer.

(fn FILE &rest BODY)" nil t)
(function-put 'with-relative-file 'lisp-indent-function 1)
(autoload 'load-relative "load-relative" "\
Load an Emacs Lisp file relative to Emacs Lisp code that is in
the process of being loaded or eval'd.

FILE-OR-LIST is either a string or a list of strings containing
files that you want to loaded.  If SYMBOL is given, the location of
of the file of where that was defined (as given by `symbol-file' is used
if other methods of finding __FILE__ don't work.

(fn FILE-OR-LIST &optional SYMBOL)")
(autoload 'require-relative "load-relative" "\
Run `require' on an Emacs Lisp file relative to the Emacs Lisp code
that is in the process of being loaded or eval'd.  The symbol used in require
is the base file name (without directory or file extension) treated as a
symbol.

WARNING: it is best to to run this function before any
buffer-setting or buffer changing operations.

(fn RELATIVE-FILE &optional OPT-FILE OPT-PREFIX)")
(autoload 'require-relative-list "load-relative" "\
Run `require-relative' on each name in LIST which should be a list of
strings, each string being the relative name of file you want to run.

(fn LIST &optional OPT-PREFIX)" nil t)
(autoload 'provide-me "load-relative" "\
Call `provide' with the feature's symbol name made from
source-code's file basename sans extension.  For example if you
write (provide-me) inside file ~/lisp/foo.el, this is the same as
writing: (provide \\='foo).

With a prefix, that prefix is prepended to the `provide' So in
the previous example, if you write (provide-me \"bar-\") this is the
same as writing (provide \\='bar-foo).

(fn &optional PREFIX)" nil t)
(register-definition-prefixes "load-relative" '("autoload-relative"))


(provide 'load-relative-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/ligature-20220808.1225/ligature-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'ligature-set-ligatures "ligature" "\
Replace LIGATURES in MODES.

Converts a list of LIGATURES, where each element is either a cons
cell of `(STR-CHAR . REGEXP)' or a string to ligate, for all
modes in MODES.  As there is no easy way of computing which
ligatures were already defined, this function will replace any
existing ligature definitions in `ligature-composition-table'
with LIGATURES for MODES.


Some ligatures are variable-length, such as arrows and borders,
and need a regular expression to accurately represent the range
of characters needed to ligate them.  In that case, you must use a
cons cell of `(STR-CHAR . REGEXP)' where `STR-CHR' is the first
character in the ligature and `REGEXP' is a regular expression
that matches the _rest_ of the ligature range.

For examples, see the commentary in `ligature.el'.

(fn MODES LIGATURES)")
(autoload 'ligature-generate-ligatures "ligature" "\
Ligate the current buffer using its major mode to determine ligature set.

The ligature generator traverses `ligature-composition-table' and
applies every ligature definition from every mode that matches
either t (indicating that a ligature mapping always applies);
or a major mode or list of major mode symbols that are
`derived-mode-p' of the current buffer's major mode.

The changes are then made buffer-local." t)
(autoload 'ligature-mode "ligature" "\
Enables typographic ligatures.

This is a minor mode.  If called interactively, toggle the `Ligature
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `ligature-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-ligature-mode 'globalized-minor-mode t)
(defvar global-ligature-mode nil "\
Non-nil if Global Ligature mode is enabled.
See the `global-ligature-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-ligature-mode'.")
(custom-autoload 'global-ligature-mode "ligature" nil)
(autoload 'global-ligature-mode "ligature" "\
Toggle Ligature mode in all buffers.
With prefix ARG, enable Global Ligature mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Ligature mode is enabled in all buffers where `ligature-mode-turn-on'
would do it.

See `ligature-mode' for more information on Ligature mode.

(fn &optional ARG)" t)
(register-definition-prefixes "ligature" '("ligature-"))


(provide 'ligature-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/kind-icon-0.2.2/kind-icon-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'kind-icon-margin-formatter "kind-icon" "\
Return a margin-formatter function which produces kind icons.
METADATA is the completion metadata supplied by the caller (see
info node `(elisp)Programmed Completion').  To use, add this
function to the relevant margin-formatters list.

(fn METADATA)")
(autoload 'kind-icon-enhance-completion "kind-icon" "\
A wrapper for `completion-in-region-functions'.
This wrapper sets a custom `affixation-function' on
COMPLETION-FUNCTION, which places an icon in the prefix slot.  Use
it like:

  (setq completion-in-region-function
     (kind-icon-enhance-completion
       completion-in-region-function))

(fn COMPLETION-FUNCTION)")
(register-definition-prefixes "kind-icon" '("kind-icon-"))


(provide 'kind-icon-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/just-ts-mode-20241014.2252/just-ts-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'just-ts-mode "just-ts-mode" "\
Major mode for editing standard Justfiles using treesitter.

(fn)" t)
(add-to-list 'auto-mode-alist '("/[Jj]ustfile\\'" . just-ts-mode))
(add-to-list 'auto-mode-alist '("\\.[Jj]ust\\(file\\)?\\'" . just-ts-mode))
(register-definition-prefixes "just-ts-mode" '("just-ts-"))


(provide 'just-ts-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/json-snatcher-20200916.1717/json-snatcher-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'jsons-print-path "json-snatcher" "\
Print the path to the JSON value under point, and save it in the kill ring." t)
(register-definition-prefixes "json-snatcher" '("jsons-"))


(provide 'json-snatcher-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/json-mode-20240427.1245/json-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defconst json-mode-standard-file-ext '(".json" ".jsonld") "\
List of JSON file extensions.")
(defsubst json-mode--update-auto-mode (filenames) "\
Update the `json-mode' entry of `auto-mode-alist'.

FILENAMES should be a list of file as string.
Return the new `auto-mode-alist' entry" (let* ((new-regexp (rx-to-string `(seq (eval (cons 'or (append json-mode-standard-file-ext ',filenames))) eot))) (new-entry (cons new-regexp 'json-mode)) (old-entry (when (boundp 'json-mode--auto-mode-entry) json-mode--auto-mode-entry))) (setq auto-mode-alist (delete old-entry auto-mode-alist)) (add-to-list 'auto-mode-alist new-entry) new-entry))
(defvar json-mode-auto-mode-list '(".babelrc" ".bowerrc" "composer.lock") "\
List of filenames for the JSON entry of `auto-mode-alist'.

Note however that custom `json-mode' entries in `auto-mode-alist'
won’t be affected.")
(custom-autoload 'json-mode-auto-mode-list "json-mode" nil)
(defvar json-mode--auto-mode-entry (json-mode--update-auto-mode json-mode-auto-mode-list) "\
Regexp generated from the `json-mode-auto-mode-list'.")
(autoload 'json-mode "json-mode" "\
Major mode for editing JSON files.

(fn)" t)
(autoload 'jsonc-mode "json-mode" "\
Major mode for editing JSON files with comments.

(fn)" t)
(add-to-list 'magic-fallback-mode-alist '("^[{[]$" . json-mode))
(autoload 'json-mode-show-path "json-mode" "\
Print the path to the node at point to the minibuffer." t)
(autoload 'json-mode-kill-path "json-mode" "\
Save JSON path to object at point to kill ring." t)
(autoload 'json-mode-beautify "json-mode" "\
Beautify/pretty-print from BEGIN to END.

If the region is not active, beautify the entire buffer .

(fn BEGIN END)" t)
(register-definition-prefixes "json-mode" '("json"))


(provide 'json-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/jinx-20250219.335/jinx-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(put 'jinx-languages 'safe-local-variable #'stringp)
(put 'jinx-local-words 'safe-local-variable #'stringp)
(put 'jinx-dir-local-words 'safe-local-variable #'stringp)
(put 'jinx-mode 'safe-local-variable #'not)
(autoload 'jinx-languages "jinx" "\
Set languages locally or globally to LANGS.
LANGS should be one or more language codes as a string, separated
by whitespace.  When called interactively, the language codes are
read via `completing-read-multiple'.  If the prefix argument
GLOBAL is non-nil, the languages are changed globally for all
buffers.  See also the variable `jinx-languages'.

(fn LANGS &optional GLOBAL)" t)
(autoload 'jinx-correct-all "jinx" "\
Correct all misspelled words in the buffer.
With prefix argument ONLY-CHECK, only check the buffer and highlight all
misspellings, but do not open the correction UI.

(fn &optional ONLY-CHECK)" t)
(autoload 'jinx-correct-nearest "jinx" "\
Correct nearest misspelled word." t)
(autoload 'jinx-correct-word "jinx" "\
Correct word between START and END, by default the word before point.
Suggest corrections even if the word is not misspelled.
Optionally insert INITIAL input in the minibuffer.

(fn &optional START END INITIAL)" t)
(autoload 'jinx-correct "jinx" "\
Correct word depending on prefix ARG.
This command dispatches to the following commands:
  - `jinx-correct-nearest': If prefix ARG is nil, correct nearest
    misspelled word.
  - `jinx-correct-all': If a region is marked, or if prefix ARG
    is 4, corresponding to \\[universal-argument] pressed once,
    correct all misspelled words.
  - `jinx-correct-word': If prefix ARG is 16, corresponding to
    \\[universal-argument] pressed twice, correct word before point.
  - If prefix ARG is 64, corresponding to \\[universal-argument] pressed
    three times, check the whole buffer, but do not open the correction
    UI.

(fn &optional ARG)" t)
(autoload 'jinx-mode "jinx" "\
Enchanted Spell Checker.

This is a minor mode.  If called interactively, toggle the `Jinx mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `jinx-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{jinx-mode-map}

(fn &optional ARG)" t)
(put 'global-jinx-mode 'globalized-minor-mode t)
(defvar global-jinx-mode nil "\
Non-nil if Global Jinx mode is enabled.
See the `global-jinx-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-jinx-mode'.")
(custom-autoload 'global-jinx-mode "jinx" nil)
(autoload 'global-jinx-mode "jinx" "\
Toggle Jinx mode in all buffers.
With prefix ARG, enable Global Jinx mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Jinx mode is enabled in all buffers where `jinx--on' would do it.

See `jinx-mode' for more information on Jinx mode.

(fn &optional ARG)" t)
(register-definition-prefixes "jinx" '("global-jinx-modes" "jinx-"))


(provide 'jinx-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/inheritenv-20241119.1355/inheritenv-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'inheritenv-apply "inheritenv" "\
Apply FUNC such that the environment it sees will match the current value.
This is useful if FUNC creates a temp buffer, because that will
not inherit any buffer-local values of variables `exec-path' and
`process-environment'.

This function is designed for convenient use as an \"around\" advice.

ARGS is as for ORIG.

(fn FUNC &rest ARGS)")
(register-definition-prefixes "inheritenv" '("inheritenv"))


(provide 'inheritenv-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/idlwave-6.5.1/idlwave-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "idlw-bindings" '("idlwave-"))



(register-definition-prefixes "idlw-complete" '("idlwave-"))



(register-definition-prefixes "idlw-complete-structtag" '("idlwave-"))



(register-definition-prefixes "idlw-help" '("idlwave-"))



(register-definition-prefixes "idlw-menus" '("idlwave-"))



(register-definition-prefixes "idlw-roprompt" '("idlwave-"))



(register-definition-prefixes "idlw-routine" '("idlwave-"))



(register-definition-prefixes "idlw-scan" '("idlwave-"))



(autoload 'idlwave-shell "idlw-shell" "\
Run an inferior IDL, with I/O through buffer `(idlwave-shell-buffer)'.
If buffer exists but shell process is not running, start new IDL.
If buffer exists and shell process is running, just switch to the buffer.

When called with a prefix ARG, or when `idlwave-shell-use-dedicated-frame'
is non-nil, the shell buffer and the source buffers will be in
separate frames.

The command to run comes from variable `idlwave-shell-explicit-file-name',
with options taken from `idlwave-shell-command-line-options'.

The buffer is put in `idlwave-shell-mode', providing commands for sending
input and controlling the IDL job.  See help on `idlwave-shell-mode'.
See also the variable `idlwave-shell-prompt-pattern'.

(Type \\[describe-mode] in the shell buffer for a list of commands.)

(fn &optional ARG QUICK)" t)
(autoload 'idlwave-shell-recenter-shell-window "idlw-shell" "\
Run `idlwave-shell', but make sure the current window stays selected.

(fn &optional ARG)" t)
(autoload 'idlwave-shell-send-command "idlw-shell" "\
Send a command to the IDL process.

(CMD PCMD HIDE SHOW-IF-ERROR REDISPLAY) are placed at the
end of `idlwave-shell-pending-commands'.  If IDL is ready the
first command in `idlwave-shell-pending-commands', CMD, is sent
to the IDL process.

If optional second argument PCMD is non-nil it will be placed on
`idlwave-shell-post-command-hook' when CMD is executed.

If the optional third argument HIDE is non-nil, then hide output
from CMD, unless it is the symbol `mostly', in which case only
output beginning with \"%\" is hidden, and all other
output (i.e., the results of a PRINT command), is shown.  This
helps with, e.g., stepping through code with output.

If optional fourth argument PREEMPT is non-nil CMD is put at front of
`idlwave-shell-pending-commands'.  If PREEMPT is `wait', wait for all
output to complete and the next prompt to arrive before returning
(useful if you need an answer now).  IDL is considered ready if the
prompt is present and if `idlwave-shell-ready' is non-nil.

If SHOW-IF-ERROR is non-nil, show the output if it contains an
error message, independent of what HIDE is set to.

If REDISPLAY is `disable', disable line redisplay for all but
errors.  If REDISPLAY is otherwise non-nil, clear the current
line position as state is scanned if no stop line message is
recognized.

(fn &optional CMD PCMD HIDE PREEMPT SHOW-IF-ERROR REDISPLAY)")
(autoload 'idlwave-shell-break-here "idlw-shell" "\
Set breakpoint at current line.

If COUNT is nil then an ordinary breakpoint is set.  We treat a COUNT
of 1 as a temporary breakpoint using the ONCE keyword.  Counts greater
than 1 use the IDL AFTER=count keyword to break only after reaching
the statement COUNT times.

Optional argument CMD is a list or function to evaluate upon reaching
the breakpoint.  CONDITION is a break condition, and DISABLED, if
non-nil disables the breakpoint.

(fn &optional COUNT CMD CONDITION DISABLED NO-SHOW)" t)
(autoload 'idlwave-shell-run-region "idlw-shell" "\
Compile and run the region using the IDL process.
Copies the region to a temporary file `idlwave-shell-temp-pro-file'
and issues the IDL .run command for the file.  Because the
region is compiled and run as a main program there is no
problem with begin-end blocks extending over multiple
lines - which would be a problem if `idlwave-shell-evaluate-region'
was used.  An END statement is appended to the region if necessary.

If there is a prefix argument, display IDL process.

(fn BEG END &optional N)" t)
(autoload 'idlwave-shell-save-and-run "idlw-shell" "\
Save file and run it in IDL.
Runs `save-buffer' and sends a '.RUN' command for the associated file to IDL.
When called from the shell buffer, re-run the file which was last handled by
one of the save-and-.. commands." t)
(register-definition-prefixes "idlw-shell" '("idlwave-"))



(register-definition-prefixes "idlw-toolbar" '("idlwave-toolbar"))



(register-definition-prefixes "idlw-variables" '("idlwave-"))



(autoload 'idlwave-mode "idlwave" "\
Major mode for editing IDL source files.

The main features of this mode are

1. Indentation and Formatting
   --------------------------
   Like other Emacs programming modes, C-j inserts a newline and indents.
   TAB is used for explicit indentation of the current line.

   To start a continuation line, use \\[idlwave-split-line].  This
   function can also be used in the middle of a line to split the line
   at that point.  When used inside a long constant string, the string
   is split at that point with the `+' concatenation operator.

   Comments are indented as follows:

   `;;;' Indentation remains unchanged.
   `;;'  Indent like the surrounding code
   `;'   Indent to a minimum column.

   The indentation of comments starting in column 0 is never changed.

   Use \\[idlwave-fill-paragraph] to refill a paragraph inside a
   comment.  The indentation of the second line of the paragraph
   relative to the first will be retained.  Use
   \\[auto-fill-mode] to toggle auto-fill mode for these
   comments.  When the variable `idlwave-fill-comment-line-only' is
   nil, code can also be auto-filled and auto-indented.

   To convert pre-existing IDL code to your formatting style, mark the
   entire buffer with \\[mark-whole-buffer] and execute
   \\[idlwave-expand-region-abbrevs].  Then mark the entire buffer
   again followed by \\[indent-region] (`indent-region').

2. Routine Info
   ------------
   IDLWAVE displays information about the calling sequence and the
   accepted keyword parameters of a procedure or function with
   \\[idlwave-routine-info].  \\[idlwave-find-module] jumps to the
   source file of a module.  These commands know about system
   routines, all routines in idlwave-mode buffers and (when the
   idlwave-shell is active) about all modules currently compiled under
   this shell.  It also makes use of pre-compiled or custom-scanned
   user and library catalogs many popular libraries ship with by
   default.  Use \\[idlwave-update-routine-info] to update this
   information, which is also used for completion (see item 4).

3. Online IDL Help
   ---------------

   \\[idlwave-context-help] displays the IDL documentation relevant
   for the system variable, keyword, or routines at point.  A single
   key stroke gets you directly to the right place in the docs.  See
   the manual to configure where and how the HTML help is displayed.

4. Completion
   ----------
   \\[idlwave-complete] completes the names of procedures, functions
   class names, keyword parameters, system variables and tags, class
   tags, structure tags, filenames and much more.  It is context
   sensitive and figures out what is expected at point.  Lower case
   strings are completed in lower case, other strings in mixed or
   upper case.

5. Code Templates and Abbreviations
   --------------------------------
   Many Abbreviations are predefined to expand to code fragments and templates.
   The abbreviations start generally with a `\\'.  Some examples:

   \\pr        PROCEDURE template
   \\fu        FUNCTION template
   \\c         CASE statement template
   \\sw        SWITCH statement template
   \\f         FOR loop template
   \\r         REPEAT Loop template
   \\w         WHILE loop template
   \\i         IF statement template
   \\elif      IF-ELSE statement template
   \\b         BEGIN

   For a full list, use \\[idlwave-list-abbrevs].  Some templates also
   have direct keybindings - see the list of keybindings below.

   \\[idlwave-doc-header] inserts a documentation header at the
   beginning of the current program unit (pro, function or main).
   Change log entries can be added to the current program unit with
   \\[idlwave-doc-modification].

6. Automatic Case Conversion
   -------------------------
   The case of reserved words and some abbrevs is controlled by
   `idlwave-reserved-word-upcase' and `idlwave-abbrev-change-case'.

7. Automatic END completion
   ------------------------
   If the variable `idlwave-expand-generic-end' is non-nil, each END typed
   will be converted to the specific version, like ENDIF, ENDFOR, etc.

8. Hooks
   -----
   Turning on `idlwave-mode' runs `idlwave-mode-hook'.

9. Documentation and Customization
   -------------------------------
   Info documentation for this package is available.  Use
   \\[idlwave-info] to display (complain to your sysadmin if that does
   not work).  For Postscript, PDF, and HTML versions of the
   documentation, check IDLWAVE's website at URL
   `https://github.com/jdtsmith/idlwave'.
   IDLWAVE has customize support - see the group `idlwave'.

10.Keybindings
   -----------
   Here is a list of all keybindings of this mode.
   If some of the key bindings below show with ??, use \\[describe-key]
   followed by the key sequence to see what the key sequence does.

\\{idlwave-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist (cons (purecopy "\\.pro\\'") 'idlwave-mode))
(register-definition-prefixes "idlwave" '("idlwave-"))


(provide 'idlwave-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/hl-todo-20250223.1917/hl-todo-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'hl-todo-mode "hl-todo" "\
Highlight TODO and similar keywords in comments and strings.

This is a minor mode.  If called interactively, toggle the `Hl-Todo
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `hl-todo-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{hl-todo-mode-map}

(fn &optional ARG)" t)
(put 'global-hl-todo-mode 'globalized-minor-mode t)
(defvar global-hl-todo-mode nil "\
Non-nil if Global Hl-Todo mode is enabled.
See the `global-hl-todo-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-hl-todo-mode'.")
(custom-autoload 'global-hl-todo-mode "hl-todo" nil)
(autoload 'global-hl-todo-mode "hl-todo" "\
Toggle Hl-Todo mode in all buffers.
With prefix ARG, enable Global Hl-Todo mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Hl-Todo mode is enabled in all buffers where
`hl-todo--turn-on-mode-if-desired' would do it.

See `hl-todo-mode' for more information on Hl-Todo mode.

(fn &optional ARG)" t)
(autoload 'hl-todo-next "hl-todo" "\
Jump to the next TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move backward that many keywords.

(fn ARG)" t)
(autoload 'hl-todo-previous "hl-todo" "\
Jump to the previous TODO or similar keyword.
The prefix argument ARG specifies how many keywords to move.
A negative argument means move forward that many keywords.

(fn ARG)" t)
(autoload 'hl-todo-occur "hl-todo" "\
Use `occur' to find all TODO or similar keywords.
This actually finds a superset of the highlighted keywords,
because it uses a regexp instead of a more sophisticated
matcher.  It also finds occurrences that are not within a
string or comment." t)
(autoload 'hl-todo-rgrep "hl-todo" "\
Use `rgrep' to find all TODO or similar keywords.
This actually finds a superset of the highlighted keywords,
because it uses a regexp instead of a more sophisticated
matcher.  It also finds occurrences that are not within a
string or comment.  See `rgrep' for the meaning of REGEXP,
FILES, DIR and CONFIRM, except that the type of prefix
argument does not matter; with any prefix you can edit the
constructed shell command line before it is executed.
Also see option `hl-todo-keyword-faces'.

(fn REGEXP &optional FILES DIR CONFIRM)" t)
(autoload 'hl-todo-flymake "hl-todo" "\
Flymake backend for `hl-todo-mode'.
Diagnostics are reported to REPORT-FN.  Use `add-hook' to
register this function in `flymake-diagnostic-functions' before
enabling `flymake-mode'.

(fn REPORT-FN &rest PLIST)")
(autoload 'hl-todo-insert "hl-todo" "\
Read a TODO or similar keyword and insert it at point.

If point is not inside a string or comment, then insert a new
comment.  If point is at the end of the line, then insert the
comment there, otherwise insert it as a new line before the
current line.  When called interactively the KEYWORD is read
via `completing-read'.

If `hl-todo-require-punctuation' is non-nil and
`hl-todo-highlight-punctuation' contains a single character,
then append that character to the inserted string.

(fn KEYWORD)" t)
(autoload 'hl-todo-search-and-highlight "hl-todo" "\
Highlight TODO and similar keywords starting at point.
Intended to be added to `magit-revision-wash-message-hook' and
`magit-log-wash-summary-hook', but might be useful elsewhere too.")
(register-definition-prefixes "hl-todo" '("hl-todo-"))


(provide 'hl-todo-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/highlight-indent-guides-20241229.2012/highlight-indent-guides-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'highlight-indent-guides-mode "highlight-indent-guides" "\
Display indent guides in a buffer.

This is a minor mode.  If called interactively, toggle the
`Highlight-Indent-Guides mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `highlight-indent-guides-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'highlight-indent-guides-auto-set-faces "highlight-indent-guides" "\
Automatically calculate indent guide faces.
If this feature is enabled, calculate reasonable values for the indent guide
colors based on the current theme's colorscheme, and set them appropriately.
This runs whenever a theme is loaded, but it can also be run interactively.

(fn &rest _)" t)
(register-definition-prefixes "highlight-indent-guides" '("highlight-indent-guides-"))


(provide 'highlight-indent-guides-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/elisp-refs-20230920.201/elisp-refs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'elisp-refs-function "elisp-refs" "\
Display all the references to function SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for functions, not macros. For that, see
`elisp-refs-macro'.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-macro "elisp-refs" "\
Display all the references to macro SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

This searches for macros, not functions. For that, see
`elisp-refs-function'.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-special "elisp-refs" "\
Display all the references to special form SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-variable "elisp-refs" "\
Display all the references to variable SYMBOL, in all loaded
elisp files.

If called with a prefix, prompt for a directory to limit the search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(autoload 'elisp-refs-symbol "elisp-refs" "\
Display all the references to SYMBOL in all loaded elisp files.

If called with a prefix, prompt for a directory to limit the
search.

(fn SYMBOL &optional PATH-PREFIX)" t)
(register-definition-prefixes "elisp-refs" '("elisp-"))


(provide 'elisp-refs-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/helpful-20250220.545/helpful-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'helpful-function "helpful" "\
Show help for function named SYMBOL.

See also `helpful-macro', `helpful-command' and `helpful-callable'.

(fn SYMBOL)" t)
(autoload 'helpful-command "helpful" "\
Show help for interactive function named SYMBOL.

See also `helpful-function'.

(fn SYMBOL)" t)
(autoload 'helpful-key "helpful" "\
Show help for interactive command bound to KEY-SEQUENCE.

(fn KEY-SEQUENCE)" t)
(autoload 'helpful-macro "helpful" "\
Show help for macro named SYMBOL.

(fn SYMBOL)" t)
(autoload 'helpful-callable "helpful" "\
Show help for function, macro or special form named SYMBOL.

See also `helpful-macro', `helpful-function' and `helpful-command'.

(fn SYMBOL)" t)
(autoload 'helpful-symbol "helpful" "\
Show help for SYMBOL, a variable, function, macro, or face.

See also `helpful-callable' and `helpful-variable'.

(fn SYMBOL)" t)
(autoload 'helpful-variable "helpful" "\
Show help for variable named SYMBOL.

(fn SYMBOL)" t)
(autoload 'helpful-at-point "helpful" "\
Show help for the symbol at point." t)
(register-definition-prefixes "helpful" '("helpful-"))


(provide 'helpful-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/gptel-20250226.1628/gptel-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'gptel-mode "gptel" "\
Minor mode for interacting with LLMs.

This is a minor mode.  If called interactively, toggle the `GPTel mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `gptel-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'gptel-send "gptel" "\
Submit this prompt to the current LLM backend.

By default, the contents of the buffer up to the cursor position
are sent.  If the region is active, its contents are sent
instead.

The response from the LLM is inserted below the cursor position
at the time of sending.  To change this behavior or model
parameters, use prefix arg ARG activate a transient menu with
more options instead.

This command is asynchronous, you can continue to use Emacs while
waiting for the response.

(fn &optional ARG)" t)
(autoload 'gptel "gptel" "\
Switch to or start a chat session with NAME.

Ask for API-KEY if `gptel-api-key' is unset.

If region is active, use it as the INITIAL prompt.  Returns the
buffer created or switched to.

INTERACTIVEP is t when gptel is called interactively.

(fn NAME &optional _ INITIAL INTERACTIVEP)" t)
(register-definition-prefixes "gptel" '("gptel-"))



(autoload 'gptel-make-anthropic "gptel-anthropic" "\
Register an Anthropic API-compatible backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST (optional) is the API host, \"api.anthropic.com\" by default.

MODELS is a list of available model names, as symbols.
Additionally, you can specify supported LLM capabilities like
vision or tool-use by appending a plist to the model with more
information, in the form

 (model-name . plist)

For a list of currently recognized plist keys, see
`gptel--anthropic-models'. An example of a model specification
including both kinds of specs:

:models
\\='(claude-3-haiku-20240307               ;Simple specs
  claude-3-opus-20240229
  (claude-3-5-sonnet-20240620           ;Full spec
   :description  \"Balance of intelligence and speed\"
   :capabilities (media tool json)
   :mime-types
   (\"image/jpeg\" \"image/png\" \"image/gif\" \"image/webp\")))

STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/v1/messages\".

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that retuns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY is a variable whose value is the API key, or function that
returns the key.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

(fn NAME &key CURL-ARGS STREAM KEY REQUEST-PARAMS (HEADER (lambda nil (when-let* ((key (gptel--get-api-key))) \\=`((\"x-api-key\" \\=\\, key) (\"anthropic-version\" . \"2023-06-01\") (\"anthropic-beta\" . \"pdfs-2024-09-25\") (\"anthropic-beta\" . \"prompt-caching-2024-07-31\"))))) (MODELS gptel--anthropic-models) (HOST \"api.anthropic.com\") (PROTOCOL \"https\") (ENDPOINT \"/v1/messages\"))")
(function-put 'gptel-make-anthropic 'lisp-indent-function 1)
(register-definition-prefixes "gptel-anthropic" '("gptel--anthropic-"))



 (autoload 'gptel-add "gptel-context" "Add/remove regions or buffers from gptel's context." t)
 (autoload 'gptel-add-file "gptel-context" "Add files to gptel's context." t)
(autoload 'gptel-context--wrap "gptel-context" "\
Wrap MESSAGE with context string.

(fn MESSAGE)")
(autoload 'gptel-context--collect "gptel-context" "\
Get the list of all active context overlays.")
(register-definition-prefixes "gptel-context" '("gptel-"))



(autoload 'gptel-curl-get-response "gptel-curl" "\
Fetch response to prompt in state FSM from the LLM using Curl.

FSM is the state machine driving this request.

FSM is the state machine driving this request.  Its INFO slot
contains the data required for setting up the request.  INFO is a
plist with the following keys, among others:
- :data     (the data being sent)
- :buffer   (the gptel buffer)
- :position (marker at which to insert the response).
- :callback (optional, the request callback)

Call CALLBACK with the response and INFO afterwards.  If omitted
the response is inserted into the current buffer after point.

(fn FSM)")
(register-definition-prefixes "gptel-curl" '("gptel-curl--"))



(autoload 'gptel-make-gemini "gptel-gemini" "\
Register a Gemini backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST (optional) is the API host, defaults to
\"generativelanguage.googleapis.com\".

MODELS is a list of available model names, as symbols.
Additionally, you can specify supported LLM capabilities like
vision or tool-use by appending a plist to the model with more
information, in the form

 (model-name . plist)

For a list of currently recognized plist keys, see
`gptel--gemini-models'. An example of a model specification
including both kinds of specs:

:models
\\='(gemini-pro                            ;Simple specs
  gemini-1.5-flash
  (gemini-1.5-pro-latest                ;Full spec
   :description
   \"Complex reasoning tasks, problem solving and data extraction\"
   :capabilities (tool json)
   :mime-types
   (\"image/jpeg\" \"image/png\" \"image/webp\" \"image/heic\")))


STREAM is a boolean to enable streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, \"https\" by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/v1beta/models\".

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that retuns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

(fn NAME &key CURL-ARGS HEADER KEY REQUEST-PARAMS (STREAM nil) (HOST \"generativelanguage.googleapis.com\") (PROTOCOL \"https\") (MODELS gptel--gemini-models) (ENDPOINT \"/v1beta/models\"))")
(function-put 'gptel-make-gemini 'lisp-indent-function 1)
(register-definition-prefixes "gptel-gemini" '("gptel--gemini-"))



(autoload 'gptel-make-kagi "gptel-kagi" "\
Register a Kagi FastGPT backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST is the Kagi host (with port), defaults to \"kagi.com\".

MODELS is a list of available Kagi models: only fastgpt is supported.

STREAM is a boolean to toggle streaming responses, defaults to
false.  Kagi does not support a streaming API yet.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/api/v0/fastgpt\".

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that retuns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key.

Example:
-------

 (gptel-make-kagi \"Kagi\" :key my-kagi-key)

(fn NAME &key CURL-ARGS STREAM KEY (HOST \"kagi.com\") (HEADER (lambda nil \\=`((\"Authorization\" \\=\\, (concat \"Bot \" (gptel--get-api-key)))))) (MODELS \\='((fastgpt :capabilities (nosystem)) (summarize:cecil :capabilities (nosystem)) (summarize:agnes :capabilities (nosystem)) (summarize:daphne :capabilities (nosystem)) (summarize:muriel :capabilities (nosystem)))) (PROTOCOL \"https\") (ENDPOINT \"/api/v0/\"))")
(function-put 'gptel-make-kagi 'lisp-indent-function 1)



(autoload 'gptel-make-ollama "gptel-ollama" "\
Register an Ollama backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST is where Ollama runs (with port), defaults to localhost:11434

MODELS is a list of available model names, as symbols.
Additionally, you can specify supported LLM capabilities like
vision or tool-use by appending a plist to the model with more
information, in the form

 (model-name . plist)

Currently recognized plist keys are :description, :capabilities
and :mime-types.  An example of a model specification including
both kinds of specs:

:models
\\='(mistral:latest                        ;Simple specs
  openhermes:latest
  (llava:13b                            ;Full spec
   :description
   \"Llava 1.6: Large Lanuage and Vision Assistant\"
   :capabilities (media)
   :mime-types (\"image/jpeg\" \"image/png\")))


STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, http by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/api/generate\".

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that retuns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key.  This is typically not required
for local models like Ollama.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

Example:
-------

 (gptel-make-ollama
   \"Ollama\"
   :host \"localhost:11434\"
   :models \\='(mistral:latest)
   :stream t)

(fn NAME &key CURL-ARGS HEADER KEY MODELS STREAM REQUEST-PARAMS (HOST \"localhost:11434\") (PROTOCOL \"http\") (ENDPOINT \"/api/chat\"))")
(function-put 'gptel-make-ollama 'lisp-indent-function 1)
(register-definition-prefixes "gptel-ollama" '("gptel--ollama-"))



(autoload 'gptel-make-openai "gptel-openai" "\
Register an OpenAI API-compatible backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST (optional) is the API host, typically \"api.openai.com\".

MODELS is a list of available model names, as symbols.
Additionally, you can specify supported LLM capabilities like
vision or tool-use by appending a plist to the model with more
information, in the form

 (model-name . plist)

For a list of currently recognized plist keys, see
`gptel--openai-models'. An example of a model specification
including both kinds of specs:

:models
\\='(gpt-3.5-turbo                         ;Simple specs
  gpt-4-turbo
  (gpt-4o-mini                          ;Full spec
   :description
   \"Affordable and intelligent small model for lightweight tasks\"
   :capabilities (media tool json url)
   :mime-types
   (\"image/jpeg\" \"image/png\" \"image/gif\" \"image/webp\")))

STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/v1/chat/completions\".

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that returns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

(fn NAME &key CURL-ARGS MODELS STREAM KEY REQUEST-PARAMS (HEADER (lambda nil (when-let* ((key (gptel--get-api-key))) \\=`((\"Authorization\" \\=\\, (concat \"Bearer \" key)))))) (HOST \"api.openai.com\") (PROTOCOL \"https\") (ENDPOINT \"/v1/chat/completions\"))")
(function-put 'gptel-make-openai 'lisp-indent-function 1)
(autoload 'gptel-make-azure "gptel-openai" "\
Register an Azure backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST is the API host.

MODELS is a list of available model names, as symbols.

STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT is the API endpoint for completions.

HEADER (optional) is for additional headers to send with each
request.  It should be an alist or a function that retuns an
alist, like:
 ((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

Example:
-------

 (gptel-make-azure
  \"Azure-1\"
  :protocol \"https\"
  :host \"RESOURCE_NAME.openai.azure.com\"
  :endpoint
  \"/openai/deployments/DEPLOYMENT_NAME/completions?api-version=2023-05-15\"
  :stream t
  :models \\='(gpt-3.5-turbo gpt-4))

(fn NAME &key CURL-ARGS HOST (PROTOCOL \"https\") (HEADER (lambda nil \\=`((\"api-key\" \\=\\, (gptel--get-api-key))))) (KEY \\='gptel-api-key) MODELS STREAM ENDPOINT REQUEST-PARAMS)")
(function-put 'gptel-make-azure 'lisp-indent-function 1)
(defalias 'gptel-make-gpt4all 'gptel-make-openai "\
Register a GPT4All backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST is where GPT4All runs (with port), typically localhost:4891

MODELS is a list of available model names, as symbols.

STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/api/v1/completions\"

HEADER (optional) is for additional headers to send with each
request. It should be an alist or a function that retuns an
alist, like:
((\"Content-Type\" . \"application/json\"))

KEY (optional) is a variable whose value is the API key, or
function that returns the key. This is typically not required for
local models like GPT4All.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

Example:
-------

(gptel-make-gpt4all
 \"GPT4All\"
 :protocol \"http\"
 :host \"localhost:4891\"
 :models \\='(mistral-7b-openorca.Q4_0.gguf))")
(register-definition-prefixes "gptel-openai" '("gptel-"))



(autoload 'gptel-make-privategpt "gptel-openai-extras" "\
Register an Privategpt API-compatible backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST (optional) is the API host, \"api.privategpt.com\" by default.

MODELS is a list of available model names.

STREAM is a boolean to toggle streaming responses, defaults to
false.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions, defaults to
\"/v1/messages\".

HEADER (optional) is for additional headers to send with each
request. It should be an alist or a function that retuns an
alist, like:
((\"Content-Type\" . \"application/json\"))

KEY is a variable whose value is the API key, or function that
returns the key.

CONTEXT and SOURCES: if true (the default), use available context
and provide sources used by the model to generate the response.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters (as plist keys) and values supported by the API.  Use
these to set parameters that gptel does not provide user options
for.

(fn NAME &key CURL-ARGS STREAM KEY REQUEST-PARAMS (HEADER (lambda nil (when-let* ((key (gptel--get-api-key))) \\=`((\"Authorization\" \\=\\, (concat \"Bearer \" key)))))) (HOST \"localhost:8001\") (PROTOCOL \"http\") (MODELS \\='(private-gpt)) (ENDPOINT \"/v1/chat/completions\") (CONTEXT t) (SOURCES t))")
(function-put 'gptel-make-privategpt 'lisp-indent-function 1)
(autoload 'gptel-make-perplexity "gptel-openai-extras" "\
Register a Perplexity backend for gptel with NAME.

Keyword arguments:

CURL-ARGS (optional) is a list of additional Curl arguments.

HOST (optional) is the API host, \"api.perplexity.ai\" by default.

MODELS is a list of available model names.

STREAM is a boolean to toggle streaming responses.

PROTOCOL (optional) specifies the protocol, https by default.

ENDPOINT (optional) is the API endpoint for completions.

HEADER (optional) is for additional headers to send with each
request. It should be an alist or a function that returns an
alist.

KEY is a variable whose value is the API key, or function that
returns the key.

REQUEST-PARAMS (optional) is a plist of additional HTTP request
parameters.

(fn NAME &key CURL-ARGS STREAM KEY (HEADER (lambda nil (when-let* ((key (gptel--get-api-key))) \\=`((\"Authorization\" \\=\\, (concat \"Bearer \" key)))))) (HOST \"api.perplexity.ai\") (PROTOCOL \"https\") (MODELS \\='(sonar sonar-pro sonar-reasoning sonar-reasoning-pro sonar-deep-research)) (ENDPOINT \"/chat/completions\") REQUEST-PARAMS)")
(function-put 'gptel-make-perplexity 'lisp-indent-function 1)
(register-definition-prefixes "gptel-openai-extras" '("gptel--p"))



(register-definition-prefixes "gptel-org" '("gptel-"))



 (autoload 'gptel-rewrite "gptel-rewrite" nil t)
(register-definition-prefixes "gptel-rewrite" '("gptel-"))



 (autoload 'gptel-menu "gptel-transient" nil t)
 (autoload 'gptel-system-prompt "gptel-transient" nil t)
 (autoload 'gptel-tools "gptel-transient" nil t)
(register-definition-prefixes "gptel-transient" '("gptel-"))


(provide 'gptel-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-timemachine-20250128.940/git-timemachine-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'git-timemachine-toggle "git-timemachine" "\
Toggle git timemachine mode." t)
(autoload 'git-timemachine "git-timemachine" "\
Enable git timemachine for file of current buffer." t)
(autoload 'git-timemachine-switch-branch "git-timemachine" "\
Enable git timemachine for current buffer, switching to GIT-BRANCH.

(fn GIT-BRANCH)" t)
(register-definition-prefixes "git-timemachine" '("git-timemachine-"))


(provide 'git-timemachine-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-modes-20240805.1320/git-modes-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'gitattributes-mode "gitattributes-mode" "\
A major mode for editing .gitattributes files.
\\{gitattributes-mode-map}

(fn)" t)
(dolist (pattern '("/\\.gitattributes\\'" "/info/attributes\\'" "/git/attributes\\'")) (add-to-list 'auto-mode-alist (cons pattern #'gitattributes-mode)))
(register-definition-prefixes "gitattributes-mode" '("gitattributes-mode-"))



(autoload 'gitconfig-mode "gitconfig-mode" "\
A major mode for editing .gitconfig files.

(fn)" t)
(dolist (pattern '("/\\.gitconfig\\'" "/\\.git/config\\'" "/modules/.*/config\\'" "/git/config\\'" "/\\.gitmodules\\'" "/etc/gitconfig\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitconfig-mode)))
(register-definition-prefixes "gitconfig-mode" '("gitconfig-"))



(autoload 'gitignore-mode "gitignore-mode" "\
A major mode for editing .gitignore files.

(fn)" t)
(dolist (pattern (list "/\\.gitignore\\'" "/info/exclude\\'" "/git/ignore\\'")) (add-to-list 'auto-mode-alist (cons pattern 'gitignore-mode)))
(register-definition-prefixes "gitignore-mode" '("gitignore-mode-font-lock-keywords"))


(provide 'git-modes-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-messenger-20201202.1637/git-messenger-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'git-messenger:popup-message "git-messenger" nil t)
(register-definition-prefixes "git-messenger" '("git-messenger"))


(provide 'git-messenger-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-link-20250214.1240/git-link-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'git-link "git-link" "\
Create a URL representing the current buffer's location in its
GitHub/Bitbucket/GitLab/... repository at the current line number
or active region. The URL will be added to the kill ring.  If
`git-link-open-in-browser' is non-nil also call `browse-url'.

With a prefix argument of - generate a link without line number(s).
Also see `git-link-use-single-line-number'.

With a single prefix argument prompt for the remote's name.
Defaults to \"origin\".

With a double prefix argument invert the value of
`git-link-use-commit'.

(fn REMOTE START END)" t)
(autoload 'git-link-commit "git-link" "\
Create a URL representing the commit for the hash under point
in the current buffer's GitHub/Bitbucket/GitLab/...
repository. The URL will be added to the kill ring.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

(fn REMOTE)" t)
(autoload 'git-link-homepage "git-link" "\
Create a URL representing the homepage of the current
buffer's GitHub/Bitbucket/GitLab/... repository.  The URL will be
added to the kill ring.  If `git-link-open-in-browser' is non-nil
or if you pass the double prefix (Ctrl-u Ctrl-u), then also call
`browse-url'.

With a prefix argument prompt for the remote's name.
Defaults to \"origin\".

(fn REMOTE)" t)
(register-definition-prefixes "git-link" '("git-link-"))



 (autoload 'git-link-dispatch "git-link-transient" nil t)
(register-definition-prefixes "git-link-transient" '("git-link-"))


(provide 'git-link-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-gutter-20241212.1415/git-gutter-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'git-gutter:linum-setup "git-gutter" "\
Setup for linum-mode.")
(autoload 'git-gutter-mode "git-gutter" "\
Git-Gutter mode

This is a minor mode.  If called interactively, toggle the `Git-Gutter
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `git-gutter-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-git-gutter-mode 'globalized-minor-mode t)
(defvar global-git-gutter-mode nil "\
Non-nil if Global Git-Gutter mode is enabled.
See the `global-git-gutter-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-git-gutter-mode'.")
(custom-autoload 'global-git-gutter-mode "git-gutter" nil)
(autoload 'global-git-gutter-mode "git-gutter" "\
Toggle Git-Gutter mode in all buffers.
With prefix ARG, enable Global Git-Gutter mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Git-Gutter mode is enabled in all buffers where `git-gutter--turn-on'
would do it.

See `git-gutter-mode' for more information on Git-Gutter mode.

(fn &optional ARG)" t)
(autoload 'git-gutter "git-gutter" "\
Show diff information in gutter" t)
(autoload 'git-gutter:toggle "git-gutter" "\
Toggle to show diff information." t)
(register-definition-prefixes "git-gutter" '("git-gutter"))


(provide 'git-gutter-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/fringe-helper-20140620.2109/fringe-helper-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "fringe-helper" '("fringe-"))


(provide 'fringe-helper-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-gutter-fringe-20211003.2228/git-gutter-fringe-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "git-gutter-fringe" '("git-gutter-fr"))


(provide 'git-gutter-fringe-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/git-commit-ts-mode/git-commit-ts-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'git-commit-ts-mode "git-commit-ts-mode" "\


(fn)" t)
(register-definition-prefixes "git-commit-ts-mode" '("git-commit--treesit-font-lock-settings"))


(provide 'git-commit-ts-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/closql-20250220.1124/closql-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "closql" '("closql-" "eieio-"))


(provide 'closql-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/forge-20250223.1744/forge-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar forge-add-default-bindings t "\
Whether to add Forge's bindings to various Magit keymaps.

If you want to disable this, then you must set this to nil before
`magit' is loaded.  If you do it before `forge' but after `magit'
is loaded, then `magit-mode-map' ends up being modified anyway.")
(with-eval-after-load 'magit-mode (when forge-add-default-bindings (keymap-set magit-mode-map "'" #'forge-dispatch) (keymap-set magit-mode-map "N" #'forge-dispatch) (keymap-set magit-mode-map "<remap> <magit-browse-thing>" #'forge-browse) (keymap-set magit-mode-map "<remap> <magit-copy-thing>" #'forge-copy-url-at-point-as-kill)))
(with-eval-after-load 'magit-repos (when forge-add-default-bindings (keymap-set magit-repolist-mode-map "N" #'forge-dispatch)))
(with-eval-after-load 'git-commit (when forge-add-default-bindings (keymap-set git-commit-mode-map "C-c C-v" #'forge-visit-topic)))
(register-definition-prefixes "forge" '("forge-"))



(register-definition-prefixes "forge-bitbucket" '("forge-bitbucket-repository"))



(autoload 'forge-dispatch "forge-commands" nil t)
(autoload 'forge-configure "forge-commands" nil t)
(autoload 'forge-pull "forge-commands" nil t)
(autoload 'forge-pull-notifications "forge-commands" nil t)
(autoload 'forge-pull-topic "forge-commands" nil t)
(autoload 'forge-pull-this-topic "forge-commands" nil t)
(autoload 'forge-browse-issues "forge-commands" "\
Visit the current repository's issues using a browser." t)
(autoload 'forge-browse-pullreqs "forge-commands" "\
Visit the current repository's pull-requests using a browser." t)
(autoload 'forge-browse-topic "forge-commands" "\
Read a TOPIC and visit it using a browser.
By default only offer open topics but with a prefix argument
also offer closed topics.

(fn TOPIC)" t)
(autoload 'forge-browse-issue "forge-commands" "\
Read an ISSUE and visit it using a browser.
By default only offer open issues but with a prefix argument
also offer closed issues.

(fn ISSUE)" t)
(autoload 'forge-browse-pullreq "forge-commands" "\
Read a PULL-REQUEST and visit it using a browser.
By default only offer open pull-requests but with a prefix
argument also offer closed pull-requests.

(fn PULL-REQUEST)" t)
(autoload 'forge-browse-commit "forge-commands" "\
Read a COMMIT and visit it using a browser.

(fn COMMIT)" t)
(autoload 'forge-browse-branch "forge-commands" "\
Read a BRANCH and visit it using a browser.

(fn BRANCH)" t)
(autoload 'forge-browse-remote "forge-commands" "\
Read a REMOTE and visit it using a browser.

(fn REMOTE)" t)
(autoload 'forge-browse-repository "forge-commands" "\
Read a REPOSITORY and visit it using a browser.

(fn REPOSITORY)" t)
(autoload 'forge-browse-blob "forge-commands" "\
Visit a blob using a browser.

When invoked from a blob- or file-visiting buffer, visit that blob
without prompting.  If the region is active, try to jump to the marked
line or lines, and highlight them in the browser.  To what extend that
is possible depends on the forge.  When the region is not active just
visit the blob, without trying to jump to the current line.  When
jumping to a line, always use a commit hash as part of the URL.  From
a file in the worktree with no active region, instead use the branch
name as part of the URL, unless a prefix argument is used.

When invoked from any other buffer, prompt the user for a branch or
commit, and for a file.

(fn COMMIT FILE &optional LINE END FORCE-HASH)" t)
(autoload 'forge-browse-this-topic "forge-commands" nil t)
(autoload 'forge-browse-this-repository "forge-commands" "\
Visit the repository at point using a browser." t)
(autoload 'forge-copy-url-at-point-as-kill "forge-commands" "\
Copy the url of thing at point or the thing visited in the current buffer." t)
(autoload 'forge-browse "forge-commands" "\
Visit the thing at point using a browser." t)
(autoload 'forge-visit-topic "forge-commands" "\
Read a TOPIC and visit it.
By default only offer active topics for completion.  With a prefix
argument offer all topics.  While completion is in progress, \\<forge-read-topic-minibuffer-map>\\[forge-read-topic-lift-limit] lifts
the limitation to active topics.

(fn TOPIC)" t)
(autoload 'forge-visit-issue "forge-commands" "\
Read an ISSUE and visit it.
By default only offer active issues for completion.  With a prefix
argument offer all topics.  While completion is in progress, \\<forge-read-topic-minibuffer-map>\\[forge-read-topic-lift-limit] lifts
the limitation to active issues.

(fn ISSUE)" t)
(autoload 'forge-visit-pullreq "forge-commands" "\
Read a PULL-REQUEST and visit it.
By default only offer active pull-requests for completion.  With a
prefix argument offer all topics.  While completion is in progress,
\\<forge-read-topic-minibuffer-map>\\[forge-read-topic-lift-limit] lifts the limitation to active pull-requests.

(fn PULL-REQUEST)" t)
(autoload 'forge-visit-this-topic "forge-commands" "\
Visit the topic at point.
With prefix argument MENU, also show the topic menu.

(fn &optional MENU)" t)
(autoload 'forge-visit-this-repository "forge-commands" "\
Visit the repository at point." t)
(autoload 'forge-branch-pullreq "forge-commands" "\
Create and configure a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t)
(autoload 'forge-checkout-pullreq "forge-commands" "\
Create, configure and checkout a new branch from a pull-request.
Please see the manual for more information.

(fn PULLREQ)" t)
(autoload 'forge-checkout-this-pullreq "forge-commands" nil t)
(autoload 'forge-checkout-worktree "forge-commands" "\
Create, configure and checkout a new worktree from a pull-request.
This is like `forge-checkout-pullreq', except that it also
creates a new worktree.  Please see the manual for more
information.

(fn PATH PULLREQ)" t)
(autoload 'forge-fork "forge-commands" "\
Fork the current repository to FORK and add it as a REMOTE.
If the fork already exists, then that isn't an error; the remote
is added anyway.  Currently this only supports Github and Gitlab.

(fn FORK REMOTE)" t)
(autoload 'forge-merge "forge-commands" nil t)
(autoload 'forge-set-default-branch "forge-commands" "\
Change the default branch on the upstream remote and locally.
Also update the upstream branches of local branches accordingly." t)
(autoload 'forge-rename-default-branch "forge-commands" "\
Rename the default branch on the upstream remote and locally.
Also update the upstream branches of local branches accordingly." t)
(autoload 'forge-add-pullreq-refspec "forge-commands" nil t)
(autoload 'forge-add-repository "forge-commands" nil t)
(autoload 'forge-add-user-repositories "forge-commands" "\
Add all of USER's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST USER)" t)
(autoload 'forge-add-organization-repositories "forge-commands" "\
Add all of ORGANIZATION's repositories from HOST to the database.
This may take a while.  Only Github is supported at the moment.

(fn HOST ORGANIZATION)" t)
(autoload 'forge-remove-repository "forge-commands" "\
Remove a repository from the database.

(fn REPOSITORY)" t)
(autoload 'forge-remove-topic-locally "forge-commands" "\
Remove a topic from the local database only.

When the region marks multiple topics, then offer to remove them all.

The topic is not removed from the forge and, if it is later modified,
then it will be added to the database again when fetching all topics.

This is useful for users who only fetch individual topics and want to
remove the topics they are no longer interested in.  This can also be
used to remove topics locally, which have already been removed on the
forge (the service).  Forge (the package) cannot automatically detect
when that happens, because given how the APIs work, this would be too
expensive.

(fn TOPIC)" t)
(autoload 'forge-reset-database "forge-commands" "\
Move the current database file to the trash.
This is useful after the database scheme has changed, which will
happen a few times while the forge functionality is still under
heavy development." t)
(register-definition-prefixes "forge-commands" '("forge-"))



(register-definition-prefixes "forge-core" '("forge-"))



(register-definition-prefixes "forge-db" '("forge-"))



(register-definition-prefixes "forge-forgejo" '("forge-forgejo-repository"))



(register-definition-prefixes "forge-gitea" '("forge-gitea-repository"))



(register-definition-prefixes "forge-github" '("forge-"))



(register-definition-prefixes "forge-gitlab" '("forge-gitlab-repository"))



(register-definition-prefixes "forge-gogs" '("forge-gogs-repository"))



(register-definition-prefixes "forge-issue" '("forge-"))



(autoload 'forge-list-notifications "forge-notify" nil t)
(register-definition-prefixes "forge-notify" '("forge-"))



(register-definition-prefixes "forge-post" '("forge-"))



(register-definition-prefixes "forge-pullreq" '("forge-"))



(register-definition-prefixes "forge-repo" '("forge-"))



(autoload 'forge-repositories-menu "forge-repos" nil t)
(autoload 'forge-list-repositories "forge-repos" nil t)
(autoload 'forge-list-owned-repositories "forge-repos" nil t)
(register-definition-prefixes "forge-repos" '("forge-"))



(register-definition-prefixes "forge-revnote" '("forge-revnote"))



(register-definition-prefixes "forge-semi" '("forge-"))



(register-definition-prefixes "forge-tablist" '("forge--tab"))



(autoload 'forge-topic-menu "forge-topic" nil t)
(autoload 'forge-topic-state-menu "forge-topic" nil t)
(autoload 'forge-topic-status-menu "forge-topic" nil t)
(register-definition-prefixes "forge-topic" '("forge-"))



(autoload 'forge-topics-menu "forge-topics" nil t)
(autoload 'forge-list-topics "forge-topics" nil t)
(autoload 'forge-list-issues "forge-topics" nil t)
(autoload 'forge-list-pullreqs "forge-topics" nil t)
(autoload 'forge-list-global-topics "forge-topics" nil t)
(autoload 'forge-list-global-issues "forge-topics" nil t)
(autoload 'forge-list-global-pullreqs "forge-topics" nil t)
(register-definition-prefixes "forge-topics" '("forge-"))


(provide 'forge-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/flycheck-swift-20170129.549/flycheck-swift-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-swift-setup "flycheck-swift" "\
Setup Flycheck for Swift." t)
(register-definition-prefixes "flycheck-swift" '("flycheck-swift-prepend-for-cc-include-search-path"))


(provide 'flycheck-swift-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/flycheck-rust-20250226.2240/flycheck-rust-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-rust-setup "flycheck-rust" "\
Setup Rust in Flycheck.

If the current file is part of a Cargo project, configure
Flycheck according to the Cargo project layout." t)
(register-definition-prefixes "flycheck-rust" '("flycheck-rust-"))


(provide 'flycheck-rust-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/eglot-1.18/eglot-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(define-obsolete-function-alias 'eglot-update #'eglot-upgrade-eglot "29.1")
(autoload 'eglot "eglot" "\
Start LSP server for PROJECT's buffers under MANAGED-MAJOR-MODES.

This starts a Language Server Protocol (LSP) server suitable for
the buffers of PROJECT whose `major-mode' is among
MANAGED-MAJOR-MODES.  CLASS is the class of the LSP server to
start and CONTACT specifies how to connect to the server.

Interactively, the command attempts to guess MANAGED-MAJOR-MODES,
CLASS, CONTACT, and LANGUAGE-IDS from `eglot-server-programs',
according to the current buffer's `major-mode'.  PROJECT is
guessed from `project-find-functions'.  The search for active
projects in this context binds `eglot-lsp-context' (which see).

If it can't guess, it prompts the user for the mode and the
server.  With a single \\[universal-argument] prefix arg, it
always prompts for COMMAND.  With two \\[universal-argument], it
also always prompts for MANAGED-MAJOR-MODE.

The LSP server of CLASS is started (or contacted) via CONTACT.
If this operation is successful, current *and future* file
buffers of MANAGED-MAJOR-MODE inside PROJECT become \"managed\"
by the LSP server, meaning the information about their contents is
exchanged periodically with the server to provide enhanced
code-analysis via `xref-find-definitions', `flymake-mode',
`eldoc-mode', and `completion-at-point', among others.

PROJECT is a project object as returned by `project-current'.

CLASS is a subclass of `eglot-lsp-server'.

CONTACT specifies how to contact the server.  It is a
keyword-value plist used to initialize CLASS or a plain list as
described in `eglot-server-programs', which see.

LANGUAGE-IDS is a list of language ID string to send to the
server for each element in MANAGED-MAJOR-MODES.

INTERACTIVE is ignored and provided for backward compatibility.

(fn MANAGED-MAJOR-MODES PROJECT CLASS CONTACT LANGUAGE-IDS &optional INTERACTIVE)" t)
(autoload 'eglot-ensure "eglot" "\
Start Eglot session for current buffer if there isn't one.

Only use this function (in major mode hooks, etc) if you are
confident that Eglot can be started safely and efficiently for
*every* buffer visited where these hooks may execute.

Since it is difficult to establish this confidence fully, it's
often wise to use the interactive command `eglot' instead.  This
command only needs to be invoked once per project, as all other
files of a given major mode visited within the same project will
automatically become managed with no further user intervention
needed.")
(autoload 'eglot-upgrade-eglot "eglot" "\
Update Eglot to latest version.

(fn &rest _)" t)
(put 'eglot-workspace-configuration 'safe-local-variable #'listp)
(put 'eglot--debbugs-or-github-bug-uri 'bug-reference-url-format t)
(defun eglot--debbugs-or-github-bug-uri nil (format (if (string= (match-string 2) "github") "https://github.com/joaotavora/eglot/issues/%s" "https://debbugs.gnu.org/%s") (match-string 3)))
(register-definition-prefixes "eglot" '("eglot-"))


(provide 'eglot-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/flycheck-eglot-20240927.2343/flycheck-eglot-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-eglot-mode "flycheck-eglot" "\
Minor mode for using Flycheck with Eglot.

This is a minor mode.  If called interactively, toggle the
`Flycheck-Eglot mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `flycheck-eglot-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-flycheck-eglot-mode 'globalized-minor-mode t)
(defvar global-flycheck-eglot-mode nil "\
Non-nil if Global Flycheck-Eglot mode is enabled.
See the `global-flycheck-eglot-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-flycheck-eglot-mode'.")
(custom-autoload 'global-flycheck-eglot-mode "flycheck-eglot" nil)
(autoload 'global-flycheck-eglot-mode "flycheck-eglot" "\
Toggle Flycheck-Eglot mode in all buffers.
With prefix ARG, enable Global Flycheck-Eglot mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Flycheck-Eglot mode is enabled in all buffers where `(lambda nil (when
(flycheck-eglot--eglot-available-p) (flycheck-eglot-mode 1)))' would
do it.

See `flycheck-eglot-mode' for more information on Flycheck-Eglot
mode.

(fn &optional ARG)" t)
(register-definition-prefixes "flycheck-eglot" '("flycheck-eglot-"))


(provide 'flycheck-eglot-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/clojure-mode-20241211.1522/clojure-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'clojure-mode "clojure-mode" "\
Major mode for editing Clojure code.

\\{clojure-mode-map}

(fn)" t)
(autoload 'clojure-unwind "clojure-mode" "\
Unwind thread at point or above point by N levels.
With universal argument \\[universal-argument], fully unwind thread.

(fn &optional N)" t)
(autoload 'clojure-unwind-all "clojure-mode" "\
Fully unwind thread at point or above point." t)
(autoload 'clojure-thread "clojure-mode" "\
Thread by one more level an existing threading macro." t)
(autoload 'clojure-thread-first-all "clojure-mode" "\
Fully thread the form at point using ->.

When BUT-LAST is non-nil, the last expression is not threaded.
Default value is `clojure-thread-all-but-last'.

(fn BUT-LAST)" t)
(autoload 'clojure-thread-last-all "clojure-mode" "\
Fully thread the form at point using ->>.

When BUT-LAST is non-nil, the last expression is not threaded.
Default value is `clojure-thread-all-but-last'.

(fn BUT-LAST)" t)
(autoload 'clojure-cycle-privacy "clojure-mode" "\
Make public the current private def, or vice-versa.
See: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-privacy" t)
(autoload 'clojure-convert-collection-to-list "clojure-mode" "\
Convert collection at (point) to list." t)
(autoload 'clojure-convert-collection-to-quoted-list "clojure-mode" "\
Convert collection at (point) to quoted list." t)
(autoload 'clojure-convert-collection-to-map "clojure-mode" "\
Convert collection at (point) to map." t)
(autoload 'clojure-convert-collection-to-vector "clojure-mode" "\
Convert collection at (point) to vector." t)
(autoload 'clojure-convert-collection-to-set "clojure-mode" "\
Convert collection at (point) to set." t)
(autoload 'clojure-cycle-if "clojure-mode" "\
Change a surrounding if to if-not, or vice-versa.

See: https://github.com/clojure-emacs/clj-refactor.el/wiki/cljr-cycle-if" t)
(autoload 'clojure-cycle-when "clojure-mode" "\
Change a surrounding when to when-not, or vice-versa." t)
(autoload 'clojure-let-backward-slurp-sexp "clojure-mode" "\
Slurp the s-expression before the let form into the let form.
With a numeric prefix argument slurp the previous N s-expressions
into the let form.

(fn &optional N)" t)
(autoload 'clojure-let-forward-slurp-sexp "clojure-mode" "\
Slurp the next s-expression after the let form into the let form.
With a numeric prefix argument slurp the next N s-expressions
into the let form.

(fn &optional N)" t)
(autoload 'clojure-introduce-let "clojure-mode" "\
Create a let form, binding the form at point.
With a numeric prefix argument the let is introduced N lists up.

(fn &optional N)" t)
(autoload 'clojure-move-to-let "clojure-mode" "\
Move the form at point to a binding in the nearest let." t)
(autoload 'clojure-rename-ns-alias "clojure-mode" "\
Rename a namespace alias.
If a region is active, only pick up and rename aliases within the region." t)
(autoload 'clojure-add-arity "clojure-mode" "\
Add an arity to a function." t)
(autoload 'clojurescript-mode "clojure-mode" "\
Major mode for editing ClojureScript code.

\\{clojurescript-mode-map}

(fn)" t)
(autoload 'clojurec-mode "clojure-mode" "\
Major mode for editing ClojureC code.

\\{clojurec-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.\\(clj\\|cljd\\|dtm\\|edn\\|lpy\\)\\'" . clojure-mode))
(add-to-list 'auto-mode-alist '("\\.cljc\\'" . clojurec-mode))
(add-to-list 'auto-mode-alist '("\\.cljs\\'" . clojurescript-mode))
(add-to-list 'auto-mode-alist '("\\(?:build\\|profile\\)\\.boot\\'" . clojure-mode))
(add-to-list 'interpreter-mode-alist '("bb" . clojure-mode))
(add-to-list 'interpreter-mode-alist '("nbb" . clojurescript-mode))


(provide 'clojure-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/cider-20250226.1851/cider-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'cider-version "cider" "\
Display CIDER's version." t)
 (autoload 'cider-start-map "cider" "CIDER jack-in and connect keymap." t 'keymap)
(autoload 'cider-jack-in-clj "cider" "\
Start an nREPL server for the current project and connect to it.
PARAMS is a plist optionally containing :project-dir and :jack-in-cmd.
With the prefix argument, allow editing of the jack in command; with a
double prefix prompt for all these parameters.

(fn PARAMS)" t)
(autoload 'cider-jack-in-cljs "cider" "\
Start an nREPL server for the current project and connect to it.
PARAMS is a plist optionally containing :project-dir, :jack-in-cmd and
:cljs-repl-type (e.g. 'shadow, 'node, 'figwheel, etc).

With the prefix argument,
allow editing of the jack in command; with a double prefix prompt for all
these parameters.

(fn PARAMS)" t)
(autoload 'cider-jack-in-clj&cljs "cider" "\
Start an nREPL server and connect with clj and cljs REPLs.
PARAMS is a plist optionally containing :project-dir, :jack-in-cmd and
:cljs-repl-type (e.g. 'shadow, 'node, 'fighweel, etc).

With the prefix argument, allow for editing of the jack in command;
with a double prefix prompt for all these parameters.

When SOFT-CLJS-START is non-nil, start cljs REPL
only when the ClojureScript dependencies are met.

(fn &optional PARAMS SOFT-CLJS-START)" t)
(autoload 'cider-connect-sibling-clj "cider" "\
Create a Clojure REPL with the same server as OTHER-REPL.
PARAMS is for consistency with other connection commands and is currently
ignored.  OTHER-REPL defaults to `cider-current-repl' and in programs can
also be a server buffer, in which case a new session with a REPL for that
server is created.

(fn PARAMS &optional OTHER-REPL)" t)
(autoload 'cider-connect-sibling-cljs "cider" "\
Create a ClojureScript REPL with the same server as OTHER-REPL.
PARAMS is a plist optionally containing :cljs-repl-type (e.g. 'node,
'figwheel, 'shadow, etc).

All other parameters are inferred from the OTHER-REPL.
OTHER-REPL defaults to `cider-current-repl' but in programs can also be a
server buffer, in which case a new session for that server is created.

(fn PARAMS &optional OTHER-REPL)" t)
(autoload 'cider-connect-clj "cider" "\
Initialize a Clojure connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port and :project-dir.  On
prefix argument, prompt for all the parameters.

(fn &optional PARAMS)" t)
(autoload 'cider-connect-cljs "cider" "\
Initialize a ClojureScript connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port, :project-dir and
:cljs-repl-type (e.g. 'shadow, 'node, 'figwheel, etc).

On prefix, prompt for all the
parameters regardless of their supplied or default values.

(fn &optional PARAMS)" t)
(autoload 'cider-connect-clj&cljs "cider" "\
Initialize a Clojure and ClojureScript connection to an nREPL server.
PARAMS is a plist optionally containing :host, :port, :project-dir and
:cljs-repl-type (e.g. 'shadow, 'node, 'figwheel, etc).  When SOFT-CLJS-START is
non-nil, don't start if ClojureScript requirements are not met.

(fn PARAMS &optional SOFT-CLJS-START)" t)
(autoload 'cider "cider" "\
Start a connection of any type interactively." t)
(defalias 'cider-jack-in #'cider-jack-in-clj)
(defalias 'cider-connect #'cider-connect-clj)
(autoload 'cider-jack-in-universal "cider" "\
Start and connect to an nREPL server for the current project or ARG project id.

If a project is found in current dir, call `cider-jack-in' passing ARG as
first parameter, of which see.  Otherwise, ask user which project type to
start an nREPL server and connect to without a project.

But if invoked with a numeric prefix ARG, then start an nREPL server for
the project type denoted by ARG number and connect to it, even if there is
no project for it in the current dir.

The supported project tools and their assigned numeric prefix ids are
sourced from `cider-jack-in-universal-options', of which see.

You can pass a numeric prefix argument n with `M-n` or `C-u n`.

For example, to jack in to leiningen which is assigned to prefix arg 2 type

M-2 \\[cider-jack-in-universal].

(fn ARG)" t)
(autoload 'cider--setup-clojure-major-mode "cider" "\
Setup Cider key bindings on a Clojure mode's MODE-MAP and hooks in MODE-HOOK.

(fn MODE-MAP MODE-HOOK)")
(with-eval-after-load 'clojure-mode (cider--setup-clojure-major-mode clojure-mode-map 'clojure-mode-hook))
(with-eval-after-load 'clojure-ts-mode (cider--setup-clojure-major-mode (with-suppressed-warnings ((free-vars clojure-ts-mode-map)) clojure-ts-mode-map) 'clojure-ts-mode-hook))
(register-definition-prefixes "cider" '("cider-"))



(autoload 'cider-apropos "cider-apropos" "\
Show all symbols whose names match QUERY, a regular expression.
QUERY can also be a list of space-separated words (e.g. take while) which
will be converted to a regular expression (like take.+while) automatically
behind the scenes.  The search may be limited to the namespace NS, and may
optionally search doc strings (based on DOCS-P), include private vars
(based on PRIVATES-P), and be case-sensitive (based on CASE-SENSITIVE-P).

(fn QUERY &optional NS DOCS-P PRIVATES-P CASE-SENSITIVE-P)" t)
(autoload 'cider-apropos-documentation "cider-apropos" "\
Shortcut for (cider-apropos <query> nil t)." t)
(autoload 'cider-apropos-select "cider-apropos" "\
Similar to `cider-apropos', but presents the results in a completing read.
Show all symbols whose names match QUERY, a regular expression.
QUERY can also be a list of space-separated words (e.g. take while) which
will be converted to a regular expression (like take.+while) automatically
behind the scenes.  The search may be limited to the namespace NS, and may
optionally search doc strings (based on DOCS-P), include private vars
(based on PRIVATES-P), and be case-sensitive (based on CASE-SENSITIVE-P).

(fn QUERY &optional NS DOCS-P PRIVATES-P CASE-SENSITIVE-P)" t)
(autoload 'cider-apropos-documentation-select "cider-apropos" "\
Shortcut for (cider-apropos-select <query> nil t)." t)
(register-definition-prefixes "cider-apropos" '("apropos-special-form" "cider-"))



(autoload 'cider-browse-ns "cider-browse-ns" "\
List all NAMESPACE's vars in BUFFER.

(fn NAMESPACE)" t)
(autoload 'cider-browse-ns-all "cider-browse-ns" "\
List all loaded namespaces in BUFFER." t)
(register-definition-prefixes "cider-browse-ns" '("cider-browse-ns-"))



(autoload 'cider-browse-spec "cider-browse-spec" "\
Browse SPEC definition.

(fn SPEC)" t)
(autoload 'cider-browse-spec-all "cider-browse-spec" "\
Open list of specs in a popup buffer.

With a prefix argument ARG, prompts for a regexp to filter specs.
No filter applied if the regexp is the empty string.

(fn &optional ARG)" t)
(register-definition-prefixes "cider-browse-spec" '("cider-"))



(autoload 'cider-cheatsheet-select "cider-cheatsheet" "\
Navigate cheatsheet sections and show documentation for selected var.

With a prefix argument FLAT, represent each candidate as a full path to var.

(fn &optional FLAT)" t)
(autoload 'cider-cheatsheet "cider-cheatsheet" "\
Display cheatsheet in a popup buffer." t)
(register-definition-prefixes "cider-cheatsheet" '("cider-cheatsheet-"))



(autoload 'cider-classpath "cider-classpath" "\
List all classpath entries." t)
(autoload 'cider-open-classpath-entry "cider-classpath" "\
Open a classpath entry." t)
(register-definition-prefixes "cider-classpath" '("cider-classpath-"))



(register-definition-prefixes "cider-client" '("cider-"))



(autoload 'cider-clojuredocs-web "cider-clojuredocs" "\
Open ClojureDocs documentation in the default web browser.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

(fn &optional ARG)" t)
(autoload 'cider-clojuredocs-refresh-cache "cider-clojuredocs" "\
Refresh the ClojureDocs cache." t)
(autoload 'cider-clojuredocs "cider-clojuredocs" "\
Open ClojureDocs documentation in a popup buffer.

Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

(fn &optional ARG)" t)
(register-definition-prefixes "cider-clojuredocs" '("cider-"))



(register-definition-prefixes "cider-common" '("cider-"))



(register-definition-prefixes "cider-completion" '("cider-"))



(register-definition-prefixes "cider-completion-context" '("cider-completion-"))



(register-definition-prefixes "cider-connection" '("cider-"))



(autoload 'cider-debug-defun-at-point "cider-debug" "\
Instrument the \"top-level\" expression at point.
If it is a defn, dispatch the instrumented definition.  Otherwise,
immediately evaluate the instrumented expression.

While debugged code is being evaluated, the user is taken through the
source code and displayed the value of various expressions.  At each step,
a number of keys will be prompted to the user." t)
(register-definition-prefixes "cider-debug" '("cider-"))



(register-definition-prefixes "cider-doc" '("cider-"))



(register-definition-prefixes "cider-docstring" '("cider-"))



(register-definition-prefixes "cider-eldoc" '("cider-"))



(register-definition-prefixes "cider-eval" '("cider-"))



(autoload 'cider-find-var "cider-find" "\
Find definition for VAR at LINE.
Prompt according to prefix ARG and `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix of `-` or a double prefix argument causes
the results to be displayed in a different window.  The default value is
thing at point.

(fn &optional ARG VAR LINE)" t)
(autoload 'cider-find-dwim-at-mouse "cider-find" "\
Find and display variable or resource at mouse EVENT.

(fn EVENT)" t)
(autoload 'cider-find-dwim "cider-find" "\
Find and display the SYMBOL-FILE at point.
SYMBOL-FILE could be a var or a resource.  If thing at point is empty then
show Dired on project.  If var is not found, try to jump to resource of the
same name.  When called interactively, a prompt is given according to the
variable `cider-prompt-for-symbol'.  A single or double prefix argument
inverts the meaning.  A prefix of `-' or a double prefix argument causes
the results to be displayed in a different window.  A default value of thing
at point is given when prompted.

(fn SYMBOL-FILE)" t)
(autoload 'cider-find-resource "cider-find" "\
Find the resource at PATH.
Prompt for input as indicated by the variable `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix argument of `-` or a double prefix
argument causes the results to be displayed in other window.  The default
value is thing at point.

(fn PATH)" t)
(autoload 'cider-find-ns "cider-find" "\
Find the file containing NS.
A prefix ARG of `-` or a double prefix argument causes
the results to be displayed in a different window.

(fn &optional ARG NS)" t)
(autoload 'cider-find-keyword "cider-find" "\
Find the namespace of the keyword at point and its primary occurrence there.

For instance - if the keyword at point is \":cider.demo/keyword\", this command
would find the namespace \"cider.demo\" and afterwards find the primary (most relevant or first)
mention of \"::keyword\" there.

Prompt according to prefix ARG and `cider-prompt-for-symbol'.
A single or double prefix argument inverts the meaning of
`cider-prompt-for-symbol'.  A prefix of `-` or a double prefix argument causes
the results to be displayed in a different window.  The default value is
thing at point.

(fn &optional ARG)" t)
(register-definition-prefixes "cider-find" '("cider-"))



(autoload 'cider-format-region "cider-format" "\
Format the Clojure code in the current region.
START and END represent the region's boundaries.

(fn START END)" t)
(autoload 'cider-format-defun "cider-format" "\
Format the code in the current defun." t)
(autoload 'cider-format-buffer "cider-format" "\
Format the Clojure code in the current buffer." t)
(autoload 'cider-format-edn-buffer "cider-format" "\
Format the EDN data in the current buffer." t)
(autoload 'cider-format-edn-region "cider-format" "\
Format the EDN data in the current region.
START and END represent the region's boundaries.

(fn START END)" t)
(autoload 'cider-format-edn-last-sexp "cider-format" "\
Format the EDN data of the last sexp." t)
(register-definition-prefixes "cider-format" '("cider--format-"))



(autoload 'cider-inspect-last-sexp "cider-inspector" "\
Inspect the result of the the expression preceding point." t)
(autoload 'cider-inspect-defun-at-point "cider-inspector" "\
Inspect the result of the \"top-level\" expression at point." t)
(autoload 'cider-inspect-last-result "cider-inspector" "\
Inspect the most recent eval result." t)
(autoload 'cider-inspect "cider-inspector" "\
Inspect the result of the preceding sexp.

With a prefix argument ARG it inspects the result of the \"top-level\" form.
With a second prefix argument it prompts for an expression to eval and inspect.

(fn &optional ARG)" t)
(autoload 'cider-inspect-expr "cider-inspector" "\
Evaluate EXPR in NS and inspect its value.
Interactively, EXPR is read from the minibuffer, and NS the
current buffer's namespace.

(fn EXPR NS)" t)
(autoload 'cider-sync-request:inspect-last-exception "cider-inspector" "\
Inspects the exception in the cause stack identified by INDEX.

(fn INDEX)")
(register-definition-prefixes "cider-inspector" '("cider-"))



(register-definition-prefixes "cider-jar" '("cider-jar-"))



 (autoload 'cider-log-info "cider-log-info" "Show the Cider log current log buffer, framework, appender and consumer." t)
 (autoload 'cider-log-framework "cider-log" "Show the Cider log framework menu." t)
 (autoload 'cider-log-appender "cider-log" "Show the Cider log appender menu." t)
 (autoload 'cider-log-consumer "cider-log" "Show the Cider log consumer menu." t)
 (autoload 'cider-log-event "cider-log" "Show the Cider log event menu." t)
(autoload 'cider-log-show "cider-log" "\
Ensures the *cider-log* buffer is visible,
setting up a framework, appender and consumer if necessary.

Honors the `cider-log-framework-name' customization variable.

This function is offered as an alternative to workflows
based on `transient-mode'." t)
 (autoload 'cider-log "cider-log" "Show the Cider log menu." t)
(register-definition-prefixes "cider-log" '("cider-"))



(autoload 'cider-macroexpand-1 "cider-macroexpansion" "\
Invoke \\=`macroexpand-1\\=` on the expression preceding point.
If invoked with a PREFIX argument, use \\=`macroexpand\\=` instead of
\\=`macroexpand-1\\=`.

(fn &optional PREFIX)" t)
(autoload 'cider-macroexpand-all "cider-macroexpansion" "\
Invoke \\=`macroexpand-all\\=` on the expression preceding point." t)
(register-definition-prefixes "cider-macroexpansion" '("cider-"))



(defvar cider-mode-line '(:eval (format " cider[%s]" (cider--modeline-info))) "\
Mode line lighter for cider mode.

The value of this variable is a mode line template as in
`mode-line-format'.  See Info Node `(elisp)Mode Line Format' for details
about mode line templates.

Customize this variable to change how cider mode displays its status in the
mode line.  The default value displays the current connection.  Set this
variable to nil to disable the mode line entirely.")
(custom-autoload 'cider-mode-line "cider-mode" t)
(autoload 'cider--setup-menu-for-clojure-major-mode "cider-mode" "\
Setup a Cider menu for a Clojure major mode's MODE-MAP.

This menu works as an easy entry-point into CIDER.  Even if cider.el isn't
loaded yet, this will be shown in Clojure buffers next to the Clojure menu.

(fn MODE-MAP)")
(with-eval-after-load 'clojure-mode (cider--setup-menu-for-clojure-major-mode clojure-mode-map))
(with-eval-after-load 'clojure-ts-mode (cider--setup-menu-for-clojure-major-mode (with-suppressed-warnings ((free-vars clojure-ts-mode-map)) clojure-ts-mode-map)))
(autoload 'cider-mode "cider-mode" "\
Minor mode for REPL interaction from a Clojure buffer.

\\{cider-mode-map}

This is a minor mode.  If called interactively, toggle the `Cider mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `cider-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "cider-mode" '("cider-"))



(autoload 'cider-ns-reload "cider-ns" "\
Send a (require 'ns :reload) to the REPL.

With an argument PROMPT, it prompts for a namespace name.  This is the
Clojure out of the box reloading experience and does not rely on
org.clojure/tools.namespace.  See Commentary of this file for a longer list
of differences.  From the Clojure doc: \":reload forces loading of all the
identified libs even if they are already loaded\".

(fn &optional PROMPT)" t)
(autoload 'cider-ns-reload-all "cider-ns" "\
Send a (require 'ns :reload-all) to the REPL.

With an argument PROMPT, it prompts for a namespace name.  This is the
Clojure out of the box reloading experience and does not rely on
org.clojure/tools.namespace.  See Commentary of this file for a longer list
of differences.  From the Clojure doc: \":reload-all implies :reload and
also forces loading of all libs that the identified libs directly or
indirectly load via require\".

(fn &optional PROMPT)" t)
(autoload 'cider-ns-refresh "cider-ns" "\
Reload modified and unloaded namespaces, using the Reloaded Workflow.
Uses the configured 'refresh dirs' (defaults to the classpath dirs).

With a single prefix argument, or if MODE is `refresh-all', reload all
namespaces on the classpath dirs unconditionally.

With a double prefix argument, or if MODE is `clear', clear the state of
the namespace tracker before reloading.  This is useful for recovering from
some classes of error (for example, those caused by circular dependencies)
that a normal reload would not otherwise recover from.  The trade-off of
clearing is that stale code from any deleted files may not be completely
unloaded.

With a negative prefix argument, or if MODE is `inhibit-fns', prevent any
refresh functions (defined in `cider-ns-refresh-before-fn' and
`cider-ns-refresh-after-fn') from being invoked.

(fn &optional MODE)" t)
(register-definition-prefixes "cider-ns" '("cider-ns-"))



(register-definition-prefixes "cider-overlays" '("cider-"))



(register-definition-prefixes "cider-popup" '("cider-"))



(autoload 'cider-profile-samples "cider-profile" "\
Displays current max-sample-count.
If optional QUERY is specified, set max-sample-count and display new value.

(fn &optional QUERY)" t)
(autoload 'cider-profile-var-profiled-p "cider-profile" "\
Displays the profiling status of var under point.
Prompts for var if none under point or QUERY is present.

(fn QUERY)" t)
(autoload 'cider-profile-ns-toggle "cider-profile" "\
Toggle profiling for the ns associated with optional QUERY.

If optional argument QUERY is non-nil, prompt for ns.  Otherwise use
current ns.

(fn &optional QUERY)" t)
(autoload 'cider-profile-toggle "cider-profile" "\
Toggle profiling for the given QUERY.
Defaults to the symbol at point.
With prefix arg or no symbol at point, prompts for a var.

(fn QUERY)" t)
(autoload 'cider-profile-summary "cider-profile" "\
Display a summary of currently collected profile data." t)
(autoload 'cider-profile-var-summary "cider-profile" "\
Display profile data for var under point QUERY.
Defaults to the symbol at point.  With prefix arg or no symbol at point,
prompts for a var.

(fn QUERY)" t)
(autoload 'cider-profile-clear "cider-profile" "\
Clear any collected profile data." t)
(register-definition-prefixes "cider-profile" '("cider-profile-"))



(register-definition-prefixes "cider-repl" '("cider-"))



(autoload 'cider-repl-history "cider-repl-history" "\
Display items in the CIDER command history in another buffer." t)
(register-definition-prefixes "cider-repl-history" '("cider-repl-history-"))



(register-definition-prefixes "cider-resolve" '("cider-resolve-"))



(autoload 'cider-scratch "cider-scratch" "\
Go to the scratch buffer named `cider-scratch-buffer-name'." t)
(register-definition-prefixes "cider-scratch" '("cider-"))



(autoload 'cider-selector "cider-selector" "\
Select a new buffer by type, indicated by a single character.
The user is prompted for a single character indicating the method by
which to choose a new buffer.  The `?' character describes the
available methods.  OTHER-WINDOW provides an optional target.
See `def-cider-selector-method' for defining new methods.

(fn &optional OTHER-WINDOW)" t)
(register-definition-prefixes "cider-selector" '("cider-selector-" "def-cider-selector-method"))



(register-definition-prefixes "cider-stacktrace" '("cider-"))



(defvar cider-auto-test-mode nil "\
Non-nil if Cider-Auto-Test mode is enabled.
See the `cider-auto-test-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `cider-auto-test-mode'.")
(custom-autoload 'cider-auto-test-mode "cider-test" nil)
(autoload 'cider-auto-test-mode "cider-test" "\
Toggle automatic testing of Clojure files.

When enabled this reruns tests every time a Clojure file is loaded.
Only runs tests corresponding to the loaded file's namespace and does
nothing if no tests are defined or if the file failed to load.

This is a global minor mode.  If called interactively, toggle the
`Cider-Auto-Test mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='cider-auto-test-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "cider-test" '("cider-"))



(autoload 'cider-toggle-trace-var "cider-tracing" "\
Toggle var tracing.
Prompts for the symbol to use, or uses the symbol at point, depending on
the value of `cider-prompt-for-symbol'.  With prefix arg ARG, does the
opposite of what that option dictates.

(fn ARG)" t)
(autoload 'cider-toggle-trace-ns "cider-tracing" "\
Toggle ns tracing.
Defaults to the current ns.  With prefix arg QUERY, prompts for a ns.

(fn QUERY)" t)
(register-definition-prefixes "cider-tracing" '("cider-"))



(autoload 'cider-view-manual "cider-util" "\
View the manual in your default browser." t)
(register-definition-prefixes "cider-util" '("cider-"))



(autoload 'cider-xref-fn-refs "cider-xref" "\
Show all functions that reference the var matching NS and SYMBOL.

(fn &optional NS SYMBOL)" t)
(autoload 'cider-xref-fn-deps "cider-xref" "\
Show all functions referenced by the var matching NS and SYMBOL.

(fn &optional NS SYMBOL)" t)
(autoload 'cider-xref-fn-refs-select "cider-xref" "\
Displays the references for NS and SYMBOL using completing read.

(fn &optional NS SYMBOL)" t)
(autoload 'cider-xref-fn-deps-select "cider-xref" "\
Displays the function dependencies for  NS and SYMBOL using completing read.

(fn &optional NS SYMBOL)" t)
(register-definition-prefixes "cider-xref" '("cider-"))



(register-definition-prefixes "cider-xref-backend" '("cider--"))



(register-definition-prefixes "nrepl-client" '("cider-" "emacs-bug-46284/when-27.1-windows-nt" "nrepl-"))



(register-definition-prefixes "nrepl-dict" '("nrepl-"))


(provide 'cider-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/flycheck-clojure-20191215.2227/flycheck-clojure-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'flycheck-clojure-parse-cider-errors "flycheck-clojure" "\
Parse cider errors from JSON VALUE from CHECKER.

Return a list of parsed `flycheck-error' objects.

(fn VALUE CHECKER)")
(autoload 'flycheck-clojure-setup "flycheck-clojure" "\
Setup Flycheck for Clojure." t)
(register-definition-prefixes "flycheck-clojure" '("cider-flycheck-eval" "flycheck-clojure-"))


(provide 'flycheck-clojure-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/fish-mode-20240129.1213/fish-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'fish_indent-before-save "fish-mode" nil t)
(autoload 'fish-mode "fish-mode" "\
Major mode for editing fish shell files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.fish\\'" . fish-mode))
(add-to-list 'auto-mode-alist '("/fish_funced\\..*\\'" . fish-mode))
(add-to-list 'interpreter-mode-alist '("fish" . fish-mode))
(register-definition-prefixes "fish-mode" '("fish"))


(provide 'fish-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/faceup-20170925.1946/faceup-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'faceup-view-buffer "faceup" "\
Display the faceup representation of the current buffer." t)
(autoload 'faceup-write-file "faceup" "\
Save the faceup representation of the current buffer to the file FILE-NAME.

Unless a name is given, the file will be named xxx.faceup, where
xxx is the file name associated with the buffer.

If optional second arg CONFIRM is non-nil, this function
asks for confirmation before overwriting an existing file.
Interactively, confirmation is required unless you supply a prefix argument.

(fn &optional FILE-NAME CONFIRM)" t)
(autoload 'faceup-render-view-buffer "faceup" "\
Convert BUFFER containing Faceup markup to a new buffer and display it.

(fn &optional BUFFER)" t)
(autoload 'faceup-clean-buffer "faceup" "\
Remove faceup markup from buffer." t)
(autoload 'faceup-defexplainer "faceup" "\
Defines an Ert explainer function for FUNCTION.

FUNCTION must return an explanation when the test fails and
`faceup-test-explain' is set.

(fn FUNCTION)" nil t)
(register-definition-prefixes "faceup" '("faceup-"))


(provide 'faceup-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/exec-path-from-shell-20240411.859/exec-path-from-shell-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'exec-path-from-shell-copy-envs "exec-path-from-shell" "\
Set the environment variables with NAMES from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
The result is an alist, as described by
`exec-path-from-shell-getenvs'.

(fn NAMES)")
(autoload 'exec-path-from-shell-copy-env "exec-path-from-shell" "\
Set the environment variable $NAME from the user's shell.

As a special case, if the variable is $PATH, then the variables
`exec-path' and `eshell-path-env' are also set appropriately.
Return the value of the environment variable.

(fn NAME)" t)
(autoload 'exec-path-from-shell-initialize "exec-path-from-shell" "\
Initialize environment from the user's shell.

The values of all the environment variables named in
`exec-path-from-shell-variables' are set from the corresponding
values used in the user's shell." t)
(register-definition-prefixes "exec-path-from-shell" '("exec-path-from-shell-"))


(provide 'exec-path-from-shell-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/evil-textobj-tree-sitter-20241118.1711/evil-textobj-tree-sitter-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'evil-textobj-tree-sitter-get-textobj "evil-textobj-tree-sitter-core" "\
Macro to create a textobj function from `GROUP'.
You can pass in multiple groups as a list and in that case as long as
any one of them is available, it will be picked.

You can optionally pass in a alist mapping `major-mode' to their
respective tree-sitter query in `QUERY' with named captures to use
that instead of the default query list.  If `QUERY' does not contain
current `major-mode', then the default queries are used.
Check the README file in the repo to see how to use it.

Check this url for builtin objects
https://github.com/nvim-treesitter/nvim-treesitter-textobjects#built-in-textobjects

(fn GROUP &optional QUERY)" nil t)
(function-put 'evil-textobj-tree-sitter-get-textobj 'lisp-indent-function 'defun)
(autoload 'evil-textobj-tree-sitter-goto-textobj "evil-textobj-tree-sitter-core" "\
Got to the start/end of the textobj of type `GROUP'.
By default it goes to the start of the textobj, but pass in `END' if
you want to go to the end of the textobj instead.  You can pass in
`PREVIOUS' if you want to search backwards.  Optionally pass in
`QUERY' if you want to define a custom query.

(fn GROUP &optional PREVIOUS END QUERY)")
(register-definition-prefixes "evil-textobj-tree-sitter-core" '("evil-textobj-tree-sitter-"))



(autoload 'function-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the function at point, or nil if none is found.")
(autoload 'loop-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the loop at point, or nil if none is found.")
(autoload 'conditional-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the conditional at point, or nil if none is found.")
(autoload 'assignment-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the assignment at point, or nil if none is found.")
(autoload 'class-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the class at point, or nil if none is found.")
(autoload 'comment-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the comment at point, or nil if none is found.")
(autoload 'parameter-at-point "evil-textobj-tree-sitter-thing-at-point" "\
Return the parameter at point, or nil if none is found.")
(register-definition-prefixes "evil-textobj-tree-sitter-thing-at-point" '("evil-textobj-tree-sitter--thing-at-point-bounds"))


(provide 'evil-textobj-tree-sitter-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/evil-surround-20240325.852/evil-surround-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'evil-surround-delete "evil-surround" "\
Delete the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with
the overlays OUTER and INNER, where OUTER includes the delimiters
and INNER excludes them. The intersection (i.e., difference)
between these overlays is what is deleted.

(fn CHAR &optional OUTER INNER)" t)
(autoload 'evil-surround-change "evil-surround" "\
Change the surrounding delimiters represented by CHAR.
Alternatively, the text to delete can be represented with the
overlays OUTER and INNER, which are passed to `evil-surround-delete'.

(fn CHAR &optional OUTER INNER)" t)
(autoload 'evil-surround-mode "evil-surround" "\
Buffer-local minor mode to emulate surround.vim.

This is a minor mode.  If called interactively, toggle the
`Evil-Surround mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `evil-surround-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{evil-surround-mode-map}

(fn &optional ARG)" t)
(autoload 'turn-on-evil-surround-mode "evil-surround" "\
Enable evil-surround-mode in the current buffer.")
(autoload 'turn-off-evil-surround-mode "evil-surround" "\
Disable evil-surround-mode in the current buffer.")
(put 'global-evil-surround-mode 'globalized-minor-mode t)
(defvar global-evil-surround-mode nil "\
Non-nil if Global Evil-Surround mode is enabled.
See the `global-evil-surround-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-evil-surround-mode'.")
(custom-autoload 'global-evil-surround-mode "evil-surround" nil)
(autoload 'global-evil-surround-mode "evil-surround" "\
Toggle Evil-Surround mode in all buffers.
With prefix ARG, enable Global Evil-Surround mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Evil-Surround mode is enabled in all buffers where
`turn-on-evil-surround-mode' would do it.

See `evil-surround-mode' for more information on Evil-Surround mode.

(fn &optional ARG)" t)
(register-definition-prefixes "evil-surround" '("evil-surround-"))


(provide 'evil-surround-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/annalist-20240501.1201/annalist-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'annalist-record "annalist" "\
In the store for ANNALIST, TYPE, and LOCAL, record RECORD.
ANNALIST should correspond to the package/user recording this information (e.g.
'general, 'me, etc.). TYPE is the type of information being recorded (e.g.
'keybindings). LOCAL corresponds to whether to store RECORD only for the current
buffer. This information together is used to select where RECORD should be
stored in and later retrieved from with `annalist-describe'. RECORD should be a
list of items to record and later print as org headings and column entries in a
single row. If PLIST is non-nil, RECORD should be a plist instead of an ordered
list (e.g. '(keymap org-mode-map key \"C-c a\" ...)). The plist keys should be
the symbols used for the definition of TYPE.

(fn ANNALIST TYPE RECORD &key LOCAL PLIST)")
(autoload 'annalist-describe "annalist" "\
Describe information recorded by ANNALIST for TYPE.
For example: (annalist-describe 'general 'keybindings) If VIEW is non-nil, use
those settings for displaying recorded information instead of the defaults.

(fn ANNALIST TYPE &optional VIEW)")
(register-definition-prefixes "annalist" '("annalist-"))


(provide 'annalist-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/evil-collection-20250219.1559/evil-collection-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'evil-collection-translate-minor-mode-key "evil-collection" "\
Translate keys in the keymap(s) corresponding to STATES and MODES.

Similar to `evil-collection-translate-key' but for minor modes.
STATES should be the name of an evil state, a list of states, or nil. MODES
should be a symbol corresponding to minor-mode to make the translations in or a
list of minor-mode symbols. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

(fn STATES MODES &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)")
(function-put 'evil-collection-translate-minor-mode-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-translate-key "evil-collection" "\
Translate keys in the keymap(s) corresponding to STATES and KEYMAPS.
STATES should be the name of an evil state, a list of states, or nil. KEYMAPS
should be a symbol corresponding to the keymap to make the translations in or a
list of keymap symbols. Like `evil-define-key', when a keymap does not exist,
the keybindings will be deferred until the keymap is defined, so
`with-eval-after-load' is not necessary. TRANSLATIONS corresponds to a list of
key replacement pairs. For example, specifying \"a\" \"b\" will bind \"a\" to
\"b\"'s definition in the keymap. Specifying nil as a replacement will unbind a
key. If DESTRUCTIVE is nil, a backup of the keymap will be stored on the initial
invocation, and future invocations will always look up keys in the backup
keymap. When no TRANSLATIONS are given, this function will only create the
backup keymap without making any translations. On the other hand, if DESTRUCTIVE
is non-nil, the keymap will be destructively altered without creating a backup.
For example, calling this function multiple times with \"a\" \"b\" \"b\" \"a\"
would continue to swap and unswap the definitions of these keys. This means that
when DESTRUCTIVE is non-nil, all related swaps/cycles should be done in the same
invocation.

(fn STATES KEYMAPS &rest TRANSLATIONS &key DESTRUCTIVE &allow-other-keys)")
(function-put 'evil-collection-translate-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-swap-key "evil-collection" "\
Wrapper around `evil-collection-translate-key' for swapping keys.
STATES, KEYMAPS, and ARGS are passed to `evil-collection-translate-key'. ARGS
should consist of key swaps (e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\"
\"a\" with `evil-collection-translate-key') and optionally keyword arguments for
`evil-collection-translate-key'.

(fn STATES KEYMAPS &rest ARGS)" nil t)
(function-put 'evil-collection-swap-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-swap-minor-mode-key "evil-collection" "\
Wrapper around `evil-collection-translate-minor-mode-key' for swapping keys.
STATES, MODES, and ARGS are passed to
`evil-collection-translate-minor-mode-key'. ARGS should consist of key swaps
(e.g. \"a\" \"b\" is equivalent to \"a\" \"b\" \"b\" \"a\"
with `evil-collection-translate-minor-mode-key') and optionally keyword
arguments for `evil-collection-translate-minor-mode-key'.

(fn STATES MODES &rest ARGS)" nil t)
(function-put 'evil-collection-swap-minor-mode-key 'lisp-indent-function 'defun)
(autoload 'evil-collection-require "evil-collection" "\
Require the evil-collection-MODE file, but do not activate it.

MODE should be a symbol. This requires the evil-collection-MODE
feature without needing to manipulate `load-path'. NOERROR is
forwarded to `require'.

(fn MODE &optional NOERROR)")
(autoload 'evil-collection-init "evil-collection" "\
Register the Evil bindings for all modes in `evil-collection-mode-list'.

Alternatively, you may register select bindings manually, for
instance:

  (with-eval-after-load ='calendar
    (evil-collection-calendar-setup))

If MODES is specified (as either one mode or a list of modes), use those modes
instead of the modes in `evil-collection-mode-list'.

(fn &optional MODES)" t)
(register-definition-prefixes "evil-collection" '("evil-collection-"))


(provide 'evil-collection-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/erlang-20250115.1500/erlang-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'erlang-mode "erlang" "\
Major mode for editing Erlang source files in Emacs.
It knows about syntax and comment, it can indent code, it is capable
of fontifying the source file, the TAGS commands are aware of Erlang
modules, and the Erlang man pages can be accessed.

Should this module, \"erlang.el\", be installed properly, Erlang mode
is activated whenever an Erlang source or header file is loaded into
Emacs.  To indicate this, the mode line should contain the word
\"Erlang\".

The main feature of Erlang mode is indentation, press TAB and the
current line will be indented correctly.

Comments starting with only one `%' are indented to the column stored
in the variable `comment-column'.  Comments starting with two `%':s
are indented with the same indentation as code.  Comments starting
with at least three `%':s are indented to the first column.

However, Erlang mode contains much more, this is a list of the most
useful commands:
     TAB     - Indent the line.
     C-c C-q - Indent current function.
     M-;     - Create a comment at the end of the line.
     M-q     - Fill a comment, i.e. wrap lines so that they (hopefully)
                 will look better.
     M-a     - Goto the beginning of an Erlang clause.
     M-C-a   - Ditto for function.
     M-e     - Goto the end of an Erlang clause.
     M-C-e   - Ditto for function.
     M-h     - Mark current Erlang clause.
     M-C-h   - Ditto for function.
     C-c C-z - Start, or switch to, an inferior Erlang shell.
     C-c C-k - Compile current file.
     C-x `   - Next error.
     ,       - Electric comma.
     ;       - Electric semicolon.

Erlang mode check the name of the file against the module name when
saving, whenever a mismatch occurs Erlang mode offers to modify the
source.

The variable `erlang-electric-commands' controls the electric
commands.  To deactivate all of them, set it to nil.

There exists a large number of commands and variables in the Erlang
module.  Please press `M-x apropos RET erlang RET' to see a complete
list.  Press `C-h f name-of-function RET' and `C-h v name-of-variable
RET'to see the full description of functions and variables,
respectively.

On entry to this mode the contents of the hook `erlang-mode-hook' is
executed.

Please see the beginning of the file `erlang.el' for more information
and examples of hooks.

Other commands:
\\{erlang-mode-map}

(fn)" t)
(dolist (r '("\\.erl$" "\\.app\\.src$" "\\.escript" "\\.hrl$" "\\.xrl$" "\\.yrl" "/ebin/.+\\.app")) (add-to-list 'auto-mode-alist (cons r 'erlang-mode)))
(autoload 'erlang-find-tag "erlang" "\
Like `find-tag'.  Capable of retrieving Erlang modules.

Tags can be given on the forms `tag', `module:', `module:tag'.

(fn MODTAGNAME &optional NEXT-P REGEXP-P)" t)
(autoload 'erlang-find-tag-other-window "erlang" "\
Like `find-tag-other-window' but aware of Erlang modules.

(fn TAGNAME &optional NEXT-P REGEXP-P)" t)
(autoload 'erlang-shell "erlang" "\
Start a new Erlang shell.

The variable `erlang-shell-function' decides which method to use,
default is to start a new Erlang host.  It is possible that, in the
future, a new shell on an already running host will be started." t)
 (autoload 'run-erlang "erlang" "Start a new Erlang shell." t)
(autoload 'erlang-compile "erlang" "\
Compile Erlang module in current buffer." t)
(autoload 'inferior-erlang "erlang" "\
Run an inferior Erlang.
With prefix command, prompt for command to start Erlang with.

This is just like running Erlang in a normal shell, except that
an Emacs buffer is used for input and output.
\\<comint-mode-map>
The command line history can be accessed with  \\[comint-previous-input]  and  \\[comint-next-input].
The history is saved between sessions.

Entry to this mode calls the functions in the variables
`comint-mode-hook' and `erlang-shell-mode-hook' with no arguments.

The following commands imitate the usual Unix interrupt and
editing control characters:
\\{erlang-shell-mode-map}

(fn &optional COMMAND)" t)
(register-definition-prefixes "erlang" '("erlang-" "inferior-erlang-" "run-erlang"))



(autoload 'erlang-edoc-mode "erlang-edoc" "\
Toggle Erlang-EDoc mode on or off.

This is a minor mode.  If called interactively, toggle the `Erlang-EDoc
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `erlang-edoc-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "erlang-edoc" '("erlang-edoc-"))



(register-definition-prefixes "erlang-eunit" '("erlang-e" "filename-join"))



(register-definition-prefixes "erlang-flymake" '("erlang-flymake-"))



(register-definition-prefixes "erlang-skels" '("erlang-"))



(register-definition-prefixes "erlang-skels-old" '("erlang-"))



(let ((a '("\\.erl\\'" . erlang-mode)) (b '("\\.hrl\\'" . erlang-mode))) (or (assoc (car a) auto-mode-alist) (setq auto-mode-alist (cons a auto-mode-alist))) (or (assoc (car b) auto-mode-alist) (setq auto-mode-alist (cons b auto-mode-alist))))
(add-to-list 'interpreter-mode-alist (cons "escript" 'erlang-mode))
(let ((erl-ext '(".jam" ".vee" ".beam"))) (while erl-ext (add-to-list 'completion-ignored-extensions (car erl-ext)) (when (boundp 'dired-omit-extensions) (add-to-list 'dired-omit-extensions (car erl-ext))) (setq erl-ext (cdr erl-ext))))



(register-definition-prefixes "erlang-test" '("erlang-"))



(autoload 'erldoc-browse "erldoc" "\


(fn MFA)" t)
(autoload 'erldoc-apropos "erldoc" "\


(fn PATTERN)" t)
(autoload 'erldoc-eldoc-function "erldoc" "\
A function suitable for `eldoc-documentation-function'.")
(autoload 'erldoc-browse-topic "erldoc" "\


(fn TOPIC)" t)
(register-definition-prefixes "erldoc" '("erldoc-"))


(provide 'erlang-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/erlang-ts/erlang-ts-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'erlang-ts-mode "erlang-ts" "\
Major mode for editing erlang with tree-sitter.

(fn)" t)
(register-definition-prefixes "erlang-ts" '("erlang-"))


(provide 'erlang-ts-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/envrc-20250110.1756/envrc-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'envrc-mode "envrc" "\
A local minor mode in which env vars are set by direnv.

This is a minor mode.  If called interactively, toggle the `Envrc mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `envrc-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'envrc-global-mode 'globalized-minor-mode t)
(defvar envrc-global-mode nil "\
Non-nil if Envrc-Global mode is enabled.
See the `envrc-global-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `envrc-global-mode'.")
(custom-autoload 'envrc-global-mode "envrc" nil)
(autoload 'envrc-global-mode "envrc" "\
Toggle Envrc mode in all buffers.
With prefix ARG, enable Envrc-Global mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Envrc mode is enabled in all buffers where `(lambda nil (when (cond
((minibufferp) nil) ((file-remote-p default-directory) (and
envrc-remote (seq-contains-p envrc-supported-tramp-methods
(with-parsed-tramp-file-name default-directory vec vec-method)))) (t
(executable-find envrc-direnv-executable))) (envrc-mode 1)))' would do
it.

See `envrc-mode' for more information on Envrc mode.

(fn &optional ARG)" t)
(autoload 'envrc-file-mode "envrc" "\
Major mode for .envrc files as used by direnv.
\\{envrc-file-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.envrc\\'" . envrc-file-mode))
(register-definition-prefixes "envrc" '("envrc-"))


(provide 'envrc-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/embark-20250127.1315/embark-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defun embark--record-this-command nil "\
Record command which opened the minibuffer.
We record this because it will be the default action.
This function is meant to be added to `minibuffer-setup-hook'." (setq-local embark--command this-command))
(add-hook 'minibuffer-setup-hook #'embark--record-this-command)
(autoload 'embark-eldoc-first-target "embark" "\
Eldoc function reporting the first Embark target at point.
This function uses the eldoc REPORT callback and is meant to be
added to `eldoc-documentation-functions'.

(fn REPORT &rest _)")
(autoload 'embark-eldoc-target-types "embark" "\
Eldoc function reporting the types of all Embark targets at point.
This function uses the eldoc REPORT callback and is meant to be
added to `eldoc-documentation-functions'.

(fn REPORT &rest _)")
(autoload 'embark-bindings-in-keymap "embark" "\
Explore command key bindings in KEYMAP with `completing-read'.
The selected command will be executed.  Interactively, prompt the
user for a KEYMAP variable.

(fn KEYMAP)" t)
(autoload 'embark-bindings "embark" "\
Explore current command key bindings with `completing-read'.
The selected command will be executed.

This shows key bindings from minor mode maps and the local
map (usually set by the major mode), but also less common keymaps
such as those from a text property or overlay, or the overriding
maps: `overriding-terminal-local-map' and `overriding-local-map'.

Additionally, if GLOBAL is non-nil (interactively, if called with
a prefix argument), this command includes global key bindings.

(fn GLOBAL)" t)
(autoload 'embark-bindings-at-point "embark" "\
Explore all key bindings at point with `completing-read'.
The selected command will be executed.

This command lists key bindings found in keymaps specified by the
text properties `keymap' or `local-map', from either buffer text
or an overlay.  These are not widely used in Emacs, and when they
are used can be somewhat hard to discover.  Examples of locations
that have such a keymap are links and images in `eww' buffers,
attachment links in `gnus' article buffers, and the stash line
in a `vc-dir' buffer." t)
(autoload 'embark-prefix-help-command "embark" "\
Prompt for and run a command bound in the prefix used for this command.
The prefix described consists of all but the last event of the
key sequence that ran this command.  This function is intended to
be used as a value for `prefix-help-command'.

In addition to using completion to select a command, you can also
type @ and the key binding (without the prefix)." t)
(autoload 'embark-act "embark" "\
Prompt the user for an action and perform it.
The targets of the action are chosen by `embark-target-finders'.
By default, if called from a minibuffer the target is the top
completion candidate.  When called from a non-minibuffer buffer
there can multiple targets and you can cycle among them by using
`embark-cycle' (which is bound by default to the same key
binding `embark-act' is, but see `embark-cycle-key').

This command uses `embark-prompter' to ask the user to specify an
action, and calls it injecting the target at the first minibuffer
prompt.

If you call this from the minibuffer, it can optionally quit the
minibuffer.  The variable `embark-quit-after-action' controls
whether calling `embark-act' with nil ARG quits the minibuffer,
and if ARG is non-nil it will do the opposite.  Interactively,
ARG is the prefix argument.

If instead you call this from outside the minibuffer, the first
ARG targets are skipped over (if ARG is negative the skipping is
done by cycling backwards) and cycling starts from the following
target.

(fn &optional ARG)" t)
(autoload 'embark-act-all "embark" "\
Prompt the user for an action and perform it on each candidate.
The candidates are chosen by `embark-candidate-collectors'.  By
default, if `embark-select' has been used to select some
candidates, then `embark-act-all' will act on those candidates;
otherwise, if the selection is empty and `embark-act-all' is
called from a minibuffer, then the candidates are the completion
candidates.

This command uses `embark-prompter' to ask the user to specify an
action, and calls it injecting the target at the first minibuffer
prompt.

If you call this from the minibuffer, it can optionally quit the
minibuffer.  The variable `embark-quit-after-action' controls
whether calling `embark-act' with nil ARG quits the minibuffer,
and if ARG is non-nil it will do the opposite.  Interactively,
ARG is the prefix argument.

(fn &optional ARG)" t)
(autoload 'embark-dwim "embark" "\
Run the default action on the current target.
The target of the action is chosen by `embark-target-finders'.

If the target comes from minibuffer completion, then the default
action is the command that opened the minibuffer in the first
place, unless overridden by `embark-default-action-overrides'.

For targets that do not come from minibuffer completion
(typically some thing at point in a regular buffer) and whose
type is not listed in `embark-default-action-overrides', the
default action is given by whatever binding RET has in the action
keymap for the target's type.

See `embark-act' for the meaning of the prefix ARG.

(fn &optional ARG)" t)
(autoload 'embark-become "embark" "\
Make current command become a different command.
Take the current minibuffer input as initial input for new
command.  The new command can be run normally using key bindings or
\\[execute-extended-command], but if the current command is found in a keymap in
`embark-become-keymaps', that keymap is activated to provide
convenient access to the other commands in it.

If FULL is non-nil (interactively, if called with a prefix
argument), the entire minibuffer contents are used as the initial
input of the new command.  By default only the part of the
minibuffer contents between the current completion boundaries is
taken.  What this means is fairly technical, but (1) usually
there is no difference: the completion boundaries include the
entire minibuffer contents, and (2) the most common case where
these notions differ is file completion, in which case the
completion boundaries single out the path component containing
point.

(fn &optional FULL)" t)
(autoload 'embark-collect "embark" "\
Create an Embark Collect buffer.

To control the display, add an entry to `display-buffer-alist'
with key \"Embark Collect\".

In Embark Collect buffers `revert-buffer' is remapped to
`embark-rerun-collect-or-export', which has slightly unusual
behavior if the buffer was obtained by running `embark-collect'
from within a minibuffer completion session.  In that case
rerunning just restarts the completion session, that is, the
command that opened the minibuffer is run again and the
minibuffer contents restored.  You can then interact normally with
the command, perhaps editing the minibuffer contents, and, if you
wish, you can rerun `embark-collect' to get an updated buffer." t)
(autoload 'embark-live "embark" "\
Create a live-updating Embark Collect buffer.

To control the display, add an entry to `display-buffer-alist'
with key \"Embark Live\"." t)
(autoload 'embark-export "embark" "\
Create a type-specific buffer to manage current candidates.
The variable `embark-exporters-alist' controls how to make the
buffer for each type of completion.

In Embark Export buffers `revert-buffer' is remapped to
`embark-rerun-collect-or-export', which has slightly unusual
behavior if the buffer was obtained by running `embark-export'
from within a minibuffer completion session.  In that case
reverting just restarts the completion session, that is, the
command that opened the minibuffer is run again and the
minibuffer contents restored.  You can then interact normally
with the command, perhaps editing the minibuffer contents, and,
if you wish, you can rerun `embark-export' to get an updated
buffer." t)
(autoload 'embark-select "embark" "\
Add or remove the target from the current buffer's selection.
You can act on all selected targets at once with `embark-act-all'.
When called from outside `embark-act' this command will select
the first target at point." t)
(register-definition-prefixes "embark" '("embark-"))



(register-definition-prefixes "embark-org" '("embark-org-"))


(provide 'embark-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-20250216.1447/consult-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-completion-in-region "consult" "\
Use minibuffer completion as the UI for `completion-at-point'.

The arguments START, END, COLLECTION and PREDICATE and expected return
value are as specified for `completion-in-region'.  Use this function as
a value for `completion-in-region-function'.

(fn START END COLLECTION PREDICATE)")
(autoload 'consult-outline "consult" "\
Jump to an outline heading, obtained by matching against `outline-regexp'.

This command supports narrowing to a heading level and candidate
preview.  The initial narrowing LEVEL can be given as prefix
argument.  The symbol at point is added to the future history.

(fn &optional LEVEL)" t)
(autoload 'consult-mark "consult" "\
Jump to a marker in MARKERS list (defaults to buffer-local `mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-global-mark "consult" "\
Jump to a marker in MARKERS list (defaults to `global-mark-ring').

The command supports preview of the currently selected marker position.
The symbol at point is added to the future history.

(fn &optional MARKERS)" t)
(autoload 'consult-line "consult" "\
Search for a matching line.

Depending on the setting `consult-point-placement' the command
jumps to the beginning or the end of the first match on the line
or the line beginning.  The default candidate is the non-empty
line next to point.  This command obeys narrowing.  Optional
INITIAL input can be provided.  The search starting point is
changed if the START prefix argument is set.  The symbol at point
and the last `isearch-string' is added to the future history.

(fn &optional INITIAL START)" t)
(autoload 'consult-line-multi "consult" "\
Search for a matching line in multiple buffers.

By default search across all project buffers.  If the prefix
argument QUERY is non-nil, all buffers are searched.  Optional
INITIAL input can be provided.  The symbol at point and the last
`isearch-string' is added to the future history.  In order to
search a subset of buffers, QUERY can be set to a plist according
to `consult--buffer-query'.

(fn QUERY &optional INITIAL)" t)
(autoload 'consult-keep-lines "consult" "\
Select a subset of the lines in the current buffer with live preview.

The selected lines are kept and the other lines are deleted.  When called
interactively, the lines selected are those that match the minibuffer input.  In
order to match the inverse of the input, prefix the input with `! '.  When
called from Elisp, the filtering is performed by a FILTER function.  This
command obeys narrowing.

FILTER is the filter function.
INITIAL is the initial input.

(fn FILTER &optional INITIAL)" t)
(autoload 'consult-focus-lines "consult" "\
Hide or show lines using overlays.

The selected lines are shown and the other lines hidden.  When called
interactively, the lines selected are those that match the minibuffer input.  In
order to match the inverse of the input, prefix the input with `! '.  With
optional prefix argument SHOW reveal the hidden lines.  Alternatively the
command can be restarted to reveal the lines.  When called from Elisp, the
filtering is performed by a FILTER function.  This command obeys narrowing.

FILTER is the filter function.
INITIAL is the initial input.

(fn FILTER &optional SHOW INITIAL)" t)
(autoload 'consult-goto-line "consult" "\
Read line number and jump to the line with preview.

Enter either a line number to jump to the first column of the
given line or line:column in order to jump to a specific column.
Jump directly if a line number is given as prefix ARG.  The
command respects narrowing and the settings
`consult-goto-line-numbers' and `consult-line-numbers-widen'.

(fn &optional ARG)" t)
(autoload 'consult-recent-file "consult" "\
Find recent file using `completing-read'." t)
(autoload 'consult-mode-command "consult" "\
Run a command from any of the given MODES.

If no MODES are specified, use currently active major and minor modes.

(fn &rest MODES)" t)
(autoload 'consult-yank-from-kill-ring "consult" "\
Select STRING from the kill ring and insert it.
With prefix ARG, put point at beginning, and mark at end, like `yank' does.

This command behaves like `yank-from-kill-ring', which also offers a
`completing-read' interface to the `kill-ring'.  Additionally the
Consult version supports preview of the selected string.

(fn STRING &optional ARG)" t)
(autoload 'consult-yank-pop "consult" "\
If there is a recent yank act like `yank-pop'.

Otherwise select string from the kill ring and insert it.
See `yank-pop' for the meaning of ARG.

This command behaves like `yank-pop', which also offers a
`completing-read' interface to the `kill-ring'.  Additionally the
Consult version supports preview of the selected string.

(fn &optional ARG)" t)
(autoload 'consult-yank-replace "consult" "\
Select STRING from the kill ring.

If there was no recent yank, insert the string.
Otherwise replace the just-yanked string with the selected string.

(fn STRING)" t)
(autoload 'consult-bookmark "consult" "\
If bookmark NAME exists, open it, otherwise create a new bookmark with NAME.

The command supports preview of file bookmarks and narrowing.  See the
variable `consult-bookmark-narrow' for the narrowing configuration.

(fn NAME)" t)
(autoload 'consult-complex-command "consult" "\
Select and evaluate command from the command history.

This command can act as a drop-in replacement for `repeat-complex-command'." t)
(autoload 'consult-history "consult" "\
Insert string from HISTORY of current buffer.
In order to select from a specific HISTORY, pass the history
variable as argument.  INDEX is the name of the index variable to
update, if any.  BOL is the function which jumps to the beginning
of the prompt.  See also `cape-history' from the Cape package.

(fn &optional HISTORY INDEX BOL)" t)
(autoload 'consult-isearch-history "consult" "\
Read a search string with completion from the Isearch history.

This replaces the current search string if Isearch is active, and
starts a new Isearch session otherwise." t)
(autoload 'consult-minor-mode-menu "consult" "\
Enable or disable minor mode.

This is an alternative to `minor-mode-menu-from-indicator'." t)
(autoload 'consult-theme "consult" "\
Disable current themes and enable THEME from `consult-themes'.

The command supports previewing the currently selected theme.

(fn THEME)" t)
(autoload 'consult-buffer "consult" "\
Enhanced `switch-to-buffer' command with support for virtual buffers.

The command supports recent files, bookmarks, views and project files as
virtual buffers.  Buffers are previewed.  Narrowing to buffers (b), files (f),
bookmarks (m) and project files (p) is supported via the corresponding
keys.  In order to determine the project-specific files and buffers, the
`consult-project-function' is used.  The virtual buffer SOURCES
default to `consult-buffer-sources'.  See `consult--multi' for the
configuration of the virtual buffer sources.

(fn &optional SOURCES)" t)
(autoload 'consult-project-buffer "consult" "\
Enhanced `project-switch-to-buffer' command with support for virtual buffers.
The command may prompt you for a project directory if it is invoked from
outside a project.  See `consult-buffer' for more details." t)
(autoload 'consult-buffer-other-window "consult" "\
Variant of `consult-buffer', switching to a buffer in another window." t)
(autoload 'consult-buffer-other-frame "consult" "\
Variant of `consult-buffer', switching to a buffer in another frame." t)
(autoload 'consult-buffer-other-tab "consult" "\
Variant of `consult-buffer', switching to a buffer in another tab." t)
(autoload 'consult-grep "consult" "\
Search with `grep' for files in DIR where the content matches a regexp.

The initial input is given by the INITIAL argument.  DIR can be nil, a
directory string or a list of file/directory paths.  If `consult-grep'
is called interactively with a prefix argument, the user can specify the
directories or files to search in.  Multiple directories or files must
be separated by comma in the minibuffer, since they are read via
`completing-read-multiple'.  By default the project directory is used if
`consult-project-function' is defined and returns non-nil.  Otherwise
the `default-directory' is searched.  If the command is invoked with a
double prefix argument (twice `C-u') the user is asked for a project, if
not yet inside a project, or the current project is searched.

The input string is split, the first part of the string (grep input) is
passed to the asynchronous grep process and the second part of the
string is passed to the completion-style filtering.

The input string is split at a punctuation character, which is given as
the first character of the input string.  The format is similar to
Perl-style regular expressions, e.g., /regexp/.  Furthermore command
line options can be passed to grep, specified behind --.  The overall
prompt input has the form `#async-input -- grep-opts#filter-string'.

Note that the grep input string is transformed from Emacs regular
expressions to Posix regular expressions.  Always enter Emacs regular
expressions at the prompt.  `consult-grep' behaves like builtin Emacs
search commands, e.g., Isearch, which take Emacs regular expressions.
Furthermore the asynchronous input split into words, each word must
match separately and in any order.  See `consult--regexp-compiler' for
the inner workings.  In order to disable transformations of the grep
input, adjust `consult--regexp-compiler' accordingly.

Here we give a few example inputs:

#alpha beta         : Search for alpha and beta in any order.
#alpha.*beta        : Search for alpha before beta.
#\\(alpha\\|beta\\) : Search for alpha or beta (Note Emacs syntax!)
#word -- -C3        : Search for word, include 3 lines as context
#first#second       : Search for first, quick filter for second.

The symbol at point is added to the future history.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-git-grep "consult" "\
Search with `git grep' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-ripgrep "consult" "\
Search with `rg' for files in DIR with INITIAL input.
See `consult-grep' for details.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-find "consult" "\
Search for files with `find' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-fd "consult" "\
Search for files with `fd' in DIR.
The file names must match the input regexp.  INITIAL is the
initial minibuffer input.  See `consult-grep' for details
regarding the asynchronous search and the arguments.

(fn &optional DIR INITIAL)" t)
(autoload 'consult-locate "consult" "\
Search with `locate' for files which match input given INITIAL input.

The input is treated literally such that locate can take advantage of
the locate database index.  Regular expressions would often force a slow
linear search through the entire database.  The locate process is started
asynchronously, similar to `consult-grep'.  See `consult-grep' for more
details regarding the asynchronous search.

(fn &optional INITIAL)" t)
(autoload 'consult-man "consult" "\
Search for man page given INITIAL input.

The input string is not preprocessed and passed literally to the
underlying man commands.  The man process is started asynchronously,
similar to `consult-grep'.  See `consult-grep' for more details regarding
the asynchronous search.

(fn &optional INITIAL)" t)
(register-definition-prefixes "consult" '("consult-"))



(autoload 'consult-compile-error "consult-compile" "\
Jump to a compilation error in the current buffer.

This command collects entries from compilation buffers and grep
buffers related to the current buffer.  The command supports
preview of the currently selected error." t)
(register-definition-prefixes "consult-compile" '("consult-compile--"))



(autoload 'consult-flymake "consult-flymake" "\
Jump to Flymake diagnostic.
When PROJECT is non-nil then prompt with diagnostics from all
buffers in the current project instead of just the current buffer.

(fn &optional PROJECT)" t)
(register-definition-prefixes "consult-flymake" '("consult-flymake--"))



(autoload 'consult-imenu "consult-imenu" "\
Select item from flattened `imenu' using `completing-read' with preview.

The command supports preview and narrowing.  See the variable
`consult-imenu-config', which configures the narrowing.
The symbol at point is added to the future history.

See also `consult-imenu-multi'." t)
(autoload 'consult-imenu-multi "consult-imenu" "\
Select item from the imenus of all buffers from the same project.

In order to determine the buffers belonging to the same project, the
`consult-project-function' is used.  Only the buffers with the
same major mode as the current buffer are used.  See also
`consult-imenu' for more details.  In order to search a subset of buffers,
QUERY can be set to a plist according to `consult--buffer-query'.

(fn &optional QUERY)" t)
(register-definition-prefixes "consult-imenu" '("consult-imenu-"))



(autoload 'consult-info "consult-info" "\
Full text search through info MANUALS.

(fn &rest MANUALS)" t)
(register-definition-prefixes "consult-info" '("consult-info--"))



(autoload 'consult-kmacro "consult-kmacro" "\
Run a chosen keyboard macro.

With prefix ARG, run the macro that many times.
Macros containing mouse clicks are omitted.

(fn ARG)" t)
(register-definition-prefixes "consult-kmacro" '("consult-kmacro--"))



(autoload 'consult-org-heading "consult-org" "\
Jump to an Org heading.

MATCH and SCOPE are as in `org-map-entries' and determine which
entries are offered.  By default, all entries of the current
buffer are offered.

(fn &optional MATCH SCOPE)" t)
(autoload 'consult-org-agenda "consult-org" "\
Jump to an Org agenda heading.

By default, all agenda entries are offered.  MATCH is as in
`org-map-entries' and can used to refine this.

(fn &optional MATCH)" t)
(register-definition-prefixes "consult-org" '("consult-org--"))



(autoload 'consult-register-window "consult-register" "\
Enhanced drop-in replacement for `register-preview'.

BUFFER is the window buffer.
SHOW-EMPTY must be t if the window should be shown for an empty register list.

(fn BUFFER &optional SHOW-EMPTY)")
(autoload 'consult-register-format "consult-register" "\
Enhanced preview of register REG.
This function can be used as `register-preview-function'.
If COMPLETION is non-nil format the register for completion.

(fn REG &optional COMPLETION)")
(autoload 'consult-register "consult-register" "\
Load register and either jump to location or insert the stored text.

This command is useful to search the register contents.  For quick access
to registers it is still recommended to use the register functions
`consult-register-load' and `consult-register-store' or the built-in
built-in register access functions.  The command supports narrowing, see
`consult-register--narrow'.  Marker positions are previewed.  See
`jump-to-register' and `insert-register' for the meaning of prefix ARG.

(fn &optional ARG)" t)
(autoload 'consult-register-load "consult-register" "\
Do what I mean with a REG.

For a window configuration, restore it.  For a number or text, insert it.
For a location, jump to it.  See `jump-to-register' and `insert-register'
for the meaning of prefix ARG.

(fn REG &optional ARG)" t)
(autoload 'consult-register-store "consult-register" "\
Store register dependent on current context, showing an action menu.

With an active region, store/append/prepend the contents, optionally
deleting the region when a prefix ARG is given.  With a numeric prefix
ARG, store or add the number.  Otherwise store point, frameset, window or
kmacro.

(fn ARG)" t)
(register-definition-prefixes "consult-register" '("consult-register-"))



(autoload 'consult-xref "consult-xref" "\
Show xrefs with preview in the minibuffer.

This function can be used for `xref-show-xrefs-function'.
See `xref-show-xrefs-function' for the description of the
FETCHER and ALIST arguments.

(fn FETCHER &optional ALIST)")
(register-definition-prefixes "consult-xref" '("consult-xref--"))


(provide 'consult-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/embark-consult-20250201.501/embark-consult-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "embark-consult" '("embark-consult-"))


(provide 'embark-consult-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/el-patch-20231123.2216/el-patch-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(let ((loads (get 'el-patch 'custom-loads))) (if (member '"el-patch" loads) nil (put 'el-patch 'custom-loads (cons '"el-patch" loads)) (put 'lisp 'custom-loads (cons 'el-patch (get 'lisp 'custom-loads)))))
(autoload 'el-patch-add "el-patch" "\
Patch directive for inserting forms.
In the original definition, the ARGS and their containing form
are removed. In the new definition, the ARGS are spliced into the
containing s-expression.

(fn &rest ARGS)" nil t)
(function-put 'el-patch-add 'lisp-indent-function 0)
(autoload 'el-patch-remove "el-patch" "\
Patch directive for removing forms.
In the original definition, the ARGS are spliced into the
containing s-expression. In the new definition, the ARGS and
their containing form are removed.

(fn &rest ARGS)" nil t)
(function-put 'el-patch-remove 'lisp-indent-function 0)
(autoload 'el-patch-swap "el-patch" "\
Patch directive for swapping forms.
In the original definition, OLD is spliced into the containing
s-expression. In the new definition, NEW is spliced instead.

(fn OLD NEW)" nil t)
(function-put 'el-patch-swap 'lisp-indent-function 0)
(autoload 'el-patch-wrap "el-patch" "\
Patch directive for wrapping forms.
TRIML and TRIMR are optional arguments. If only one is provided,
it is assumed to be TRIML. ARGS is required, and it must be a
list.

In the original definition, the ARGS are spliced into the
containing s-expression. If TRIML is provided, the first TRIML of
the ARGS are removed first. If TRIMR is provided, the last TRIMR
are also removed. In the new definition, the ARGS and their
containing list are spliced into the containing s-expression.

(fn &optional TRIML TRIMR ARGS)" nil t)
(function-put 'el-patch-wrap 'lisp-indent-function 'defun)
(autoload 'el-patch-splice "el-patch" "\
Patch directive for splicing forms.
TRIML and TRIMR are optional arguments. If only one is provided,
it is assumed to be TRIML. ARGS is required, and it must be a
list.

In the original definition, the ARGS and their containing list
are spliced into the containing s-expression. In the new
definition, the ARGS are spliced into the containing
s-expression. If TRIML is provided, the first TRIML of the ARGS
are removed first. If TRIMR is provided, the last TRIMR are also
removed.

(fn &optional TRIML TRIMR ARGS)" nil t)
(function-put 'el-patch-splice 'lisp-indent-function 'defun)
(autoload 'el-patch-let "el-patch" "\
Patch directive for creating local el-patch bindings.
Creates local bindings according to VARLIST, then splices ARGS
into both the original and new definitions. You may bind symbols
that are also patch directives, but the bindings will not have
effect if the symbols are used at the beginning of a list (they
will act as patch directives).

(fn VARLIST &rest ARGS)" nil t)
(function-put 'el-patch-let 'lisp-indent-function 1)
(autoload 'el-patch-literal "el-patch" "\
Patch directive for treating patch directives literally.
ARGS are spliced into the containing s-expression, but are not
processed further by el-patch.

(fn &rest ARGS)" nil t)
(function-put 'el-patch-literal 'lisp-indent-function 0)
(autoload 'el-patch-concat "el-patch" "\
Patch directive for modifying string literals.
ARGS should resolve to strings; those strings are passed to
`concat' and spliced into the containing s-expression in both the
original and new definitions.

(fn &rest ARGS)" nil t)
(function-put 'el-patch-concat 'lisp-indent-function 0)
(autoload 'el-patch--definition "el-patch" "\
Activate a PATCH-DEFINITION and update `el-patch--patches'.
PATCH-DEFINITION is an unquoted list starting with `defun',
`defmacro', etc., which may contain patch directives.

(fn PATCH-DEFINITION)" nil t)
(autoload 'el-patch-unpatch "el-patch" "\
Remove the patch given by the PATCH-DEFINITION.
This restores the original functionality of the object being
patched. NAME, TYPE, and VARIANT are as returned by
`el-patch-get'.

(fn NAME TYPE VARIANT)" t)
(autoload 'el-patch-deftype "el-patch" "\
Allow `el-patch' to patch definitions of the given TYPE.
TYPE is a symbol like `defun', `define-minor-mode', etc. This
updates `el-patch-deftype-alist' (which see for explanations of
CLASSIFY, LOCATE, DECLARE, MACRO-NAME, and FONT-LOCK) with the
provided KWARGS and defines a macro named like `el-patch-defun',
`el-patch-define-minor-mode', etc. (which can be overridden by
MACRO-NAME).

(fn TYPE &rest KWARGS &key CLASSIFY LOCATE DECLARE MACRO-NAME FONT-LOCK)" nil t)
(function-put 'el-patch-deftype 'lisp-indent-function 'defun)
(autoload 'el-patch-fontify-as-defun "el-patch" "\
Fontify `el-patch' macro with given NAME as function definition.

(fn NAME)")
(autoload 'el-patch-fontify-as-variable "el-patch" "\
Fontify `el-patch' macro with given NAME as variable definition.

(fn NAME)")
(require 'el-patch-stub)
(el-patch--deftype-stub-setup)
(el-patch-deftype cl-defun :classify el-patch-classify-function :locate el-patch-locate-function :font-lock el-patch-fontify-as-defun :declare ((doc-string 3) (indent defun)))
(el-patch-deftype defconst :classify el-patch-classify-variable :locate el-patch-locate-variable :font-lock el-patch-fontify-as-variable :declare ((doc-string 3) (indent defun)))
(el-patch-deftype defcustom :classify el-patch-classify-variable :locate el-patch-locate-variable :font-lock el-patch-fontify-as-variable :declare ((doc-string 3) (indent defun)))
(el-patch-deftype define-minor-mode :classify el-patch-classify-define-minor-mode :locate el-patch-locate-function :font-lock el-patch-fontify-as-defun :declare ((doc-string 2) (indent defun)))
(el-patch-deftype defmacro :classify el-patch-classify-function :locate el-patch-locate-function :font-lock el-patch-fontify-as-defun :declare ((doc-string 3) (indent defun)))
(el-patch-deftype defsubst :classify el-patch-classify-function :locate el-patch-locate-function :font-lock el-patch-fontify-as-defun :declare ((doc-string 3) (indent defun)))
(el-patch-deftype defun :classify el-patch-classify-function :locate el-patch-locate-function :font-lock el-patch-fontify-as-defun :declare ((doc-string 3) (indent defun)))
(el-patch-deftype defvar :classify el-patch-classify-variable :locate el-patch-locate-variable :font-lock el-patch-fontify-as-variable :declare ((doc-string 3) (indent defun)))
(autoload 'el-patch-validate "el-patch" "\
Validate the patch with given NAME and TYPE.
This means el-patch will attempt to find the original definition
for the function, and verify that it is the same as the original
function assumed by the patch. A warning will be signaled if the
original definition for a patched function cannot be found, or if
there is a difference between the actual and expected original
definitions.

If multiple variants exist for the same patch, then select the
one specified by VARIANT (defaults to nil, like
`el-patch-variant'). For advanced usage only.

Interactively, use `completing-read' to select a function to
inspect the patch of.

NAME is a symbol naming the object being patched; TYPE is a
symbol `defun', `defmacro', etc.

Returns nil if the patch is not valid, and otherwise returns t.
If NOMSG is non-nil, does not signal a message when the patch is
valid.

If RUN-HOOKS is non-nil, runs `el-patch-pre-validate-hook' and
`el-patch-post-validate-hook'. Interactively, this happens unless
a prefix argument is provided.

See also `el-patch-validate-all'.

(fn NAME TYPE &optional NOMSG RUN-HOOKS VARIANT)" t)
(autoload 'el-patch-validate-all "el-patch" "\
Validate all currently defined patches.
Runs `el-patch-pre-validate-hook' and
`el-patch-post-validate-hook'.

See `el-patch-validate'." t)
(autoload 'el-patch-feature "el-patch" "\
Declare that some patches are only defined after FEATURE is loaded.
This is a convenience macro that creates a function for invoking
`require' on that feature, and then adds it to
`el-patch-pre-validate-hook' so that your patches are loaded and
`el-patch' can properly validate them.

FEATURE should be an unquoted symbol. ARGS, if given, are passed
unchanged along with FEATURE to `el-patch-require-function' when
`el-patch-validate-all' is called.

(fn FEATURE &rest ARGS)" nil t)
(autoload 'el-patch-get "el-patch" "\
Return the patch for object NAME of the given TYPE.
NAME is a symbol for the name of the definition that was patched,
and TYPE is a symbol `defun', `defmacro', etc. If the patch could
not be found, return nil.

If VARIANT is provided, select that variant of the patch. This is
useful only if patches were defined using `el-patch-variant'.

(fn NAME TYPE &optional VARIANT)")
(autoload 'el-patch-ediff-patch "el-patch" "\
Show the patch for an object in Ediff.
NAME, TYPE, and VARIANT are as returned by `el-patch-get'.

(fn NAME TYPE &optional VARIANT)" t)
(autoload 'el-patch-ediff-conflict "el-patch" "\
Show a patch conflict in Ediff.
This is a diff between the expected and actual values of a
patch's original definition. NAME, TYPE, and VARIANT are as
returned by `el-patch-get'.

(fn NAME TYPE &optional VARIANT)" t)
(register-definition-prefixes "el-patch" '("el-patch-"))



(register-definition-prefixes "el-patch-stub" '("el-patch--deftype-stub-setup"))



(defvar el-patch--templates (make-hash-table :test 'equal) "\
Hash table of templates that have been defined.
The keys are symbols naming the objects that have been patched.
The values are hash tables mapping definition types (symbols
`defun', `defmacro', etc.) to patch definitions, which are lists
beginning with `defun', `defmacro', etc.")
(autoload 'el-patch-insert-template "el-patch-template" "\
Resolve a template to an el-patch definition and insert it at point.

Template should have been defined using
`el-patch-define-template'. NAME is a symbol naming the object
being patched; TYPE is a symbol `defun', `defmacro', etc.

(fn NAME TYPE)" t)
(autoload 'el-patch-eval-template "el-patch-template" "\
Resolve a template to an el-patch definition and evaluate it.

Template should have been defined using
`el-patch-define-template'. NAME is a symbol naming the object
being patched; TYPE is a symbol `defun', `defmacro', etc.

(fn NAME TYPE)" t)
(autoload 'el-patch-define-template "el-patch-template" "\
Define an el-patch template.
TYPE-NAME is a list whose first element is a type which can be
any type from `el-patch-deftype-alist', e.g., `defun',
`defmacro', etc, and the second element is the name of the elisp
object to be patched or an `el-patch-*' form that resolves to
that name. Return the new-resolved name of the object.

A template in TEMPLATES can contain `...', which greedily matches
one or more forms, and `el-patch-*' directives which are resolved
before being matched. A template must match exactly one form in
the definition of the elisp object, and should not match a
subform in another template. The checks along with the actual
matching are done when the functions `el-patch-eval-template' or
`el-patch-insert-template' are called.

(fn TYPE-NAME &rest TEMPLATES)" nil t)
(autoload 'el-patch-define-and-eval-template "el-patch-template" "\
Define and evaluate an el-patch template.

The meaning of TYPE-NAME and TEMPLATES are the same as
`el-patch-define-template'. If called in compile-time,
macro-expand the resolved template after defining the template.
If called in runtime, evaluate the resolved template instead and,
if `el-patch-warn-on-eval-template' is non-nil, print a warning.

(fn TYPE-NAME &rest TEMPLATES)" nil t)
(autoload 'el-patch-validate-template "el-patch-template" "\
Validate the template with given NAME and TYPE.
This means el-patch will verify that the template is applicable
to the original function assumed by the patch. A warning will be
signaled if the original definition for a patched function cannot
be found, or if the template is not applicable.

Interactively, use `completing-read' to select a function to
inspect the template of.

NAME is a symbol naming the object being patched; TYPE is a
symbol `defun', `defmacro', etc.

Returns nil if the template is not valid, and otherwise returns t.
If NOMSG is non-nil, does not signal a message when the patch is
valid.

If RUN-HOOKS is non-nil, runs `el-patch-pre-validate-hook' and
`el-patch-post-validate-hook'. Interactively, this happens unless
a prefix argument is provided.

See also `el-patch-validate-all'.

(fn NAME TYPE &optional NOMSG RUN-HOOKS)" t)
(autoload 'el-patch-validate-all-templates "el-patch-template" "\
Validate all currently defined patches.
Runs `el-patch-pre-validate-hook' and
`el-patch-post-validate-hook'.

See `el-patch-validate-template'." t)
(register-definition-prefixes "el-patch-template" '("el-patch-"))


(provide 'el-patch-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/editorconfig-20250219.1528/editorconfig-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar editorconfig-mode nil "\
Non-nil if Editorconfig mode is enabled.
See the `editorconfig-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `editorconfig-mode'.")
(custom-autoload 'editorconfig-mode "editorconfig" nil)
(autoload 'editorconfig-mode "editorconfig" "\
Toggle EditorConfig feature.

To disable EditorConfig in some buffers, modify
`editorconfig-exclude-modes' or `editorconfig-exclude-regexps'.

This is a global minor mode.  If called interactively, toggle the
`Editorconfig mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='editorconfig-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'editorconfig-version "editorconfig" "\
Get EditorConfig version as string.

If called interactively or if SHOW-VERSION is non-nil, show the
version in the echo area and the messages buffer.

(fn &optional SHOW-VERSION)" t)
(register-definition-prefixes "editorconfig" '("editorconfig-"))



(autoload 'editorconfig-conf-mode "editorconfig-conf-mode" "\
Major mode for editing .editorconfig files.

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.editorconfig\\'" . editorconfig-conf-mode))
(register-definition-prefixes "editorconfig-conf-mode" '("editorconfig-conf-mode-"))



(autoload 'editorconfig-core-get-nearest-editorconfig "editorconfig-core" "\
Return path to .editorconfig file that is closest to DIRECTORY.

(fn DIRECTORY)")
(autoload 'editorconfig-core-get-properties "editorconfig-core" "\
Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This function returns an alist of properties.  Each element will
look like (KEY . VALUE).

(fn &optional FILE CONFNAME CONFVERSION)")
(autoload 'editorconfig-core-get-properties-hash "editorconfig-core" "\
Get EditorConfig properties for FILE.
If FILE is not given, use currently visiting file.
Give CONFNAME for basename of config file other than .editorconfig.
If need to specify config format version, give CONFVERSION.

This function is almost same as `editorconfig-core-get-properties', but returns
hash object instead.

(fn &optional FILE CONFNAME CONFVERSION)")
(register-definition-prefixes "editorconfig-core" '("editorconfig-core--"))



(register-definition-prefixes "editorconfig-core-handle" '("editorconfig-core-handle"))



(register-definition-prefixes "editorconfig-fnmatch" '("editorconfig-fnmatch-"))



(autoload 'editorconfig-apply "editorconfig-tools" "\
Get and apply EditorConfig properties to current buffer.

This function does not respect the values of `editorconfig-exclude-modes' and
`editorconfig-exclude-regexps' and always applies available properties.
Use `editorconfig-mode-apply' instead to make use of these variables." t)
(autoload 'editorconfig-mode-apply "editorconfig-tools" "\
Get and apply EditorConfig properties to current buffer.

This function does nothing when the major mode is listed in
`editorconfig-exclude-modes', or variable `buffer-file-name' matches
any of regexps in `editorconfig-exclude-regexps'." t)
(autoload 'editorconfig-find-current-editorconfig "editorconfig-tools" "\
Find the closest .editorconfig file for current file." t)
(autoload 'editorconfig-display-current-properties "editorconfig-tools" "\
Display EditorConfig properties extracted for current buffer." t)
(defalias 'describe-editorconfig-properties #'editorconfig-display-current-properties)
(autoload 'editorconfig-format-buffer "editorconfig-tools" "\
Format buffer according to .editorconfig indent_style and indent_width." t)


(provide 'editorconfig-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/eat/eat-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'eat-term-make "eat" "\
Make a Eat terminal at POSITION in BUFFER.

(fn BUFFER POSITION)")
(autoload 'eat "eat" "\
Start a new Eat terminal emulator in a buffer.

Start a new Eat session, or switch to an already active session.
Return the buffer selected (or created).

With a non-numeric prefix ARG, create a new session.

With a numeric prefix ARG (like \\[universal-argument] 42 \\[eat]),
switch to the session with that number, or create it if it doesn't
already exist.

With double prefix argument ARG, ask for the program to run and run it
in a newly created session.

PROGRAM can be a shell command.

(fn &optional PROGRAM ARG)" t)
(autoload 'eat-other-window "eat" "\
Start a new Eat terminal emulator in a buffer in another window.

Start a new Eat session, or switch to an already active session.
Return the buffer selected (or created).

With a non-numeric prefix ARG, create a new session.

With a numeric prefix ARG switch to the session with that number, or
create it if it doesn't already exist.

With double prefix argument ARG, ask for the program to run and run it
in a newly created session.

PROGRAM can be a shell command.

(fn &optional PROGRAM ARG)" t)
(defvar eat-eshell-mode nil "\
Non-nil if Eat-Eshell mode is enabled.
See the `eat-eshell-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `eat-eshell-mode'.")
(custom-autoload 'eat-eshell-mode "eat" nil)
(autoload 'eat-eshell-mode "eat" "\
Toggle Eat terminal emulation in Eshell.

This is a global minor mode.  If called interactively, toggle the
`Eat-Eshell mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='eat-eshell-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(defvar eat-eshell-visual-command-mode nil "\
Non-nil if Eat-Eshell-Visual-Command mode is enabled.
See the `eat-eshell-visual-command-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `eat-eshell-visual-command-mode'.")
(custom-autoload 'eat-eshell-visual-command-mode "eat" nil)
(autoload 'eat-eshell-visual-command-mode "eat" "\
Toggle running Eshell visual commands with Eat.

This is a global minor mode.  If called interactively, toggle the
`Eat-Eshell-Visual-Command mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='eat-eshell-visual-command-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'eat-project "eat" "\
Start Eat in the current project's root directory.

Start a new Eat session, or switch to an already active session.
Return the buffer selected (or created).

With a non-numeric prefix ARG, create a new session.

With a numeric prefix ARG (like
\\[universal-argument] 42 \\[eat-project]), switch to the session with
that number, or create it if it doesn't already exist.

(fn &optional ARG)" t)
(autoload 'eat-project-other-window "eat" "\
Start Eat in the current project root directory in another window.

Start a new Eat session, or switch to an already active session.
Return the buffer selected (or created).

With a non-numeric prefix ARG, create a new session.

With a numeric prefix ARG (like
\\[universal-argument] 42 \\[eat-project]), switch to the session with
that number, or create it if it doesn't already exist.

(fn &optional ARG)" t)
(register-definition-prefixes "eat" '("eat-"))



(register-definition-prefixes "eat-tests" '("eat--tests-"))


(provide 'eat-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/doom-modeline-20241225.206/doom-modeline-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'doom-modeline-set-main-modeline "doom-modeline" "\
Set main mode-line.
If DEFAULT is non-nil, set the default mode-line for all buffers.

(fn &optional DEFAULT)")
(defvar doom-modeline-mode nil "\
Non-nil if Doom-Modeline mode is enabled.
See the `doom-modeline-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `doom-modeline-mode'.")
(custom-autoload 'doom-modeline-mode "doom-modeline" nil)
(autoload 'doom-modeline-mode "doom-modeline" "\
Toggle `doom-modeline' on or off.

This is a global minor mode.  If called interactively, toggle the
`Doom-Modeline mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='doom-modeline-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "doom-modeline" '("doom-modeline-"))



(register-definition-prefixes "doom-modeline-core" '("doom-modeline"))



 (autoload 'doom-modeline-env-setup-python "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-ruby "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-perl "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-go "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-elixir "doom-modeline-env")
 (autoload 'doom-modeline-env-setup-rust "doom-modeline-env")
(register-definition-prefixes "doom-modeline-env" '("doom-modeline-"))



(register-definition-prefixes "doom-modeline-segments" '("doom-modeline-"))


(provide 'doom-modeline-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/dockerfile-mode-20250225.1527/dockerfile-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'dockerfile-build-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer.

If the prefix arg NO-CACHE is set, don't cache the image.

The shell command used to build the image is:

    sudo docker build    \\
      --no-cache         \\
      --force-rm         \\
      --pull             \\
      --tag IMAGE-NAME   \\
      --build-args args  \\
      --progress type    \\
      -f filename        \\
      directory

(fn IMAGE-NAME &optional NO-CACHE)" t)
(autoload 'dockerfile-build-no-cache-buffer "dockerfile-mode" "\
Build an image called IMAGE-NAME based upon the buffer without cache.

(fn IMAGE-NAME)" t)
(autoload 'dockerfile-mode "dockerfile-mode" "\
A major mode to edit Dockerfiles.
\\{dockerfile-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist (cons (concat "[/\\]" "\\(?:Containerfile\\|Dockerfile\\)" "\\(?:\\.[^/\\]*\\)?\\'") 'dockerfile-mode))
(add-to-list 'auto-mode-alist '("\\.dockerfile\\'" . dockerfile-mode))
(register-definition-prefixes "dockerfile-mode" '("dockerfile-"))


(provide 'dockerfile-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/docker-compose-mode-20200830.1336/docker-compose-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'docker-compose-mode "docker-compose-mode" "\
Major mode to edit docker-compose files.

(fn)" t)
(add-to-list 'auto-mode-alist '("docker-compose[^/]*\\.ya?ml\\'" . docker-compose-mode))
(register-definition-prefixes "docker-compose-mode" '("docker-compose-"))


(provide 'docker-compose-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/aio-20200610.1904/aio-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "aio" '("aio-"))


(provide 'aio-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/docker-20250109.810/docker-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'docker-compose "docker-compose" nil t)
(register-definition-prefixes "docker-compose" '("docker-compose-"))



 (autoload 'docker-container-eshell "docker-container" nil t)
 (autoload 'docker-container-find-directory "docker-container" nil t)
 (autoload 'docker-container-find-file "docker-container" nil t)
 (autoload 'docker-container-shell "docker-container" nil t)
 (autoload 'docker-container-shell-env "docker-container" nil t)
 (autoload 'docker-container-vterm "docker-container" nil t)
 (autoload 'docker-container-vterm-env "docker-container" nil t)
 (autoload 'docker-container-eat "docker-container" nil t)
 (autoload 'docker-container-eat-env "docker-container" nil t)
 (autoload 'docker-containers "docker-container" nil t)
(register-definition-prefixes "docker-container" '("docker-container-"))



 (autoload 'docker-contexts "docker-context" nil t)
(register-definition-prefixes "docker-context" '("docker-context-"))



 (autoload 'docker "docker" nil t)
(register-definition-prefixes "docker-core" '("docker-"))



 (autoload 'docker-image-pull-one "docker-image" nil t)
 (autoload 'docker-images "docker-image" nil t)
(register-definition-prefixes "docker-image" '("docker-"))



 (autoload 'docker-networks "docker-network" nil t)
(register-definition-prefixes "docker-network" '("docker-network-"))



(register-definition-prefixes "docker-process" '("docker-"))



(register-definition-prefixes "docker-utils" '("docker-"))



 (autoload 'docker-volume-dired "docker-volume" nil t)
 (autoload 'docker-volumes "docker-volume" nil t)
(register-definition-prefixes "docker-volume" '("docker-volume-"))


(provide 'docker-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/diminish-20220909.847/diminish-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'diminish "diminish" "\
Diminish mode-line display of minor mode MODE to TO-WHAT (default \"\").

Interactively, enter (with completion) the name of any minor mode, followed
on the next line by what you want it diminished to (default empty string).
The response to neither prompt should be quoted.  However, in Lisp code,
both args must be quoted, the first as a symbol, the second as a string,
as in (diminish \\='jiggle-mode \" Jgl\").

The mode-line displays of minor modes usually begin with a space, so
the modes' names appear as separate words on the mode line.  However, if
you're having problems with a cramped mode line, you may choose to use single
letters for some modes, without leading spaces.  Capitalizing them works
best; if you then diminish some mode to \"X\" but have `abbrev-mode' enabled as
well, you'll get a display like \"AbbrevX\".  This function prepends a space
to TO-WHAT if it's > 1 char long & doesn't already begin with a space.

(fn MODE &optional TO-WHAT)" t)
(autoload 'diminish-undo "diminish" "\
Restore mode-line display of diminished mode MODE to its minor-mode value.
Do nothing if the arg is a minor mode that hasn't been diminished.

Interactively, enter (with completion) the name of any diminished mode (a
mode that was formerly a minor mode on which you invoked \\[diminish]).
To restore all diminished modes to minor status, answer `diminished-modes'.
The response to the prompt shouldn't be quoted.  However, in Lisp code,
the arg must be quoted as a symbol, as in (diminish-undo \\='diminished-modes).

(fn MODE)" t)
(autoload 'diminished-modes "diminish" "\
Echo all active diminished or minor modes as if they were minor.
The display goes in the echo area; if it's too long even for that,
you can see the whole thing in the *Messages* buffer.
This doesn't change the status of any modes; it just lets you see
what diminished modes would be on the mode-line if they were still minor." t)
(register-definition-prefixes "diminish" '("diminish"))


(provide 'diminish-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/difftastic-20250219.1602/difftastic-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'difftastic-git-diff-range "difftastic" "\
Show difference between two commits using difftastic.
The meaning of REV-OR-RANGE, ARGS, and FILES is like in
`magit-diff-range', but ARGS are adjusted for difftastic with
`difftastic--transform-diff-arguments'.

(fn &optional REV-OR-RANGE ARGS FILES)" t)
(autoload 'difftastic-magit-diff "difftastic" "\
Show the result of \\='git diff ARGS -- FILES\\=' with difftastic.

(fn &optional ARGS FILES)" t)
(autoload 'difftastic-magit-show "difftastic" "\
Show the result of \\='git show REV\\=' with difftastic.
When REV couldn't be guessed or called with prefix arg ask for REV.

(fn REV)" t)
(autoload 'difftastic-buffers "difftastic" "\
Run difftastic on a pair of buffers, BUFFER-A and BUFFER-B.
Optionally, provide a LANG-OVERRIDE to override language used.
See \\='difft --list-languages\\=' for language list.

When:
- either LANG-OVERRIDE is nil and neither of BUFFER-A nor
BUFFER-B is a file buffer,
- or function is called with a prefix arg,

then ask for language before running difftastic.

(fn BUFFER-A BUFFER-B &optional LANG-OVERRIDE)" t)
(autoload 'difftastic-files "difftastic" "\
Run difftastic on a pair of files, FILE-A and FILE-B.
Optionally, provide a LANG-OVERRIDE to override language used.
See \\='difft --list-languages\\=' for language list.  When
function is called with a prefix arg then ask for language before
running difftastic.

(fn FILE-A FILE-B &optional LANG-OVERRIDE)" t)
(autoload 'difftastic-dired-diff "difftastic" "\
Compare file at point with FILE using difftastic.
The behavior is the same as `dired-diff', except for the prefix argument, which
makes the function prompt for LANG-OVERRIDE.  See \\='difft
--list-languages\\=' for language list.

(fn FILE &optional LANG-OVERRIDE)" '(dired-mode))
(autoload 'difftastic-rerun "difftastic" "\
Rerun difftastic in the current buffer.
Optionally, provide a LANG-OVERRIDE to override language used.
See \\='difft --list-languages\\=' for language list.  When
function is called with a prefix arg then ask for language before
running difftastic.

In order to determine requested width for difftastic a call to
`difftastic-rerun-requested-window-width-function' is made.  When
the latter is set to nil the call is made to
`difftastic-requested-window-width-function'.

(fn &optional LANG-OVERRIDE)" '(difftastic-mode))
(register-definition-prefixes "difftastic" '("difftastic-"))



(defvar difftastic-bindings-prefixes '((magit-diff (-1 -1) magit-diff) (magit-blame (-1) magit-blame)) "\
List of prefixes to install `difftastic' bindings.
Each entry in the list is in a from of (PREFIX LOC FEATURE),
where PREFIX is a `transient' prefix to which to install
bindings, LOC is a location within the prefix and FEATURE is a
feature (symbol) or file (string) that defines the prefix.  LOC
can be in any form accepted by `transient-get-suffix', which see.")
(custom-autoload 'difftastic-bindings-prefixes "difftastic-bindings" t)
(defvar difftastic-bindings-keymaps '((magit-blame-read-only-mode-map . magit-blame)) "\
List of keymaps to add `difftastic' bindings to.
Each entry in the list is in a form of (MAP . FEATURE), where MAP
is a keymap to set bindings to and FEATURE is a feature (symbol)
or file (string) that defines the MAP.")
(custom-autoload 'difftastic-bindings-keymaps "difftastic-bindings" t)
(defvar difftastic-bindings-alist '(("D" difftastic-magit-diff "Difftastic diff (dwim)") ("S" difftastic-magit-show "Difftastic show")) "\
Define `difftastic' bindings.
Each entry is in a form of (KEY COMMAND DESCRIPTION), where KEY
is a key that should be bound, COMMAND is a command that should
be executed when KEY has been pressed, and DESCRIPTION is a
description that should be used for suffixes that are added to
prefixes as defined in `difftastic-bindings-prefixes'.  KEY needs
to be a valid key according to `key-valid-p' and in a form
accepted by `transient-append-suffix'.")
(custom-autoload 'difftastic-bindings-alist "difftastic-bindings" t)
(defvar difftastic-bindings-mode nil "\
Non-nil if Difftastic-Bindings mode is enabled.
See the `difftastic-bindings-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `difftastic-bindings-mode'.")
(custom-autoload 'difftastic-bindings-mode "difftastic-bindings" nil)
(autoload 'difftastic-bindings-mode "difftastic-bindings" "\
Ensure key bindings to `difftastic' commands.

Use bindings specified in `difftastic-bindings' (which see) to
create a suffixes in prefixes defined in
`difftastic-bindings-prefixes' (which see) and install them into
`difftastic-bindings-keymaps' (which see).

This is a global minor mode.  If called interactively, toggle the
`Difftastic-Bindings mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='difftastic-bindings-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "difftastic-bindings" '("difftastic-bindings-"))


(provide 'difftastic-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/dape-0.22.0/dape-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(put 'dape-command 'safe-local-variable #'listp)
(autoload 'dape "dape" "\
Start a debugging session using CONFIG.
When called interactively, the command prompts for a alist KEY from
`dape-configs', followed by additional property-value pairs.  These
pairs override the properties in the plist associated with the key
in `dape-configs'.

For example, interactively invoking:
  launch :program \"bin\"
executes the `launch' configuration from `dape-configs', overriding
the `:program' option with \"bin\".

CONFIG is an keyword-value plist, see VALUEs in `dape-config' alist.
SKIP-COMPILE argument is used internally for recursive calls
and should not be specified manually.

For more information see `dape-configs'.

(fn CONFIG &optional SKIP-COMPILE)" t)
(register-definition-prefixes "dape" '("dape-"))


(provide 'dape-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/csv-mode-1.27/csv-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'csv-mode "csv-mode" "\
Major mode for editing files of comma-separated value type.

CSV mode is derived from `text-mode', and runs `text-mode-hook' before
running `csv-mode-hook'.  It turns `auto-fill-mode' off by default.
CSV mode can be customized by user options in the CSV customization
group.  The separators are specified by the value of `csv-separators'.

CSV mode commands ignore blank lines and comment lines beginning with
the value of `csv-comment-start', which delimit \"paragraphs\".
\"Sexp\" is re-interpreted to mean \"field\", so that `forward-sexp'
(\\[forward-sexp]), `kill-sexp' (\\[kill-sexp]), etc. all apply to fields.
Standard comment commands apply, such as `comment-dwim' (\\[comment-dwim]).

If `font-lock-mode' is enabled then separators, quoted values and
comment lines are highlighted using respectively `csv-separator-face',
`font-lock-string-face' and `font-lock-comment-face'.

The user interface (UI) for CSV mode commands is similar to that of
the standard commands `sort-fields' and `sort-numeric-fields', except
that if there is no prefix argument then the UI prompts for the field
index or indices.  In `transient-mark-mode' only: if the region is not
set then the UI attempts to set it to include all consecutive CSV
records around point, and prompts for confirmation; if there is no
prefix argument then the UI prompts for it, offering as a default the
index of the field containing point if the region was not set
explicitly.  The region set automatically is delimited by blank lines
and comment lines, and the number of header lines at the beginning of
the region given by the value of `csv-header-lines' are skipped.

Sort order is controlled by `csv-descending'.

CSV mode provides the following specific keyboard key bindings:

\\{csv-mode-map}

(fn)" t)
(add-to-list 'auto-mode-alist '("\\.[Cc][Ss][Vv]\\'" . csv-mode))
(add-to-list 'auto-mode-alist '("\\.tsv\\'" . tsv-mode))
(autoload 'tsv-mode "csv-mode" "\
Major mode for editing files of tab-separated value type.

(fn)" t)
(register-definition-prefixes "csv-mode" '("csv-" "tsv-"))



(register-definition-prefixes "csv-mode-tests" '("csv-tests--"))


(provide 'csv-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/crux-20250212.2017/crux-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'crux-open-with "crux" "\
Open visited file in default external program.
When in dired mode, open file under the cursor.

With a prefix ARG always prompt for command to use.

(fn ARG)" t)
(autoload 'crux-visit-term-buffer "crux" "\
Create or visit a terminal buffer.
If the process in that buffer died, ask to restart." t)
(autoload 'crux-visit-shell-buffer "crux" "\
Create or visit a shell buffer.
If the process in that buffer died, ask to restart." t)
(autoload 'crux-indent-rigidly-and-copy-to-clipboard "crux" "\
Indent region between BEGIN and END by ARG columns and copy to clipboard.

(fn BEGIN END ARG)" t)
(autoload 'crux-smart-open-line-above "crux" "\
Insert an empty line above the current line.
Position the cursor at its beginning, according to the current mode." t)
(autoload 'crux-smart-open-line "crux" "\
Insert an empty line after the current line.
Position the cursor at its beginning, according to the current mode.

With a prefix ARG open line above the current line.

(fn ARG)" t)
(autoload 'crux-smart-kill-line "crux" "\
Kill to the end of the line and kill whole line on the next call." t)
(autoload 'crux-top-join-line "crux" "\
Join the current line with the line beneath it." t)
(autoload 'crux-kill-whole-line "crux" "\
A simple wrapper around command `kill-whole-line' that respects indentation.
Passes ARG to command `kill-whole-line' when provided.

(fn &optional ARG)" t)
(autoload 'crux-kill-line-backwards "crux" "\
Kill line backwards and adjust the indentation." t)
(autoload 'crux-kill-and-join-forward "crux" "\
If at end of line, join with following; otherwise kill line.
Passes ARG to command `kill-line' when provided.
Deletes whitespace at join.

(fn &optional ARG)" t)
(autoload 'crux-move-to-mode-line-start "crux" "\
Move to the beginning, skipping mode specific line start regex." t)
(autoload 'crux-move-beginning-of-line "crux" "\
Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there.

(fn ARG)" t)
(autoload 'crux-indent-defun "crux" "\
Indent the current defun." t)
(autoload 'crux-duplicate-current-line-or-region "crux" "\
Duplicates the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated.

(fn ARG)" t)
(autoload 'crux-duplicate-and-comment-current-line-or-region "crux" "\
Duplicates and comments the current line or region ARG times.
If there's no region, the current line will be duplicated.  However, if
there's a region, all lines that region covers will be duplicated.

(fn ARG)" t)
(autoload 'crux-rename-file-and-buffer "crux" "\
Rename current buffer and if the buffer is visiting a file, rename it too." t)
(autoload 'crux-delete-file-and-buffer "crux" "\
Kill the current buffer and deletes the file it is visiting." t)
(autoload 'crux-copy-file-preserve-attributes "crux" "\
Copy the current file-visiting buffer's file to a destination.

This function prompts for the new file's location and copies it
similar to cp -p. If the new location is a directory, and the
directory does not exist, this function confirms with the user
whether it should be created. A directory must end in a slash
like `copy-file' expects. If the destination is a directory and
already has a file named as the origin file, offers to
overwrite.

If the current buffer is not a file-visiting file or the
destination is a non-existent directory but the user has elected
to not created it, nothing will be done.

When invoke with C-u, the newly created file will be visited.

(fn VISIT)" t)
(autoload 'crux-view-url "crux" "\
Open a new buffer containing the contents of URL." t)
(autoload 'crux-cleanup-buffer-or-region "crux" "\
Cleanup a region if selected, otherwise the whole buffer." t)
(autoload 'crux-eval-and-replace "crux" "\
Replace the preceding sexp with its value." t)
(autoload 'crux-recompile-init "crux" "\
Byte-compile all your dotfiles again." t)
(autoload 'crux-sudo-edit "crux" "\
Edit currently visited file as root.

With a prefix ARG prompt for a file to visit.
Will also prompt for a file to visit if current
buffer is not visiting a file.

(fn &optional ARG)" t)
(autoload 'crux-reopen-as-root "crux" "\
Find file as root if necessary.

Meant to be used as `find-file-hook'.
See also `crux-reopen-as-root-mode'.")
(defvar crux-reopen-as-root-mode nil "\
Non-nil if Crux-Reopen-As-Root mode is enabled.
See the `crux-reopen-as-root-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `crux-reopen-as-root-mode'.")
(custom-autoload 'crux-reopen-as-root-mode "crux" nil)
(autoload 'crux-reopen-as-root-mode "crux" "\
Automatically reopen files as root if we can't write to them

as the current user.

This is a global minor mode.  If called interactively, toggle the
`Crux-Reopen-As-Root mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='crux-reopen-as-root-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'crux-insert-date "crux" "\
Insert a timestamp according to locale's date and time format." t)
(autoload 'crux-recentf-find-file "crux" "\
Find a recent file using `completing-read'.
When optional argument FILTER is a function, it is used to
transform recent files before completion.

(fn &optional FILTER)" t)
(autoload 'crux-recentf-find-directory "crux" "\
Find a recent directory using `completing-read'." t)
(autoload 'crux-transpose-windows "crux" "\
Transpose the buffers shown in two windows.
Prefix ARG determines if the current windows buffer is swapped
with the next or previous window, and the number of
transpositions to execute in sequence.

(fn ARG)" t)
(autoload 'crux-switch-to-previous-buffer "crux" "\
Switch to previously open buffer.
Repeated invocations toggle between the two most recently open buffers." t)
(autoload 'crux-other-window-or-switch-buffer "crux" "\
Call `other-window' if more than one window is visible.
Switch to most recent buffer otherwise." t)
(autoload 'crux-kill-other-buffers "crux" "\
Kill all buffers but the current one.
Doesn't mess with special buffers." t)
(autoload 'crux-kill-buffer-truename "crux" "\
Kill absolute path of file visited in current buffer." t)
(autoload 'crux-create-scratch-buffer "crux" "\
Create a new scratch buffer." t)
(autoload 'crux-find-user-init-file "crux" "\
Edit the `user-init-file', in another window." t)
(autoload 'crux-find-user-custom-file "crux" "\
Edit the `custom-file', in another window." t)
(autoload 'crux-find-shell-init-file "crux" "\
Edit the shell init file in another window." t)
(autoload 'crux-find-current-directory-dir-locals-file "crux" "\
Edit the `.dir-locals.el' file for the current buffer in another window.
If prefix arg FIND-2 is set then edit the `.dir-locals-2.el' file instead
of `.dir-locals.el'.

Scans parent directories if the file does not exist in
the default directory of the current buffer.  If not found, create a new,
empty buffer in the current buffer's default directory, or if there is no
such directory, in the user's home directory.

(fn FIND-2)" t)
(autoload 'crux-upcase-region "crux" "\
`upcase-region' when `transient-mark-mode' is on and region is active.

(fn BEG END)" t)
(autoload 'crux-downcase-region "crux" "\
`downcase-region' when `transient-mark-mode' is on and region is active.

(fn BEG END)" t)
(autoload 'crux-capitalize-region "crux" "\
`capitalize-region' when `transient-mark-mode' is on and region is active.

(fn BEG END)" t)
(autoload 'crux-ispell-word-then-abbrev "crux" "\
Call `ispell-word', then create an abbrev for it.
With prefix P, create local abbrev.  Otherwise it will
be global.
If there's nothing wrong with the word at point, keep
looking for a typo until the beginning of buffer.  You can
skip typos you don't want to fix with `SPC', and you can
abort completely with `C-g'.

(fn P)" t)
(register-definition-prefixes "crux" '("crux-"))


(provide 'crux-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/corfu-20250128.821/corfu-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'corfu-mode "corfu" "\
COmpletion in Region FUnction.

This is a minor mode.  If called interactively, toggle the `Corfu mode'
mode.  If the prefix argument is positive, enable the mode, and if it is
zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `corfu-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{corfu-mode-map}

(fn &optional ARG)" t)
(put 'global-corfu-mode 'globalized-minor-mode t)
(defvar global-corfu-mode nil "\
Non-nil if Global Corfu mode is enabled.
See the `global-corfu-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-corfu-mode'.")
(custom-autoload 'global-corfu-mode "corfu" nil)
(autoload 'global-corfu-mode "corfu" "\
Toggle Corfu mode in all buffers.
With prefix ARG, enable Global Corfu mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Corfu mode is enabled in all buffers where `corfu--on' would do it.

See `corfu-mode' for more information on Corfu mode.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu" '("corfu-" "global-corfu-m"))



(defvar corfu-echo-mode nil "\
Non-nil if Corfu-Echo mode is enabled.
See the `corfu-echo-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-echo-mode "corfu-echo" nil)
(autoload 'corfu-echo-mode "corfu-echo" "\
Show candidate documentation in echo area.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Echo mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-echo-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-echo" '("corfu-echo-"))



(defvar corfu-history-mode nil "\
Non-nil if Corfu-History mode is enabled.
See the `corfu-history-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `corfu-history-mode'.")
(custom-autoload 'corfu-history-mode "corfu-history" nil)
(autoload 'corfu-history-mode "corfu-history" "\
Update Corfu history and sort completions by history.

This is a global minor mode.  If called interactively, toggle the
`Corfu-History mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-history-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-history" '("corfu-history"))



(defvar corfu-indexed-mode nil "\
Non-nil if Corfu-Indexed mode is enabled.
See the `corfu-indexed-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-indexed-mode "corfu-indexed" nil)
(autoload 'corfu-indexed-mode "corfu-indexed" "\
Prefix candidates with indices.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Indexed mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-indexed-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-indexed" '("corfu-indexed-"))



(autoload 'corfu-info-documentation "corfu-info" "\
Show documentation of current candidate.
If called with a prefix ARG, the buffer is persistent.

(fn &optional ARG)" t)
(autoload 'corfu-info-location "corfu-info" "\
Show location of current candidate.
If called with a prefix ARG, the buffer is persistent.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-info" '("corfu-info--"))



(defvar corfu-popupinfo-mode nil "\
Non-nil if Corfu-Popupinfo mode is enabled.
See the `corfu-popupinfo-mode' command
for a description of this minor mode.")
(custom-autoload 'corfu-popupinfo-mode "corfu-popupinfo" nil)
(autoload 'corfu-popupinfo-mode "corfu-popupinfo" "\
Corfu info popup minor mode.

This is a global minor mode.  If called interactively, toggle the
`Corfu-Popupinfo mode' mode.  If the prefix argument is positive, enable
the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='corfu-popupinfo-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "corfu-popupinfo" '("corfu-popupinfo-"))



(autoload 'corfu-quick-jump "corfu-quick" "\
Jump to candidate using quick keys." t)
(autoload 'corfu-quick-insert "corfu-quick" "\
Insert candidate using quick keys." t)
(autoload 'corfu-quick-complete "corfu-quick" "\
Complete candidate using quick keys." t)
(register-definition-prefixes "corfu-quick" '("corfu-quick"))


(provide 'corfu-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-yasnippet-20240314.1838/consult-yasnippet-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-yasnippet-visit-snippet-file "consult-yasnippet" "\
Visit the snippet file associated with TEMPLATE.
When called interactively this command previews snippet completions in
the current buffer, and then opens the selected snippets template file
using `yas--visit-snippet-file-1'.

(fn TEMPLATE)" t)
(autoload 'consult-yasnippet "consult-yasnippet" "\
Interactively select and expand a yasnippet template.
This command presents a completing read interface containing all currently
available snippet expansions, with live previews for each snippet. Once
selected a chosen snippet will be expanded at point using
`yas-expand-snippet'.

With ARG select snippets from all snippet tables, not just the current one.

(fn ARG)" t)
(register-definition-prefixes "consult-yasnippet" '("consult-yasnippet-"))


(provide 'consult-yasnippet-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-xref-stack/consult-xref-stack-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-xref-stack-backward "consult-xref-stack" "\
Jump to a marker in the Xref backward history stack.

The command supports preview of the currently selected position." t)
(autoload 'consult-xref-stack-forward "consult-xref-stack" "\
Jump to a marker in the Xref forward history stack.

The command supports preview of the currently selected position." t)
(register-definition-prefixes "consult-xref-stack" '("consult-xref-stack--"))


(provide 'consult-xref-stack-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-todo-20250201.1342/consult-todo-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-todo "consult-todo" "\
Jump to hl-todo keywords in BUFFERS.
If BUFFERS is nil, use current buffer instead.

(fn &optional BUFFERS)" t)
(autoload 'consult-todo-all "consult-todo" "\
Jump to hl-todo keywords in all `hl-todo-mode' enabled buffers." t)
(autoload 'consult-todo-clear-cache "consult-todo" "\
Clear cache stored in `consult-todo--cache'.
If arg ALL is non-nil, clear all cache.

(fn &optional ALL)" t)
(autoload 'consult-todo-dir "consult-todo" "\
Jump to hl-todo keywords in files located in DIRECTORY.
If optional arg DIRECTORY is nil, rgrep in default directory. With
\\[universal-argument] enable, select DIRECTORY instead.

(fn &optional DIRECTORY)" t)
(autoload 'consult-todo-project "consult-todo" "\
Jump to hl-todo keywords in current project." t)
(register-definition-prefixes "consult-todo" '("consult-todo-"))


(provide 'consult-todo-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-project-extra-20231221.1857/consult-project-extra-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-project-extra-find "consult-project-extra" "\
Create an endpoint for accessing different project sources.
The consult view can be narrowed to: (b) current project's buffers,(f) current
project's files and (p) to select from the list of known projects.

The buffer and project file sources are only enabled in case that the user is
in a project file/buffer.  See `project-current'.

A different action is issued depending on the source.  For both buffers and
project files, the default action is to visit the selected element.  When a
known project is selected, a list to select from is created with the selected
project's files" t)
(autoload 'consult-project-extra-find-other-window "consult-project-extra" "\
Variant of `consult-project-extra' which opens in a second window." t)
(register-definition-prefixes "consult-project-extra" '("consult-project-extra-"))


(provide 'consult-project-extra-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-org-roam-20240217.1442/consult-org-roam-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-org-roam-search "consult-org-roam" "\
Search org-roam directory using `consult-org-roam-grep-func' with live-preview.
With an option for INITIAL input when called non-interactively.
The function is restricted to files with .org-suffix.

(fn &optional INITIAL)" t)
(autoload 'consult-org-roam-backlinks "consult-org-roam" "\
Select from list of all notes that link to the current note.
If OTHER-WINDOW, visit the NODE in another window.

(fn &optional OTHER-WINDOW)" t)
(autoload 'consult-org-roam-backlinks-recursive "consult-org-roam" "\
Select from list of all notes that link to the current note (recursively).
Compared to `consult-org-roam-backlinks' (the nonrecursive variant) this also
considers headline nodes without explicit links to their ancestor headline
and/or file nodes.
If OTHER-WINDOW, visit the NODE in another window.

(fn &optional OTHER-WINDOW)" t)
(autoload 'consult-org-roam-forward-links "consult-org-roam" "\
Select a forward link contained in the current buffer.
If OTHER-WINDOW, visit the NODE in another window.

(fn &optional OTHER-WINDOW)" t)
(autoload 'consult-org-roam-file-find "consult-org-roam" "\
Find org-roam node with preview, if ARG open in other window.

(fn ARG)" t)
(defvar consult-org-roam-mode nil "\
Non-nil if Consult-Org-Roam mode is enabled.
See the `consult-org-roam-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `consult-org-roam-mode'.")
(custom-autoload 'consult-org-roam-mode "consult-org-roam" nil)
(autoload 'consult-org-roam-mode "consult-org-roam" "\
Toggle `consult-org-roam-mode' to integrate consult with org-roam.
By enabling `consult-org-roam-mode' the functions `org-roam-node-read' and
`org-roam-ref-read' are overriden by consults-org-roam's equivalents. Optional
argument ARG indicates whether the mode should be enabled or disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "consult-org-roam" '("consult-org-roam-"))



(register-definition-prefixes "consult-org-roam-buffer" '("consult-org-roam-" "org-roam-buffer-source"))


(provide 'consult-org-roam-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-ghq-20231111.1303/consult-ghq-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-ghq-find "consult-ghq" "\
Find file from selected repo using ghq." t)
(autoload 'consult-ghq-grep "consult-ghq" "\
Grep from selected repo using ghq." t)
(autoload 'consult-ghq-switch-project "consult-ghq" "\
Switch project from ghq." t)
(register-definition-prefixes "consult-ghq" '("consult-ghq-"))


(provide 'consult-ghq-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-gh-20250214.2256/consult-gh-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-gh-with-host "consult-gh" "\
Run BODY after setting environment var “GH_HOST” to HOST.

(fn HOST &rest BODY)" nil t)
(autoload 'consult-gh-repo-view-mode "consult-gh" "\
Minor-mode for viewing GitHub repositories.

This is a minor mode.  If called interactively, toggle the
`consult-gh-repo-view mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `consult-gh-repo-view-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{consult-gh-repo-view-mode-map}

(fn &optional ARG)" t)
(autoload 'consult-gh-issue-view-mode "consult-gh" "\
Minor-mode for viewing GitHub issues.

This is a minor mode.  If called interactively, toggle the
`consult-gh-issue-view mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `consult-gh-issue-view-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{consult-gh-issue-view-mode-map}

(fn &optional ARG)" t)
(autoload 'consult-gh-pr-view-mode "consult-gh" "\
Minor-mode for viewing GitHub pull request.

This is a minor mode.  If called interactively, toggle the
`consult-gh-pr-view mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `consult-gh-pr-view-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{consult-gh-pr-view-mode-map}

(fn &optional ARG)" t)
(autoload 'consult-gh-topics-edit-mode "consult-gh" "\
Minor-mode for editable consult-gh topics.

This is a minor mode.  If called interactively, toggle the
`consult-gh-topics-edit mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `consult-gh-topics-edit-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

\\{consult-gh-topics-edit-mode-map}

(fn &optional ARG)" t)
(autoload 'consult-gh-topics-edit-capf-mode "consult-gh" "\
Minor-mode for completion at point in `consult-gh-topics-edit-comment-mode'.

Helps with autocompleting usernames, issue numbers, etc.

This is a minor mode.  If called interactively, toggle the
`consult-gh-topics-edit-capf mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `consult-gh-topics-edit-capf-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'consult-gh-auth-switch "consult-gh" "\
Switch between authenticated accounts.

If the optional arguments, HOST and USER are non-nil, use them for
authenticaiton otherwise query the user to select an account.
If PROMPT is non-nil, use it as the query prompt.

(fn &optional HOST USER PROMPT)" t)
(autoload 'consult-gh-repo-list "consult-gh" "\
Interactive command to list repos of users/organizations asynchronously.

This is an interactive wrapper function around `consult-gh--async-repo-list'.
It queries the user to enter the name of a GitHub organization/username
in the minibuffer, then fetches a list of repositories for the entered
username and present them as a minibuffer completion table for selection.
The list of candidates in the completion table are dynamically updated
as the user changes the entry.

Upon selection of a candidate:
 - if NOACTION is non-nil  candidate is returned
 - if NOACTION is nil      candidate is passed to `consult-gh-repo-action'.

Additional command line arguments can be passed in the minibuffer entry
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
armindarvish -- -L 100
the async process will run the command “gh repo list armindarvish -L 100”,
which sets the limit for the maximum number of results to 100.

User selection is tracked in `consult-gh--known-orgs-list' for quick access
in the future (added to future history list) in future calls.

INITIAL is an optional arg for the initial input in the minibuffer.
(passed as INITITAL to `consult-gh--async-repo-list').

When PROMPT is non-nil, use it as the query prompt.

MIN-INPUT is passed to `consult-gh--async-repo-list'.

For more details on consult--async functionalities,
see `consult-grep' and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-search-repos "consult-gh" "\
Interactively search GitHub repositories.

This is an interactive wrapper function around
`consult-gh--async-search-repos'.  It queries the user to enter the name of
a GitHub organization/username in the minibuffer, then fetches a list
of repositories for the entered username.  The list of candidates in the
completion table are dynamically updated as the user changes the input.

Upon selection of a candidate either
 - if NOACTION is non-nil  candidate is returned
 - if NOACTION is nil      candidate is passed to `consult-gh-repo-action'

Additional commandline arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
consult-gh -- -L 100
and the async process will run “gh search repos -L 100”,
which sets the limit for the maximum number of results to 100.

User selection is tracked in `consult-gh--known-orgs-list' for quick access
in the future (added to future history list) in future calls.

INITIAL is an optional arg for the initial input in the minibuffer.
(passed as INITITAL to `consult-gh--async-repo-list').

When PROMPT is non-nil, use it as the query prompt.

For more details on consult--async functionalities,
see `consult-grep' and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-user-repos "consult-gh" "\
List all repos for USER.

This includes repos of orgs of USER.  It uses
`consult-gh--get-current-user-orgs' to get all
orgs of USER.

If NOACTION is non-nil, return the candidate without running action.

(fn &optional USER NOACTION)" t)
(autoload 'consult-gh-favorite-repos "consult-gh" "\
List repositories of orgs in `consult-gh-favorite-orgs-list'.

Passes `consult-gh-favorite-orgs-list' to `consult-gh-orgs',
a useful command for quickly fetching a list of personal GitHub Repositories
or any other favorite accounts whose repositories are frequently visited." t)
(autoload 'consult-gh-repo-fork "consult-gh" "\
Interactively fork REPOS.

It runs the command “gh fork repo ...” to fork a repository
using the internal function `consult-gh--repo-fork'

If REPOS not supplied, interactively asks user to pick REPOS.

(fn &optional REPOS)" t)
(autoload 'consult-gh-repo-clone "consult-gh" "\
Interactively clone REPOS to TARGETDIR.

It runs the command “gh clone repo ...” to fork a repository
using the internal function `consult-gh--repo-clone'.

If REPOS or TARGETDIR are not supplied, interactively asks user
to pick them.

(fn &optional REPOS TARGETDIR)" t)
(autoload 'consult-gh-repo-delete "consult-gh" "\
Interactively delete REPOS.

It runs the command “gh repo delete ...” to delete a repository
using the internal function `consult-gh--repo-delete'.

If REPOS are not supplied, interactively asks user to pick them from `consult-gh-user-repos'.

When NOCONFIRM is non-nil, do not ask for confirmation

(fn &optional REPO NOCONFIRM)" t)
(autoload 'consult-gh-issue-list "consult-gh" "\
Interactively list issues of a GitHub repository.

This is an interactive wrapper function around `consult-gh--async-issue-list'.
With prefix ARG, first search for a repo using `consult-gh-search-repos',
then list issues of that selected repo with `consult-gh--async-issue-list'.

It queries the user to enter the full name of a GitHub repository in the
minibuffer (expected format is “OWNER/REPO”), then fetches the list of
issues of that repository and present them as a minibuffer completion
table for selection.  The list of candidates in the completion table are
dynamically updated as the user changes the minibuffer input.

Upon selection of a candidate either
 - if NOACTION is non-nil candidate is returned.
 - if NOACTION is nil     candidate is passed to `consult-gh-issue-action'.

Additional command line arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
armindarvish/consult-gh -- -L 100
and the async process will run
“gh issue list --repo armindarvish/consult-gh -L 100”, which sets the limit
for the maximum number of results to 100.

User selection is tracked in `consult-gh--known-repos-list' for quick
access in the future (added to future history list) in future calls.

INITIAL is an optional arg for the initial input in the minibuffer.
(passed as INITITAL to `consult-gh--async-issue-list').

If PROMPT is non-nil, use it as the query prompt.

MIN-INPUT is passed to `consult-gh--async-issue-list'

For more details on consult--async functionalities, see `consult-grep'
and the official manual of consult, here:
URL `https://github.com/minad/consult'

(fn &optional INITIAL NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-issue-create "consult-gh" "\
Create a new issue with TITLE and BODY for REPO.

This mimicks the same interactive issue creation from “gh issue create” in
the terminal.
For more details refer to the manual with “gh issue create --help”.

(fn &optional REPO TITLE BODY)" t)
(autoload 'consult-gh-issue-edit "consult-gh" "\
Edit the ISSUE.

ISSUE must be a propertized text describing an issue similar to one
returned by `consult-gh-issue-list'.

This mimicks the same interactive issue creation from “gh issue edit” in
the terminal.
For more details refer to the manual with “gh issue edit --help”.

(fn &optional ISSUE)" t)
(autoload 'consult-gh-issue-close "consult-gh" "\
Close the ISSUE with an optional REASON and/or COMMENT.

This mimicks the same function as running “gh issue close” in the terminal.
For more details refer to the manual with “gh issue close --help”.

(fn &optional ISSUE REASON COMMENT)" t)
(autoload 'consult-gh-issue-reopen "consult-gh" "\
Reopen the ISSUE with an optional COMMENT.

This mimicks the same function as running “gh issue reopen” in the terminal.
For more details refer to the manual with “gh issue reopen --help”.

(fn &optional ISSUE COMMENT)" t)
(autoload 'consult-gh-issue-pin "consult-gh" "\
Pin the ISSUE.

This mimicks the same function as running “gh issue pin” in the terminal.
For more details refer to the manual with “gh issue pin --help”.

(fn &optional ISSUE)" t)
(autoload 'consult-gh-issue-unpin "consult-gh" "\
Unpin the ISSUE.

This mimicks the same function as running “gh issue unpin” in the terminal.
For more details refer to the manual with “gh issue unpin --help”.

(fn &optional ISSUE)" t)
(autoload 'consult-gh-issue-lock "consult-gh" "\
Lock the ISSUE with and optional REASON.

This mimicks the same function as running “gh issue lock” in the terminal.
For more details refer to the manual with “gh issue lock --help”.

(fn &optional ISSUE REASON)" t)
(autoload 'consult-gh-issue-unlock "consult-gh" "\
Unlock the ISSUE.

This mimicks the same function as running “gh issue unlock” in the terminal.
For more details refer to the manual with “gh issue unlock --help”.

(fn &optional ISSUE)" t)
(autoload 'consult-gh-issue-transfer "consult-gh" "\
Transfer the ISSUE to TARGET-REPO.

This mimicks the same function as running “gh issue transfer” in the terminal.
For more details refer to the manual with “gh issue transfer --help”.

(fn &optional ISSUE TARGET-REPO)" t)
(autoload 'consult-gh-issue-delete "consult-gh" "\
Delete the ISSUE.

When the optional argument, NO-CONFIRM, is non-nil, do not ask for
confirmation.
This mimicks the same function as running “gh issue delete” in the terminal.
For more details refer to the manual with “gh issue delete --help”.

(fn &optional ISSUE NO-CONFIRM)" t)
(autoload 'consult-gh-issue-develop "consult-gh" "\
Manage linked branches for an ISSUE.

The optional argument BASE is a base branch to develop off of.
The optional argument BRANCH-REPO is the repo's full name where a branch
should be created (if not in the same repo).

This mimicks the same function as running “gh issue develop” in the terminal.
For more details refer to the manual with “gh issue develop --help”.

(fn &optional ISSUE BASE BRANCH-REPO)" t)
(autoload 'consult-gh-search-issues "consult-gh" "\
Interactively search GitHub issues of REPO.

This is an interactive wrapper function around
`consult-gh--async-search-issues'.  With prefix ARG, first search for a
repo using `consult-gh-search-repos', then search issues of only that
selected repo.

It queries the user for a search term in the minibuffer, then fetches the
list of possible GitHub issue for the entered query and presents them as a
minibuffer completion table for selection.  The list of candidates in the
completion table are dynamically updated as the user changes the entry.

Upon selection of a candidate either
 - if NOACTION is non-nil  candidate is returned
 - if NOACTION is nil      candidate is passed to `consult-gh-issue-action'

Additional command line arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
consult-gh -- -L 100
and the async process will run “gh search issues consult-gh -L 100”,
which sets the limit for the maximum number of results to 100.

INITIAL is an optional arg for the initial input in the minibuffer
(passed as INITITAL to `consult-gh--async-repo-list').

If PROMPT is non-nil, use it as the query prompt.

MIN-INPUT is passed to `consult-gh--async-search-issues'.

For more details on consult--async functionalities, see `consult-grep'
and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL REPO NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-pr-list "consult-gh" "\
Interactively list pull requests of a GitHub repository.

This is an interactive wrapper function around `consult-gh--async-pr-list'.
With prefix ARG, first search for a repo using `consult-gh-search-repos',
then list prs of that selected repo with `consult-gh--async-pr-list'.

It queries the user to enter the full name of a GitHub repository in
the minibuffer (expected format is “OWNER/REPO”), then fetches the list
of pull requests for that repository and presents them as a minibuffer
completion table for selection.  The list of candidates in the completion
table are dynamically updated as the user changes the entry.

Upon selection of a candidate either
 - if NOACTION is non-nil candidate is returned
 - if NOACTION is nil     candidate is passed to `consult-gh-pr-action'

Additional command line arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
armindarvish/consult-gh -- -L 100
and the async process will run
“gh pr list --repo armindarvish/consult-gh -L 100”,
which sets the limit for the maximum number of results to 100.

User selection is tracked in `consult-gh--known-repos-list' for quick access
in the future (added to future history list) in future calls.

INITIAL is an optional arg for the initial input in the minibuffer
(passed as INITITAL to `consult-gh--async-issue-list').

If PROMPT is non-nil, use it as the query prompt.

For more details on consult--async functionalities, see `consult-grep'
and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-pr-edit "consult-gh" "\
Edit the PR.

This mimicks the same function as running “gh pr edit” in the terminal.
For more details refer to the manual with “gh pr edit --help”.

(fn &optional PR)" t)
(autoload 'consult-gh-pr-merge "consult-gh" "\
Merge the PR.

This mimicks the same function as running “gh pr merge” in the terminal.
For more details refer to the manual with “gh pr merge --help”.

PR is a propertized string describing a pull request.  For example, PR can
be the text stored in the buffer-local variable `consult-gh--topic' in a
buffer created by `consult-gh--pr-view'.

(fn &optional PR)" t)
(autoload 'consult-gh-pr-review "consult-gh" "\
Interactively create a new review on pull request, PR.

PR is a string with properties that identify a github pull requests.
For an example, see the buffer-local variable `consult-gh--topic' in the
buffer generated by `consult-gh-pr-create'.
PR defaults to `consult-gh--topic' and if that is nil also, the user is
asked to chose it interactively.

(fn &optional PR)" '(consult-gh-pr-view-mode))
(autoload 'consult-gh-pr-close "consult-gh" "\
Close the PR with an optional COMMENT.

If the optional argument DELETE-BRANCH is non-nil, deletes
the local and remote branch after close.

This mimicks the same function as running “gh pr close” in the terminal.
For more details refer to the manual with “gh pr close --help”.

(fn &optional PR COMMENT DELETE-BRANCH)" t)
(autoload 'consult-gh-pr-reopen "consult-gh" "\
Reopen the PR with an optional COMMENT.

This mimicks the same function as running “gh pr reopen” in the terminal.
For more details refer to the manual with “gh pr reopen --help”.

(fn &optional PR COMMENT)" t)
(autoload 'consult-gh-pr-lock "consult-gh" "\
Lock the PR with and optional REASON.

This mimicks the same function as running “gh pr lock” in the terminal.
For more details refer to the manual with “gh pr lock --help”.

(fn &optional PR REASON)" t)
(autoload 'consult-gh-pr-unlock "consult-gh" "\
Unlock the PR.

This mimicks the same function as running “gh pr unlock” in the terminal.
For more details refer to the manual with “gh pr unlock --help”.

(fn &optional PR)" t)
(autoload 'consult-gh-pr-mark-ready "consult-gh" "\
Mark the PR as ready for review.

This mimicks the same function as running “gh pr ready” in the terminal.
For more details refer to the manual with “gh pr ready --help”.

(fn &optional PR)" t)
(autoload 'consult-gh-pr-mark-draft "consult-gh" "\
Mark the PR as draft.

This mimicks the same function as running “gh pr ready” with the switch
“--undo” in the terminal.  For more details refer to the manual with
“gh pr ready --help”.

(fn &optional PR)" t)
(autoload 'consult-gh-search-prs "consult-gh" "\
Interactively search GitHub pull requests of REPO.

This is an interactive wrapper function around
`consult-gh--async-search-prs'.  With prefix ARG, first search for a repo
using `consult-gh-search-repos', then search prs of only that selected repo.

It queries the user for a search term in the minibuffer, then fetches
the list of possible GitHub pr candidates for the entered query
and presents them as a minibuffer completion table for selection.
The list of candidates in the completion table are dynamically updated as
the user changes the input.

Upon selection of a candidate either
 - if NOACTION is non-nil candidate is returned
 - if NOACTION is nil     candidate is passed to `consult-gh-pr-action'

Additional command line arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
consult-gh -- -L 100
and the async process will run “gh search prs consult-gh -L 100”,
which sets the limit for the maximum number of results to 100.

INITIAL is an optional arg for the initial input in the minibuffer
(passed as INITITAL to `consult-gh--async-repo-list').

If PROMPT is non-nil, use it as the query prompt.

MIN-INPUT is passed to `consult-gh--async-search-prs'

For more details on consult--async functionalities, see `consult-grep'
and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL REPO NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-search-code "consult-gh" "\
Interactively search GitHub codes.

This is an interactive wrapper function around
`consult-gh--async-search-code'.  With prefix ARG, first search for a repo
using `consult-gh-search-repos', then search for code only on that
selected repo.

If REPO is non-nil search for code in REPO.

It queries the user for a search term in the minibuffer, then fetches
the list of possible GitHub code candidates for the entered query and
presents them as a minibuffer completion table for selection.
The list of candidates in the completion table are dynamically updated
as the user changes the input.

Upon selection of a candidate either
 - if NOACTION is non-nil candidate is returned
 - if NOACTION is nil     candidate is passed to `consult-gh-pr-action'

Additional command line arguments can be passed in the minibuffer input
by typing `--` followed by command line arguments.
For example the user can enter the following in the minibuffer:
react -- -L 100
and the async process will run “gh search code react -L 100”,
which sets the limit for the maximum number of results to 100.

INITIAL is an optional arg for the initial input in the minibuffer
(passed as INITITAL to `consult-gh--async-search-code').

If PROMPT is non-nil, use it as the query prompt.

For more details on consult--async functionalities, see `consult-grep'
and the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL REPO NOACTION PROMPT MIN-INPUT)" t)
(autoload 'consult-gh-find-file "consult-gh" "\
Interactively find files of a REPO in BRANCH.

Queries the user for name of a REPO, expected format is “OWNER/REPO”
(e.g. armindarvish/consult-gh), then fetches all the branches on
that repo and asks the user to select one BRANCH.  Then presents the
file contents of the REPO and BRANCH for selection.

Upon selection of a candidate either
 - if NOACTION is non-nil candidate is returned
 - if NOACTION is nil     candidate is passed to `consult-gh-file-action'

INITIAL is an optional arg for the initial input in the minibuffer
(passed as INITITAL to `consult-read').

(fn &optional REPO BRANCH INITIAL NOACTION PROMPT)" t)
(autoload 'consult-gh-notifications "consult-gh" "\
Search GitHub for User's work on GitHub.

This is an interactive wrapper function around
`consult-gh--dashboard'.

Upon selection of a candidate either
 - if NOACTION is non-nil  candidate is returned
 - if NOACTION is nil      candidate is passed to `consult-gh-issue-action'

INITIAL is an optional arg for the initial input in the minibuffer.

If PROMPT is non-nil, use it as the query prompt.

(fn &optional INITIAL NOACTION PROMPT)" t)
(autoload 'consult-gh-dashboard "consult-gh" "\
Search GitHub for current user's work.

This is an interactive wrapper function around `consult-gh--dashboard'.

Upon selection of a candidate either
 - if NOACTION is non-nil  candidate is returned
 - if NOACTION is nil      candidate is passed to
                           `consult-gh-dashboard-action'

INITIAL is an optional arg for the initial input in the minibuffer.

If PROMPT is non-nil, use it as the query prompt.

This command runs `consult--multi' with sources listed in
`consult-gh-dashboard-items-sources' to find all the relevant (e.g.
assigned, authored, mentions, involves, ...) issues and
pull requests to the current user (i.e.
`consult-gh--get-current-username').  `consult-gh-dashboard-items-sources'
can be customized to add more sources (i.e. define other searches as
relevant).

Furthermore, additional commandline arguments can be passed in the
minibuffer input by typing “--” followed by command line arguments.
For example the user can enter the following in the minibuffer:

consult-gh -- -L 5

and the async process for each source in
`consult-gh-dashboard-items-sources' will take the extra argument (e.g.
will run “gh search issues --author @me consult-gh -L 5”), which searches
the issues for the term “consult-gh” and sets the limit for the maximum
number of results to 5.

For more details on consult--async functionalities, see `consult-grep' and
the official manual of consult, here:
URL `https://github.com/minad/consult'.

(fn &optional INITIAL NOACTION PROMPT)" t)
(autoload 'consult-gh-topics-comment-create "consult-gh" "\
Interactively create a new comment on TOPIC.

TOPIC is a string with properties that identify a topic to comment on.
For and example, see the buffer-local variable `consult-gh--topic' in the
buffer generated by `consult-gh--pr-view' or `consult-gh--issue-view'.
TOPIC defaults to `consult-gh--topic', and if that is also nil,
then the user is asked to chose the TOPIC interactively.

(fn &optional TOPIC)" t)
(autoload 'consult-gh-topics-cancel "consult-gh" "\
Cancel the current topic or comment." '(consult-gh-topics-edit-mode))
(autoload 'consult-gh-topics-submit "consult-gh" "\
Submit TOPIC.

TOPIC is a string with properties that identify a consult-gh topic such as
a comment, issue, pull request, pull request review, etc.
For an example, see the buffer-local variable `consult-gh--topic' in the
buffer generated by commands such as `consult-gh-pr-create',
`consult-gh-issue-create', `consult-gh--pr-view', `consult-gh--issue-view',
`consult-gh-pr-review', or `consult-gh-topics-comment-create'.
TOPIC defaults to `consult-gh--topic', and if that is also nil,
then the user is asked to chose the TOPIC interactively.

(fn &optional TOPIC)" '(consult-gh-topics-edit-mode))
(autoload 'consult-gh-topics-open-in-browser "consult-gh" "\
Open the TOPIC of the current buffer in the browser.

TOPIC is a text with properties that identify a consult-gh topic such as
a comment, issue, pull request, pull request review, etc.
For an example, see the buffer-local variable `consult-gh--topic' in the
buffer generated by commands such as `consult-gh-pr-create',
`consult-gh-issue-create' `consult-gh--pr-view', `consult-gh--issue-view',
`consult-gh-pr-review', or `consult-gh-topics-comment-create'.
TOPIC defaults to `consult-gh--topic'.

This funciton uses `consult-gh-browse-url-func' for opening a url in the
browser.

(fn &optional TOPIC)" '(consult-gh-pr-view-mode consult-gh-issue-view-mode))
(autoload 'consult-gh-enable-default-keybindings "consult-gh" "\
Enable default keybindings for all minor modes in consult-gh." t)
(autoload 'consult-gh-disable-default-keybindings "consult-gh" "\
Disable default keybindings for minor modes in consult-gh." t)
(autoload 'consult-gh-refresh-view "consult-gh" "\
Refresh the buffer viewing a consult-gh topic." '(consult-gh-pr-view-mode consult-gh-pr-issue-mode))
(autoload 'consult-gh "consult-gh" "\
Convinient wrapper function for favorite interactive command.

Calls the function in `consult-gh-default-interactive-command'
and passes ARGS to it.

(fn &rest ARGS)" t)
(register-definition-prefixes "consult-gh" '("consult-gh-"))



(register-definition-prefixes "consult-gh-transient" '("consult-gh-transient-read-variable"))


(provide 'consult-gh-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-gh-forge-20250202.1941/consult-gh-forge-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar consult-gh-forge-mode nil "\
Non-nil if consult-gh-forge mode is enabled.
See the `consult-gh-forge-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `consult-gh-forge-mode'.")
(custom-autoload 'consult-gh-forge-mode "consult-gh-forge" nil)
(autoload 'consult-gh-forge-mode "consult-gh-forge" "\
Use magit/forge with `consult-gh' for viewing issues/prs.

This is a global minor mode.  If called interactively, toggle the
`consult-gh-forge mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='consult-gh-forge-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'consult-gh-forge-open-topic-in-consult-gh "consult-gh-forge" "\
Open the  forge at point with `consult-gh--pr-view'." '(magit-mode forge-topic-mode))
(autoload 'consult-gh-topics-open-in-forge "consult-gh-forge" "\
Open the consult-gh TOPIC in forge.

(fn &optional TOPIC)" '(consult-gh-pr-view-mode consult-gh-issue-view-mode))
(register-definition-prefixes "consult-gh-forge" '("consult-gh-forge-"))


(provide 'consult-gh-forge-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-gh-embark-20250201.1318/consult-gh-embark-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar consult-gh-embark-mode nil "\
Non-nil if consult-gh-embark mode is enabled.
See the `consult-gh-embark-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `consult-gh-embark-mode'.")
(custom-autoload 'consult-gh-embark-mode "consult-gh-embark" nil)
(autoload 'consult-gh-embark-mode "consult-gh-embark" "\
Use embark with `consult-gh' for extra actions.

This is a global minor mode.  If called interactively, toggle the
`consult-gh-embark mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='consult-gh-embark-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "consult-gh-embark" '("consult-gh-embark-"))


(provide 'consult-gh-embark-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-flycheck-20250101.914/consult-flycheck-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-flycheck "consult-flycheck" "\
Jump to flycheck error." t)
(register-definition-prefixes "consult-flycheck" '("consult-flycheck--"))


(provide 'consult-flycheck-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/consult-eglot-20250216.2144/consult-eglot-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'consult-eglot-symbols "consult-eglot" "\
Interactively select a symbol from the current workspace." t)
(register-definition-prefixes "consult-eglot" '("consult-eglot-"))


(provide 'consult-eglot-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/compile-angel-20250226.1603/compile-angel-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar compile-angel-on-load-mode nil "\
Non-nil if Compile-Angel-On-Load mode is enabled.
See the `compile-angel-on-load-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `compile-angel-on-load-mode'.")
(custom-autoload 'compile-angel-on-load-mode "compile-angel" nil)
(autoload 'compile-angel-on-load-mode "compile-angel" "\
Toggle `compile-angel-mode' then compiles .el files before they are loaded.

This is a global minor mode.  If called interactively, toggle the
`Compile-Angel-On-Load mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='compile-angel-on-load-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(defvar compile-angel-on-save-mode nil "\
Non-nil if Compile-Angel-On-Save mode is enabled.
See the `compile-angel-on-save-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `compile-angel-on-save-mode'.")
(custom-autoload 'compile-angel-on-save-mode "compile-angel" nil)
(autoload 'compile-angel-on-save-mode "compile-angel" "\
Toggle `compile-angel-mode'that compiles .el file when saved.

This is a global minor mode.  If called interactively, toggle the
`Compile-Angel-On-Save mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='compile-angel-on-save-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(autoload 'compile-angel-on-save-local-mode "compile-angel" "\
Toggle `compile-angel-mode'that compiles .el file when saved.

This is a minor mode.  If called interactively, toggle the
`Compile-Angel-On-Save-Local mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `compile-angel-on-save-local-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "compile-angel" '("compile-angel-"))


(provide 'compile-angel-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/company-20250223.352/company-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'company-mode "company" "\
\"complete anything\"; is an in-buffer completion framework.

Completion starts automatically, depending on the values
`company-idle-delay' and `company-minimum-prefix-length'.

Completion can be controlled with the commands:
`company-complete-common', `company-complete-selection', `company-complete',
`company-select-next', `company-select-previous'.  If these commands are
called before `company-idle-delay', completion will also start.

Completions can be searched with `company-search-candidates' or
`company-filter-candidates'.  These can be used while completion is
inactive, as well.

The completion data is retrieved using `company-backends' and displayed
using `company-frontends'.  If you want to start a specific backend, call
it interactively or use `company-begin-backend'.

By default, the completions list is sorted alphabetically, unless the
backend chooses otherwise, or `company-transformers' changes it later.

regular keymap (`company-mode-map'):

\\{company-mode-map}
keymap during active completions (`company-active-map'):

\\{company-active-map}

This is a minor mode.  If called interactively, toggle the `Company
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `company-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-company-mode 'globalized-minor-mode t)
(defvar global-company-mode nil "\
Non-nil if Global Company mode is enabled.
See the `global-company-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-company-mode'.")
(custom-autoload 'global-company-mode "company" nil)
(autoload 'global-company-mode "company" "\
Toggle Company mode in all buffers.
With prefix ARG, enable Global Company mode if ARG is positive;
otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Company mode is enabled in all buffers where `company-mode-on' would
do it.

See `company-mode' for more information on Company mode.

(fn &optional ARG)" t)
(autoload 'company-manual-begin "company" "\
Start the completion interface.

Unlike `company-complete-selection' or `company-complete', this command
doesn't cause any immediate changes to the buffer text." t)
(autoload 'company-complete "company" "\
Insert the common part of all candidates or the current selection.
The first time this is called, the common part is inserted, the second
time, or when the selection has been changed, the selected candidate is
inserted." t)
(register-definition-prefixes "company" '("company-"))



(autoload 'company-abbrev "company-abbrev" "\
`company-mode' completion backend for abbrev.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-abbrev" '("company-abbrev-insert"))



(autoload 'company-bbdb "company-bbdb" "\
`company-mode' completion backend for BBDB.

(fn COMMAND &optional ARG &rest IGNORE)" t)
(register-definition-prefixes "company-bbdb" '("company-bbdb-"))



(register-definition-prefixes "company-capf" '("company-"))



(register-definition-prefixes "company-clang" '("company-clang"))



(register-definition-prefixes "company-cmake" '("company-cmake"))



(autoload 'company-css "company-css" "\
`company-mode' completion backend for `css-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-css" '("company-css-"))



(autoload 'company-dabbrev "company-dabbrev" "\
dabbrev-like `company-mode' completion backend.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-dabbrev" '("company-dabbrev-"))



(autoload 'company-dabbrev-code "company-dabbrev-code" "\
dabbrev-like `company-mode' backend for code.
The backend looks for all symbols in the current buffer that aren't in
comments or strings.

(fn COMMAND &optional ARG &rest REST)" t)
(register-definition-prefixes "company-dabbrev-code" '("company-dabbrev-"))



(autoload 'company-etags "company-etags" "\
`company-mode' completion backend for etags.

(fn COMMAND &optional ARG &rest REST)" t)
(register-definition-prefixes "company-etags" '("company-etags-"))



(autoload 'company-files "company-files" "\
`company-mode' completion backend existing file names.
Completions works for proper absolute and relative files paths.
File paths with spaces are only supported inside strings.

(fn COMMAND &optional ARG &rest REST)" t)
(register-definition-prefixes "company-files" '("company-file"))



(autoload 'company-gtags "company-gtags" "\
`company-mode' completion backend for GNU Global.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-gtags" '("company-gtags-"))



(autoload 'company-ispell "company-ispell" "\
`company-mode' completion backend using Ispell.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-ispell" '("company-"))



(autoload 'company-keywords "company-keywords" "\
`company-mode' backend for programming language keywords.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-keywords" '("company-keywords-"))



(autoload 'company-nxml "company-nxml" "\
`company-mode' completion backend for `nxml-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-nxml" '("company-nxml-"))



(autoload 'company-oddmuse "company-oddmuse" "\
`company-mode' completion backend for `oddmuse-mode'.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-oddmuse" '("company-oddmuse-"))



(autoload 'company-semantic "company-semantic" "\
`company-mode' completion backend using CEDET Semantic.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-semantic" '("company-semantic-"))



(register-definition-prefixes "company-template" '("company-template-"))



(autoload 'company-tempo "company-tempo" "\
`company-mode' completion backend for tempo.

(fn COMMAND &optional ARG &rest IGNORED)" t)
(register-definition-prefixes "company-tempo" '("company-tempo-"))



(autoload 'company-tng-frontend "company-tng" "\
When the user changes the selection at least once, this
frontend will display the candidate in the buffer as if it's
already there and any key outside of `company-active-map' will
confirm the selection and finish the completion.

(fn COMMAND)")
(define-obsolete-function-alias 'company-tng-configure-default 'company-tng-mode "0.10.0" "Applies the default configuration to enable company-tng.")
(defvar company-tng-mode nil "\
Non-nil if Company-Tng mode is enabled.
See the `company-tng-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `company-tng-mode'.")
(custom-autoload 'company-tng-mode "company-tng" nil)
(autoload 'company-tng-mode "company-tng" "\
This minor mode enables `company-tng-frontend'.

This is a global minor mode.  If called interactively, toggle the
`Company-Tng mode' mode.  If the prefix argument is positive, enable the
mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='company-tng-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "company-tng" '("company-tng-"))



(autoload 'company-yasnippet "company-yasnippet" "\
`company-mode' backend for `yasnippet'.

This backend should be used with care, because as long as there are
snippets defined for the current major mode, this backend will always
shadow backends that come after it.  Recommended usages:

* In a buffer-local value of `company-backends', grouped with a backend or
  several that provide actual text completions.

  (add-hook \\='js-mode-hook
            (lambda ()
              (set (make-local-variable \\='company-backends)
                   \\='((company-dabbrev-code company-yasnippet)))))

* After keyword `:with', grouped with other backends.

  (push \\='(company-semantic :with company-yasnippet) company-backends)

* Not in `company-backends', just bound to a key.

  (global-set-key (kbd \"C-c y\") \\='company-yasnippet)

(fn COMMAND &optional ARG &rest IGNORE)" t)
(register-definition-prefixes "company-yasnippet" '("company-yasnippet-"))


(provide 'company-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/combobulate/combobulate-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "combobulate" '("combobulate-"))



(register-definition-prefixes "combobulate-contrib" '("combobulate-"))



(register-definition-prefixes "combobulate-css" '("combobulate-css-"))



(register-definition-prefixes "combobulate-debug" '("combobulate--"))



(autoload 'combobulate--debug-ts-query-builder "combobulate-debug-query" "\
Provide means for developers to write and test combobulate--debug-ts queries.

The buffer on focus when the command is called is set as the target buffer." t)
(register-definition-prefixes "combobulate-debug-query" '("combobulate--debug-ts-" "tree-sitter-query-matches"))



(register-definition-prefixes "combobulate-display" '("combobulate-"))



(register-definition-prefixes "combobulate-html" '("combobulate-html-"))



(register-definition-prefixes "combobulate-interface" '("combobulate-"))



(register-definition-prefixes "combobulate-js-ts" '("combobulate-"))



(register-definition-prefixes "combobulate-manipulation" '("combobulate-"))



(register-definition-prefixes "combobulate-misc" '("combobulate-"))



(register-definition-prefixes "combobulate-navigation" '("combobulate-" "with-argument-repetition"))



(register-definition-prefixes "combobulate-python" '("combobulate-python-"))



(register-definition-prefixes "combobulate-rules" '("combobulate-rules-"))



(register-definition-prefixes "combobulate-settings" '("combobulate-"))



(register-definition-prefixes "combobulate-yaml" '("combobulate-yaml-setup"))


(provide 'combobulate-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/codeium/codeium-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(defvar cl-struct-codeium-state-tags)
(cl-defsubst codeium-state-p (cl-x) (declare (side-effect-free error-free) (pure t)) (and (memq (type-of cl-x) cl-struct-codeium-state-tags) t))
(define-symbol-prop 'codeium-state 'cl-deftype-satisfies 'codeium-state-p)
(cl-defsubst codeium-state-name (cl-x) "\
Access slot \"name\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 1)))
(cl-defsubst codeium-state-config (cl-x) "\
Access slot \"config\" of `codeium-state' struct CL-X.
state-wise config, access it with `codeium-config'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 2)))
(cl-defsubst codeium-state-proc (cl-x) "\
Access slot \"proc\" of `codeium-state' struct CL-X.
created on a `codeium-init', not created if one specifies `codeium-port'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 3)))
(cl-defsubst codeium-state-manager-directory (cl-x) "\
Access slot \"manager-directory\" of `codeium-state' struct CL-X.
directory which codeium local language server places temp files; created by `codeium-default-command'" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 4)))
(cl-defsubst codeium-state-port (cl-x) "\
Access slot \"port\" of `codeium-state' struct CL-X.
port used by codeium local language server; by default a random port is used.
If you set `codeium-port', it will be used instead and no process will be created" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 5)))
(cl-defsubst codeium-state-port-ready-hook (cl-x) "\
Access slot \"port-ready-hook\" of `codeium-state' struct CL-X.
hook called when the server is ready; use `codeium-on-port-ready' to add to it" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 6)))
(cl-defsubst codeium-state-alive-tracker (cl-x) "\
Access slot \"alive-tracker\" of `codeium-state' struct CL-X.
a symbol, set to nil on a codeium-reset which ensures that requests on timers made before the request are dropped" (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 7)))
(cl-defsubst codeium-state-last-auth-token (cl-x) "\
Access slot \"last-auth-token\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 8)))
(cl-defsubst codeium-state-last-api-key (cl-x) "\
Access slot \"last-api-key\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 9)))
(cl-defsubst codeium-state-last-request-id (cl-x) "\
Access slot \"last-request-id\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 10)))
(cl-defsubst codeium-state-results-table (cl-x) "\
Access slot \"results-table\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 11)))
(cl-defsubst codeium-state-pending-table (cl-x) "\
Access slot \"pending-table\" of `codeium-state' struct CL-X." (declare (side-effect-free t)) (progn (or (codeium-state-p cl-x) (signal 'wrong-type-argument (list 'codeium-state cl-x))) (aref cl-x 12)))
(cl-defsubst codeium-state-make (&cl-defs (nil (cl-tag-slot) (name "") (config nil :documentation "state-wise config, access it with `codeium-config'") (proc nil :documentation "created on a `codeium-init', not created if one specifies `codeium-port'") (manager-directory nil :documentation "directory which codeium local language server places temp files; created by `codeium-default-command'") (port nil :documentation "port used by codeium local language server; by default a random port is used.\nIf you set `codeium-port', it will be used instead and no process will be created") (port-ready-hook nil :documentation "hook called when the server is ready; use `codeium-on-port-ready' to add to it") (alive-tracker nil :documentation "a symbol, set to nil on a codeium-reset which ensures that requests on timers made before the request are dropped") (last-auth-token) (last-api-key) (last-request-id 0) (results-table (make-hash-table :test 'eql :weakness nil)) (pending-table (make-hash-table :test 'eql :weakness nil))) &key name config proc manager-directory port port-ready-hook alive-tracker last-auth-token last-api-key last-request-id results-table pending-table) "\
Constructor for objects of type `codeium-state'." (declare (side-effect-free t)) (record 'codeium-state name config proc manager-directory port port-ready-hook alive-tracker last-auth-token last-api-key last-request-id results-table pending-table))
(autoload 'codeium-config "codeium" "\


(fn FIELD &optional STATE)")
(gv-define-setter codeium-config (val field &optional state) `(codeium--set-config ,val ,field ,state))
(autoload 'codeium-install "codeium" "\


(fn &optional STATE NOCONFIRM)" t)
(autoload 'codeium-init "codeium" "\


(fn &optional STATE)" t)
(autoload 'codeium-completion-at-point "codeium" "\


(fn &optional STATE)")
(register-definition-prefixes "codeium" '("codeium-"))


(provide 'codeium-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/clojure-ts-mode-20250216.852/clojure-ts-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'clojure-ts-mode "clojure-ts-mode" "\
Major mode for editing Clojure code.

\\{clojure-ts-mode-map}

(fn)" t)
(autoload 'clojure-ts-clojurescript-mode "clojure-ts-mode" "\
Major mode for editing ClojureScript code.

\\{clojure-ts-clojurescript-mode-map}

(fn)" t)
(autoload 'clojure-ts-clojurec-mode "clojure-ts-mode" "\
Major mode for editing ClojureC code.

\\{clojure-ts-clojurec-mode-map}

(fn)" t)
(autoload 'clojure-ts-clojuredart-mode "clojure-ts-mode" "\
Major mode for editing Clojure Dart code.

\\{clojure-ts-clojuredart-mode-map}

(fn)" t)
(autoload 'clojure-ts-jank-mode "clojure-ts-mode" "\
Major mode for editing Jank code.

\\{clojure-ts-jank-mode-map}

(fn)" t)
(register-definition-prefixes "clojure-ts-mode" '("clojure-ts-"))


(provide 'clojure-ts-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/catppuccin-theme-20250212.2054/catppuccin-theme-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(when load-file-name (add-to-list 'custom-theme-load-path (file-name-as-directory (file-name-directory load-file-name))))
(register-definition-prefixes "catppuccin-theme" '("catppuccin-" "define-catppuccin-flavor"))



(register-definition-prefixes "catppuccin-theme.test" '("assert"))


(provide 'catppuccin-theme-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/casual-20250211.2000/casual-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "casual" '("casual-"))



 (autoload 'casual-agenda-tmenu "casual-agenda" nil t)



(register-definition-prefixes "casual-agenda-settings" '("casual-agenda-"))



(register-definition-prefixes "casual-agenda-utils" '("casual-agenda-"))



 (autoload 'casual-bookmarks-tmenu "casual-bookmarks" nil t)
(register-definition-prefixes "casual-bookmarks" '("casual-bookmarks-"))



(register-definition-prefixes "casual-bookmarks-settings" '("casual-bookmarks-"))



(register-definition-prefixes "casual-bookmarks-utils" '("casual-bookmarks-unicode-"))



 (autoload 'casual-calc-tmenu "casual-calc" nil t)



(register-definition-prefixes "casual-calc--calc" '("casual-calc--"))



(register-definition-prefixes "casual-calc-algebra" '("casual-calc-"))



(register-definition-prefixes "casual-calc-binary" '("casual-calc--"))



(register-definition-prefixes "casual-calc-fileio" '("casual-calc-"))



(register-definition-prefixes "casual-calc-financial" '("casual-calc--fin-"))



(register-definition-prefixes "casual-calc-graphics" '("casual-calc--"))



(register-definition-prefixes "casual-calc-labels" '("casual-calc-"))



(register-definition-prefixes "casual-calc-predicates" '("casual-calc-"))



(register-definition-prefixes "casual-calc-random" '("casual-calc--random-interval-0-to-m"))



(register-definition-prefixes "casual-calc-settings" '("casual-calc-"))



(register-definition-prefixes "casual-calc-stack" '("casual-calc-"))



(register-definition-prefixes "casual-calc-utils" '("casual-calc-"))



(register-definition-prefixes "casual-calc-vector" '("casual-calc--histogram"))



 (autoload 'casual-calendar "casual-calendar" nil t)
 (autoload 'casual-calendar-tmenu "casual-calendar" nil t)



(register-definition-prefixes "casual-calendar-constants" '("casual-calendar-"))



(register-definition-prefixes "casual-calendar-settings" '("casual-calendar-"))



 (autoload 'casual-dired-tmenu "casual-dired" nil t)
(register-definition-prefixes "casual-dired" '("casual-dired-"))



(register-definition-prefixes "casual-dired-settings" '("casual-dired-"))



 (autoload 'casual-dired-sort-by-tmenu "casual-dired-sort-by" nil t)
(register-definition-prefixes "casual-dired-sort-by" '("casual-dired--"))



 (autoload 'casual-dired-search-replace-tmenu "casual-dired-utils" nil t)
(register-definition-prefixes "casual-dired-utils" '("casual-dired-unicode-"))



(register-definition-prefixes "casual-dired-variables" '("casual-dired-"))



 (autoload 'casual-editkit-main-tmenu "casual-editkit" nil t)



(register-definition-prefixes "casual-editkit-constants" '("casual-editkit-"))



(register-definition-prefixes "casual-editkit-settings" '("casual-editkit-"))



 (autoload 'casual-editkit-open-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-project-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-edit-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-emoji-symbols-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-mark-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-copy-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-kill-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-sort-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-transpose-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-delete-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-move-text-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-windows-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-windows-delete-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-bookmarks-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-search-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-tools-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-registers-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-rectangle-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-transform-text-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-macro-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-reformat-tmenu "casual-editkit-utils" nil t)
 (autoload 'casual-editkit-narrow-tmenu "casual-editkit-utils" nil t)
(register-definition-prefixes "casual-editkit-utils" '("casual-editkit-"))



 (autoload 'casual-ibuffer-tmenu "casual-ibuffer" nil t)
 (autoload 'casual-ibuffer-sortby-tmenu "casual-ibuffer" nil t)



 (autoload 'casual-ibuffer-filter-tmenu "casual-ibuffer-filter" nil t)
(register-definition-prefixes "casual-ibuffer-filter" '("casual-ibuffer-"))



(register-definition-prefixes "casual-ibuffer-settings" '("casual-ibuffer-"))



(register-definition-prefixes "casual-ibuffer-utils" '("casual-ibuffer-"))



(register-definition-prefixes "casual-image-settings" '("casual-image--customize-group"))



(register-definition-prefixes "casual-image-utils" '("casual-image-"))



 (autoload 'casual-info-tmenu "casual-info" nil t)
(register-definition-prefixes "casual-info" '("casual-info-new-info-frame"))



(register-definition-prefixes "casual-info-settings" '("casual-info-"))



(register-definition-prefixes "casual-info-utils" '("casual-info-"))



(register-definition-prefixes "casual-info-variables" '("casual-info-use-unicode-symbols"))



 (autoload 'casual-isearch-tmenu "casual-isearch" nil t)
(register-definition-prefixes "casual-isearch" '("casual-isearch--toggle-"))



(register-definition-prefixes "casual-isearch-settings" '("casual-isearch-"))



(register-definition-prefixes "casual-isearch-utils" '("casual-isearch-unicode-"))



(register-definition-prefixes "casual-lib" '("casual-lib-"))



 (autoload 'casual-re-builder-tmenu "casual-re-builder" nil t)



(register-definition-prefixes "casual-re-builder-settings" '("casual-re-builder-"))



(register-definition-prefixes "casual-re-builder-utils" '("casual-re-builder-"))


(provide 'casual-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/casual-avy-20241217.1931/casual-avy-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'casual-avy-tmenu "casual-avy" nil t)
(register-definition-prefixes "casual-avy" '("casual-avy-"))



(register-definition-prefixes "casual-avy-version" '("casual-avy-version"))


(provide 'casual-avy-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/cargo-transient-20241204.1217/cargo-transient-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'cargo-transient "cargo-transient" nil t)
(register-definition-prefixes "cargo-transient" '("cargo-transient-"))


(provide 'cargo-transient-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/cargo-mode-20250106.718/cargo-mode-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'cargo-mode-execute-task "cargo-mode" "\
Select and execute cargo task.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-test "cargo-mode" "\
Run the `cargo test` command.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-build "cargo-mode" "\
Run the `cargo build` command.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-clippy "cargo-mode" "\
Run the `cargo clippy` command.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-test-current-buffer "cargo-mode" "\
Run the cargo test for the current buffer.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-test-current-test "cargo-mode" "\
Run the Cargo test command for the current test.
If PREFIX is non-nil, prompt for additional params.

(fn &optional PREFIX)" t)
(autoload 'cargo-mode-last-command "cargo-mode" "\
Re-execute the last `cargo-mode` task." t)
(autoload 'cargo-minor-mode "cargo-mode" "\
Cargo minor mode.  Used for holding keybindings for `cargo-mode'.

\\{cargo-minor-mode-map}

This is a minor mode.  If called interactively, toggle the `cargo minor
mode' mode.  If the prefix argument is positive, enable the mode, and if
it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `cargo-minor-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "cargo-mode" '("cargo-"))


(provide 'cargo-mode-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/cape-20250219.1943/cape-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'cape-history "cape" "\
Complete from Eshell, Comint or minibuffer history.
See also `consult-history' for a more flexible variant based on
`completing-read'.  If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-file "cape" "\
Complete file name at point.
See the user option `cape-file-directory-must-exist'.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-elisp-symbol "cape" "\
Complete Elisp symbol at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-elisp-block "cape" "\
Complete Elisp in Org or Markdown code block.
This Capf is particularly useful for literate Emacs configurations.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dabbrev "cape" "\
Complete with Dabbrev at point.

If INTERACTIVE is nil the function acts like a Capf.  In case you
observe a performance issue with auto-completion and `cape-dabbrev'
it is strongly recommended to disable scanning in other buffers.
See the user options `cape-dabbrev-min-length' and
`cape-dabbrev-check-other-buffers'.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-dict "cape" "\
Complete word from dictionary at point.
This completion function works best if the dictionary is sorted
by frequency.  See the custom option `cape-dict-file'.  If
INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-abbrev "cape" "\
Complete abbreviation at point.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-line "cape" "\
Complete current line from other lines.
The buffers returned by `cape-line-buffer-function' are scanned for lines.
If INTERACTIVE is nil the function acts like a Capf.

(fn &optional INTERACTIVE)" t)
(autoload 'cape-company-to-capf "cape" "\
Convert Company BACKEND function to Capf.
VALID is a function taking the old and new input string.  It should
return nil if the cached candidates became invalid.  The default value
for VALID is `string-prefix-p' such that the candidates are only fetched
again if the input prefix changed.

(fn BACKEND &optional VALID)")
(autoload 'cape-interactive "cape" "\
Complete interactively with the given CAPFS.

(fn &rest CAPFS)")
(autoload 'cape-capf-interactive "cape" "\
Create interactive completion function from CAPF.

(fn CAPF)")
(autoload 'cape-wrap-super "cape" "\
Call CAPFS and return merged completion result.
The CAPFS list can contain the keyword `:with' to mark the Capfs
afterwards as auxiliary One of the non-auxiliary Capfs before
`:with' must return non-nil for the super Capf to set in and
return a non-nil result.  Such behavior is useful when listing
multiple super Capfs in the `completion-at-point-functions':

  (setq completion-at-point-functions
        (list (cape-capf-super \\='eglot-completion-at-point
                               :with \\='tempel-complete)
              (cape-capf-super \\='cape-dabbrev
                               :with \\='tempel-complete)))

(fn &rest CAPFS)")
(autoload 'cape-wrap-debug "cape" "\
Call CAPF and return a completion table which prints trace messages.
If CAPF is an anonymous lambda, pass the Capf NAME explicitly for
meaningful debugging output.

(fn CAPF &optional NAME)")
(autoload 'cape-wrap-buster "cape" "\
Call CAPF and return a completion table with cache busting.
This function can be used as an advice around an existing Capf.
The cache is busted when the input changes.  The argument VALID
can be a function taking the old and new input string.  It should
return nil if the new input requires that the completion table is
refreshed.  The default value for VALID is `equal', such that the
completion table is refreshed on every input change.

(fn CAPF &optional VALID)")
(autoload 'cape-wrap-passthrough "cape" "\
Call CAPF and make sure that no completion style filtering takes place.

(fn CAPF)")
(autoload 'cape-wrap-properties "cape" "\
Call CAPF and strip or add completion PROPERTIES.
Completion properties include for example :exclusive, :category,
:annotation-function, :display-sort-function and various :company-*
extensions.  The :strip flag means to strip all completion properties.

(fn CAPF &rest PROPERTIES)")
(autoload 'cape-wrap-nonexclusive "cape" "\
Call CAPF and ensure that it is marked as non-exclusive.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-sort "cape" "\
Call CAPF and add SORT function.
This function can be used as an advice around an existing Capf.

(fn CAPF SORT)")
(autoload 'cape-wrap-predicate "cape" "\
Call CAPF and add an additional candidate PREDICATE.
The PREDICATE is passed the candidate symbol or string.

(fn CAPF PREDICATE)")
(autoload 'cape-wrap-silent "cape" "\
Call CAPF and silence it (no messages, no errors).
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-case-fold "cape" "\
Call CAPF and return a case-insensitive completion table.
If NOFOLD is non-nil return a case sensitive table instead.  This
function can be used as an advice around an existing Capf.

(fn CAPF &optional NOFOLD)")
(autoload 'cape-wrap-noninterruptible "cape" "\
Call CAPF and return a non-interruptible completion table.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-prefix-length "cape" "\
Call CAPF and ensure that prefix length is greater or equal than LENGTH.
If the prefix is long enough, enforce auto completion.

(fn CAPF LENGTH)")
(autoload 'cape-wrap-inside-faces "cape" "\
Call CAPF only if inside FACES.
This function can be used as an advice around an existing Capf.

(fn CAPF &rest FACES)")
(autoload 'cape-wrap-inside-code "cape" "\
Call CAPF only if inside code, not inside a comment or string.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-inside-comment "cape" "\
Call CAPF only if inside comment.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-inside-string "cape" "\
Call CAPF only if inside string.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
(autoload 'cape-wrap-purify "cape" "\
Call CAPF and ensure that it does not illegally modify the buffer.
This function can be used as an advice around an existing
Capf.  It has been introduced mainly to fix the broken
`pcomplete-completions-at-point' function in Emacs versions < 29.

(fn CAPF)")
(autoload 'cape-wrap-accept-all "cape" "\
Call CAPF and return a completion table which accepts every input.
This function can be used as an advice around an existing Capf.

(fn CAPF)")
 (autoload 'cape-capf-accept-all "cape")
 (autoload 'cape-capf-buster "cape")
 (autoload 'cape-capf-case-fold "cape")
 (autoload 'cape-capf-debug "cape")
 (autoload 'cape-capf-inside-code "cape")
 (autoload 'cape-capf-inside-comment "cape")
 (autoload 'cape-capf-inside-faces "cape")
 (autoload 'cape-capf-inside-string "cape")
 (autoload 'cape-capf-nonexclusive "cape")
 (autoload 'cape-capf-noninterruptible "cape")
 (autoload 'cape-capf-passthrough "cape")
 (autoload 'cape-capf-predicate "cape")
 (autoload 'cape-capf-prefix-length "cape")
 (autoload 'cape-capf-properties "cape")
 (autoload 'cape-capf-purify "cape")
 (autoload 'cape-capf-silent "cape")
 (autoload 'cape-capf-super "cape")
 (autoload 'cape-prefix-map "cape" nil t 'keymap)
(register-definition-prefixes "cape" '("cape-"))



 (autoload 'cape-tex "cape-char" nil t)
 (autoload 'cape-sgml "cape-char" nil t)
 (autoload 'cape-rfc1345 "cape-char" nil t)
 (when (> emacs-major-version 28) (autoload 'cape-emoji "cape-char" nil t))
(register-definition-prefixes "cape-char" '("cape-char--"))



(autoload 'cape-keyword "cape-keyword" "\
Complete programming language keyword at point.
See the variable `cape-keyword-list'.
If INTERACTIVE is nil the function acts like a capf.

(fn &optional INTERACTIVE)" t)
(register-definition-prefixes "cape-keyword" '("cape-"))


(provide 'cape-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/bui-20210108.1141/bui-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(register-definition-prefixes "bui" '("bui-define-"))



(register-definition-prefixes "bui-button" '("bui"))



(register-definition-prefixes "bui-core" '("bui-"))



(register-definition-prefixes "bui-entry" '("bui-"))



(register-definition-prefixes "bui-history" '("bui-history"))



(register-definition-prefixes "bui-info" '("bui-info-"))



(register-definition-prefixes "bui-list" '("bui-list-"))



(register-definition-prefixes "bui-utils" '("bui-"))


(provide 'bui-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/browse-at-remote-20230223.554/browse-at-remote-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'browse-at-remote "browse-at-remote" "\
Browse the current file with `browse-url'." t)
(autoload 'browse-at-remote-kill "browse-at-remote" "\
Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'." t)
(defalias 'bar-browse 'browse-at-remote "\
Browse the current file with `browse-url'.")
(defalias 'bar-to-clipboard 'browse-at-remote-kill "\
Add the URL of the current file to the kill ring.

Works like `browse-at-remote', but puts the address in the
kill ring instead of opening it with `browse-url'.")
(register-definition-prefixes "browse-at-remote" '("browse-at-remote-"))


(provide 'browse-at-remote-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/breadcrumb-1.0.1/breadcrumb-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'breadcrumb-imenu-crumbs "breadcrumb" "\
Describe point inside the Imenu tree of current file.")
(autoload 'breadcrumb-project-crumbs "breadcrumb" "\
Describing the current file inside project.")
(autoload 'breadcrumb-local-mode "breadcrumb" "\
Header lines with breadcrumbs.

This is a minor mode.  If called interactively, toggle the
`Breadcrumb-Local mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `breadcrumb-local-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'breadcrumb-mode 'globalized-minor-mode t)
(defvar breadcrumb-mode nil "\
Non-nil if Breadcrumb mode is enabled.
See the `breadcrumb-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `breadcrumb-mode'.")
(custom-autoload 'breadcrumb-mode "breadcrumb" nil)
(autoload 'breadcrumb-mode "breadcrumb" "\
Toggle Breadcrumb-Local mode in all buffers.
With prefix ARG, enable Breadcrumb mode if ARG is positive; otherwise,
disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Breadcrumb-Local mode is enabled in all buffers where
`breadcrumb--turn-on-local-mode-on-behalf-of-global-mode' would do
it.

See `breadcrumb-local-mode' for more information on Breadcrumb-Local
mode.

(fn &optional ARG)" t)
(autoload 'breadcrumb-jump "breadcrumb" "\
Like \\[execute-extended-command] `imenu', but breadcrumb-powered." t)
(register-definition-prefixes "breadcrumb" '("breadcrumb-"))


(provide 'breadcrumb-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/apheleia-20250212.2259/apheleia-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'apheleia-format-buffer "apheleia" "\
Run code formatter asynchronously on current buffer, preserving point.

FORMATTER is a symbol appearing as a key in
`apheleia-formatters', or a list of them to run multiple
formatters in a chain. If called interactively, run the currently
configured formatters (see `apheleia-formatter' and
`apheleia-mode-alist'), or prompt from `apheleia-formatters' if
there is none configured for the current buffer. With a prefix
argument, prompt always.

After the formatters finish running, the diff utility is invoked to
determine what changes it made. That diff is then used to apply the
formatter's changes to the current buffer without moving point or
changing the scroll position in any window displaying the buffer. If
the buffer has been modified since the formatter started running,
however, the operation is aborted.

If the formatter actually finishes running and the buffer is
successfully updated (even if the formatter has not made any
changes), SUCCESS-CALLBACK, if provided, is invoked with no
arguments.

If provided, CALLBACK is invoked unconditionally (unless there is
a synchronous nonlocal exit) with a plist. Callback function must
accept unknown keywords. At present only `:error' is included,
this is either an error or nil.

(fn FORMATTER &optional SUCCESS-CALLBACK &key CALLBACK)" t)
(autoload 'apheleia-format-after-save "apheleia" "\
Run code formatter for current buffer if any configured, then save.")
(define-minor-mode apheleia-mode "Minor mode for reformatting code on save without moving point.
It is customized by means of the variables `apheleia-mode-alist'
and `apheleia-formatters'." :lighter apheleia-mode-lighter (if apheleia-mode (add-hook 'after-save-hook #'apheleia-format-after-save nil 'local) (remove-hook 'after-save-hook #'apheleia-format-after-save 'local)))
(defvar-local apheleia-inhibit nil "\
Do not enable `apheleia-mode' automatically if non-nil.
This is designed for use in .dir-locals.el.

See also `apheleia-inhibit-functions'.")
(put 'apheleia-inhibit 'safe-local-variable #'booleanp)
(defun apheleia-mode-maybe nil "\
Enable `apheleia-mode' if allowed by user configuration.
This checks `apheleia-inhibit-functions' and `apheleia-inhibit'
to see if it is allowed." (unless (or apheleia-inhibit (run-hook-with-args-until-success 'apheleia-inhibit-functions)) (apheleia-mode)))
(define-globalized-minor-mode apheleia-global-mode apheleia-mode apheleia-mode-maybe :group 'apheleia)
(put 'apheleia-mode 'safe-local-variable #'booleanp)
(register-definition-prefixes "apheleia" '("apheleia-"))



(register-definition-prefixes "apheleia-dp" '("apheleia--align-point"))



(register-definition-prefixes "apheleia-formatter-context" '("apheleia-formatter--context"))



(defvar apheleia-mode-predicates '(apheleia-mhtml-mode-predicate) "\
List of predicates that check for sneaky major modes.
Sometimes a major mode will set `major-mode' to something other
than itself, making it hard to correctly detect what major mode
is active. In such cases you can add a predicate to this list to
handle it. Predicates take no arguments, are run in the current
buffer, and should return the name of a mode if one is detected.
If all the predicates return nil, or if there aren't any in the
list, then only the value of `major-mode' is used to determine
the major mode. The detected major mode affects the selection
from `apheleia-mode-alist'.")
(custom-autoload 'apheleia-mode-predicates "apheleia-formatters" t)
(defvar-local apheleia-formatter nil "\
Name of formatter to use in current buffer, a symbol or nil.
If non-nil, then `apheleia-formatters' should have a matching
entry. This overrides `apheleia-mode-alist'.

The value can also be a list of symbols to apply multiple
formatters in sequence.")
(register-definition-prefixes "apheleia-formatters" '("apheleia-"))



(autoload 'apheleia-goto-error "apheleia-log" "\
Go to the most recently reported formatter error message." t)
(register-definition-prefixes "apheleia-log" '("apheleia-"))



(register-definition-prefixes "apheleia-rcs" '("apheleia-"))



(register-definition-prefixes "apheleia-utils" '("apheleia-formatters-"))


(provide 'apheleia-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/all-the-icons-20240623.1800/all-the-icons-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'all-the-icons-icon-for-dir "all-the-icons" "\
Get the formatted icon for DIR.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

Note: You want chevron, please use `all-the-icons-icon-for-dir-with-chevron'.

(fn DIR &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-file "all-the-icons" "\
Get the formatted icon for FILE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn FILE &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-mode "all-the-icons" "\
Get the formatted icon for MODE.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn MODE &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-icon-for-url "all-the-icons" "\
Get the formatted icon for URL.
If an icon for URL isn't found in `all-the-icons-url-alist', a globe is used.
ARG-OVERRIDES should be a plist containining `:height',
`:v-adjust' or `:face' properties like in the normal icon
inserting functions.

(fn URL &rest ARG-OVERRIDES)")
(autoload 'all-the-icons-install-fonts "all-the-icons" "\
Helper function to download and install the latests fonts based on OS.
When PFX is non-nil, ignore the prompt and just install

(fn &optional PFX)" t)
(autoload 'all-the-icons-insert "all-the-icons" "\
Interactive icon insertion function.
When Prefix ARG is non-nil, insert the propertized icon.
When FAMILY is non-nil, limit the candidates to the icon set matching it.

(fn &optional ARG FAMILY)" t)
(register-definition-prefixes "all-the-icons" '("all-the-icons-"))


(provide 'all-the-icons-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/all-the-icons-dired-20231207.1324/all-the-icons-dired-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'all-the-icons-dired-mode "all-the-icons-dired" "\
Display all-the-icons icon for each file in a Dired buffer.

This is a minor mode.  If called interactively, toggle the
`All-The-Icons-Dired mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `all-the-icons-dired-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "all-the-icons-dired" '("all-the-icons-dired-"))


(provide 'all-the-icons-dired-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/all-the-icons-completion-20240128.2048/all-the-icons-completion-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'all-the-icons-completion-marginalia-setup "all-the-icons-completion" "\
Hook to `marginalia-mode-hook' to bind `all-the-icons-completion-mode' to it.")
(defvar all-the-icons-completion-mode nil "\
Non-nil if All-The-Icons-Completion mode is enabled.
See the `all-the-icons-completion-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `all-the-icons-completion-mode'.")
(custom-autoload 'all-the-icons-completion-mode "all-the-icons-completion" nil)
(autoload 'all-the-icons-completion-mode "all-the-icons-completion" "\
Add icons to completion candidates.

This is a global minor mode.  If called interactively, toggle the
`All-The-Icons-Completion mode' mode.  If the prefix argument is
positive, enable the mode, and if it is zero or negative, disable the
mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate `(default-value \\='all-the-icons-completion-mode)'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(register-definition-prefixes "all-the-icons-completion" '("all-the-icons-completion-completion-metadata-get"))


(provide 'all-the-icons-completion-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/aidermacs/aidermacs-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




 (autoload 'aider-transient-menu "aider" "Transient menu for Aider commands." t)
(autoload 'aider-run-aider "aider" "\
Create a comint-based buffer and run \"aider\" for interactive conversation." t)
(register-definition-prefixes "aider" '("aider-"))



(register-definition-prefixes "aider-doom" '("aider-doom-setup-keys"))



(register-definition-prefixes "aider-helm" '("aider-" "load-aider-helm-read-string-history" "save-aider-helm-read-string-history"))


(provide 'aidermacs-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/aggressive-indent-20230112.1300/aggressive-indent-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'aggressive-indent-indent-defun "aggressive-indent" "\
Indent current defun.
Throw an error if parentheses are unbalanced.
If L and R are provided, use them for finding the start and end of defun.

(fn &optional L R)" t)
(autoload 'aggressive-indent-indent-region-and-on "aggressive-indent" "\
Indent region between L and R, and then some.
Call `aggressive-indent-region-function' between L and R, and
then keep indenting until nothing more happens.

(fn L R)" t)
(autoload 'aggressive-indent-mode "aggressive-indent" "\
Minor mode to keep your code always indented.

This is a minor mode.  If called interactively, toggle the
`Aggressive-Indent mode' mode.  If the prefix argument is positive,
enable the mode, and if it is zero or negative, disable the mode.

If called from Lisp, toggle the mode if ARG is `toggle'.  Enable the
mode if ARG is nil, omitted, or is a positive number.  Disable the mode
if ARG is a negative number.

To check whether the minor mode is enabled in the current buffer,
evaluate the variable `aggressive-indent-mode'.

The mode's hook is called both when the mode is enabled and when it is
disabled.

(fn &optional ARG)" t)
(put 'global-aggressive-indent-mode 'globalized-minor-mode t)
(defvar global-aggressive-indent-mode nil "\
Non-nil if Global Aggressive-Indent mode is enabled.
See the `global-aggressive-indent-mode' command
for a description of this minor mode.
Setting this variable directly does not take effect;
either customize it (see the info node `Easy Customization')
or call the function `global-aggressive-indent-mode'.")
(custom-autoload 'global-aggressive-indent-mode "aggressive-indent" nil)
(autoload 'global-aggressive-indent-mode "aggressive-indent" "\
Toggle Aggressive-Indent mode in all buffers.
With prefix ARG, enable Global Aggressive-Indent mode if ARG is
positive; otherwise, disable it.

If called from Lisp, toggle the mode if ARG is `toggle'.
Enable the mode if ARG is nil, omitted, or is a positive number.
Disable the mode if ARG is a negative number.

Aggressive-Indent mode is enabled in all buffers where
`aggressive-indent-mode' would do it.

See `aggressive-indent-mode' for more information on Aggressive-Indent
mode.

(fn &optional ARG)" t)
(defalias 'aggressive-indent-global-mode #'global-aggressive-indent-mode)
(register-definition-prefixes "aggressive-indent" '("aggressive-indent-"))


(provide 'aggressive-indent-autoloads)


)
(let* ((load-file-name "/Users/jesse/.config/emacs/elpa/affe-20250128.839/affe-autoloads.el")(load-true-file-name load-file-name))



(add-to-list 'load-path (or (and load-file-name (directory-file-name (file-name-directory load-file-name))) (car load-path)))




(autoload 'affe-grep "affe" "\
Fuzzy grep in DIR with optional INITIAL input.

(fn &optional DIR INITIAL)" t)
(autoload 'affe-find "affe" "\
Fuzzy find in DIR with optional INITIAL input.

(fn &optional DIR INITIAL)" t)
(register-definition-prefixes "affe" '("affe-"))



(register-definition-prefixes "affe-backend" '("affe-backend--"))


(provide 'affe-autoloads)


)
(defvar package-activated-list)
(setq package-activated-list
      (delete-dups
       (append
        '(zoom-window yasnippet yasnippet-snippets yasnippet-capf
                      yaml-mode yaml xterm-color with-editor
                      window-tool-bar which-key wgrep websocket
                      vertico verilog-mode queue undo-tree
                      ultra-scroll tsc dash s ts avy transient
                      treesit-jump treesit-auto treepy ace-window
                      pfuture lv hydra ht posframe cfrs treemacs llama
                      magit-section magit treemacs-magit
                      treemacs-icons-dired goto-chg evil treemacs-evil
                      tree-sitter tramp tablist swift-ts-mode
                      swift-mode svg-lib spinner smex sideline f
                      markdown-mode lsp-mode sideline-lsp flycheck
                      sideline-flycheck sideline-eglot shrink-path
                      sesman rust-mode rg recursion-indicator
                      rainbow-delimiters pyvenv python-pytest
                      python-mode ghub pr-review popup poetry pet
                      parseclj parseedn parinfer-rust-mode pandoc-mode
                      org ox-pandoc ox-gfm ov org-super-agenda emacsql
                      org-roam org-roam-ql org-ql org-roam-ql-ql
                      org-numbering org-modern async org-download
                      org-ai orderless kv esxml nov no-littering
                      nerd-icons nerd-icons-completion
                      markdown-ts-mode marginalia magit-popup
                      magit-delta lsp-treemacs lsp-docker loop
                      load-relative ligature kind-icon just-ts-mode
                      json-snatcher json-mode jinx inheritenv idlwave
                      hl-todo highlight-indent-guides elisp-refs
                      helpful gptel git-timemachine git-modes
                      git-messenger git-link git-gutter fringe-helper
                      git-gutter-fringe git-commit-ts-mode closql
                      forge flycheck-swift flycheck-rust eglot
                      flycheck-eglot clojure-mode cider
                      flycheck-clojure fish-mode faceup
                      exec-path-from-shell evil-textobj-tree-sitter
                      evil-surround annalist evil-collection erlang
                      erlang-ts envrc embark consult embark-consult
                      el-patch editorconfig eat doom-modeline
                      dockerfile-mode docker-compose-mode aio docker
                      diminish difftastic dape csv-mode crux corfu
                      consult-yasnippet consult-xref-stack
                      consult-todo consult-project-extra
                      consult-org-roam consult-ghq consult-gh
                      consult-gh-forge consult-gh-embark
                      consult-flycheck consult-eglot compile-angel
                      company combobulate codeium clojure-ts-mode
                      catppuccin-theme casual casual-avy
                      cargo-transient cargo-mode cape bui
                      browse-at-remote breadcrumb apheleia
                      all-the-icons all-the-icons-dired
                      all-the-icons-completion aidermacs
                      aggressive-indent affe)
        package-activated-list)))
(progn
  (require 'info) (info-initialize)
  (setq Info-directory-list
        (append
         '("/Users/jesse/.config/emacs/elpa/company-20250223.352"
           "/Users/jesse/.config/emacs/elpa/editorconfig-20250219.1528"
           "/Users/jesse/.config/emacs/elpa/embark-20250127.1315"
           "/Users/jesse/.config/emacs/elpa/annalist-20240501.1201"
           "/Users/jesse/.config/emacs/elpa/eglot-1.18"
           "/Users/jesse/.config/emacs/elpa/forge-20250223.1744"
           "/Users/jesse/.config/emacs/elpa/idlwave-6.5.1"
           "/Users/jesse/.config/emacs/elpa/magit-popup-20200719.1015"
           "/Users/jesse/.config/emacs/elpa/orderless-20250201.2341"
           "/Users/jesse/.config/emacs/elpa/org-ql-20241107.345"
           "/Users/jesse/.config/emacs/elpa/org-roam-20250218.1722"
           "/Users/jesse/.config/emacs/elpa/org-super-agenda-20240916.1753"
           "/Users/jesse/.config/emacs/elpa/org-9.7.23"
           "/Users/jesse/.config/emacs/elpa/pandoc-mode-20250225.852"
           "/Users/jesse/.config/emacs/elpa/ghub-20250220.1447"
           "/Users/jesse/.config/emacs/elpa/rg-20241221.1420"
           "/Users/jesse/.config/emacs/elpa/tramp-2.7.2.2"
           "/Users/jesse/.config/emacs/elpa/evil-20250226.1804"
           "/Users/jesse/.config/emacs/elpa/magit-20250225.837"
           "/Users/jesse/.config/emacs/elpa/magit-section-20250221.105"
           "/Users/jesse/.config/emacs/elpa/transient-20250222.1912"
           "/Users/jesse/.config/emacs/elpa/dash-20240510.1327"
           "/Users/jesse/.config/emacs/elpa/with-editor-20241201.1419")
         Info-directory-list)))

;; Local Variables:
;; version-control: never
;; no-update-autoloads: t
;; byte-compile-warnings: (not make-local)
;; End:
