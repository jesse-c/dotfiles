;;; notes.el --- -*- lexical-binding: t; mode: emacs-lisp; -*-

{{- if eq .chezmoi.os "darwin"}}
(defvar org-dir "~/Documents/org/")
{{- end}}
{{- if eq .chezmoi.os "linux"}}
(defvar org-dir "~/Dropbox/org/")
{{- end}}

(defvar org-roam-dir (file-name-concat org-dir "roam/"))

(setq org-log-done t)

(use-package org
  :ensure nil
  :custom
  (org-confirm-babel-evaluate nil)
  (org-todo-keywords '((sequence "TODO(t)" "IN-PROGRESS(i)" "REVIEW(r)" "|" "DONE(d)" "CANCELLED(c)")))
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((verb . t)
     (restclient . t)
     (python . t)
     (go . t))))

(use-package org-roam
  :defer t
  :after org
  :custom
  (org-roam-directory (file-truename org-roam-dir))
  (org-roam-completion-everywhere t)
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
         :map org-mode-map
         ("C-M-i" . completion-at-point))
  :config
  ;; If you're using a vertical completion framework, you might want a more informative completion interface
  (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
  ;; RETURN will follow links in org-mode files
  (setq org-return-follows-link  t)
  (org-roam-db-autosync-mode)
  ;; If using org-roam-protocol
  (require 'org-roam-protocol))

(use-package org-journal
  :defer t
  :init
  ;; Change default prefix key; needs to be set before loading org-journal
  (setq org-journal-prefix-key "C-c j ")
  :custom
  (org-journal-dir (concat org-dir "journal"))
  (org-journal-date-format "%y-%m-%d %a")
  (org-agenda-files (concat org-dir "agenda"))
  (org-agenda-start-with-log-mode t)
  (org-log-intro-drawer t))

(use-package org-transclusion
  :after org)

(use-package org-projectile
  :after org
  :bind
  (("C-c n p" . org-projectile-project-todo-completing-read)
   ("C-c c" . org-capture))
  :custom
  (org-projectile-per-project-filepath "TODO.org")
  (org-projectile-projects-file (concat org-dir "projects/TODOS.org"))
  :config
  (org-projectile-per-project)
  (progn
    (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
    (push (org-projectile-project-todo-entry) org-capture-templates)))

(use-package org-pomodoro)

(use-package org-modern)

(use-package ob-go
  :ensure
  (:type git :host github :repo "pope/ob-go" :branch "master"))

(defun my/open-project-notes ()
  "Open the project's notes."
  (interactive)
  (let* ((notes-file-name (concat (projectile-project-root) "NOTES.org")))
    (find-file notes-file-name)))

(use-package annotate
  :custom (annotate-file "~/Documents/annotations/"))

(provide 'notes)

;;; notes.el ends here
